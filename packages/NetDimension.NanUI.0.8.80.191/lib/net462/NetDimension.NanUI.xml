<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetDimension.NanUI</name>
    </assembly>
    <members>
        <member name="M:NetDimension.NanUI.ActionTask.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:NetDimension.NanUI.ActionTask"/> class.
            </summary>
            <param name="action">
            The action.
            </param>
        </member>
        <member name="M:NetDimension.NanUI.ActionTask.Execute">
            <summary>
            The execute.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.ActionTask.Action">
            <summary>
            Gets or sets the action.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.Browser">
            <summary>
            Gets the instance of the CefBrowser using in current window.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.InvokeIfRequired(System.Action)">
            <summary>
            Invokes action in the UI thread of current window.
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.PostUIThread(System.Action)">
            <summary>
            Posts action to the UI thread of current window.
            </summary>
            <param name="a"></param>
            
        </member>
        <member name="P:NetDimension.NanUI.Formium.IsWebViewReady">
            <summary>
            Gets a value indicating whether the WebView is ready to use.
            </summary>
        </member>
        <member name="E:NetDimension.NanUI.Formium.BrowserCreated">
            <summary>
            Occurs before the browser is Created.
            </summary>
        </member>
        <member name="E:NetDimension.NanUI.Formium.BeforePopup">
            <summary>
            Called on the UI thread before a new popup browser is created. The
            |browser| and |frame| values represent the source of the popup request. The
            |target_url| and |target_frame_name| values indicate where the popup
            browser should navigate and may be empty if not specified with the request.
            The |target_disposition| value indicates where the user intended to open
            the popup (e.g. current tab, new tab, etc). The |user_gesture| value will
            be true if the popup was opened via explicit user gesture (e.g. clicking a
            link) or false if the popup opened automatically (e.g. via the
            DomContentLoaded event). The |popupFeatures| structure contains additional
            information about the requested popup window. To allow creation of the
            popup browser optionally modify |windowInfo|, |client|, |settings| and
            |no_javascript_access| and return false. To cancel creation of the popup
            browser return true. The |client| and |settings| values will default to the
            source browser's values. If the |no_javascript_access| value is set to
            false the new browser will not be scriptable and may not be hosted in the
            same renderer process as the source browser. Any modifications to
            |windowInfo| will be ignored if the parent browser is wrapped in a
            CefBrowserView. Popup browser creation will be canceled if the parent
            browser is destroyed before the popup browser creation completes (indicated
            by a call to OnAfterCreated for the popup browser). The |extra_info|
            parameter provides an opportunity to specify extra information specific
            to the created popup browser that will be passed to
            CefRenderProcessHandler::OnBrowserCreated() in the render process.
            </summary>
        </member>
        <member name="E:NetDimension.NanUI.Formium.BeforeClose">
            <summary>
            Called just before a browser is destroyed. Release all references to the
            browser object and do not attempt to execute any methods on the browser
            object (other than GetIdentifier or IsSame) after this callback returns.
            This callback will be the last notification that references |browser| on
            the UI thread. Any in-progress network requests associated with |browser|
            will be aborted when the browser is destroyed, and
            CefResourceRequestHandler callbacks related to those requests may still
            arrive on the IO thread after this method is called. See DoClose()
            documentation for additional usage information.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnBeforePopup(NetDimension.NanUI.Browser.BeforePopupEventArgs)">
            <summary>
            Raises the BeforePopup event.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnBeforeClose(NetDimension.NanUI.Browser.FormiumCloseEventArgs)">
            <summary>
            Raises the BeforeClose event.
            </summary>
        </member>
        <member name="E:NetDimension.NanUI.Formium.LoadStart">
            <summary>
            Called after a navigation has been committed and before the browser begins
            loading contents in the frame. The |frame| value will never be empty --
            call the IsMain() method to check if this frame is the main frame.
            |transition_type| provides information about the source of the navigation
            and an accurate value is only available in the browser process. Multiple
            frames may be loading at the same time. Sub-frames may start or continue
            loading after the main frame load has ended. This method will not be called
            for same page navigations (fragments, history state, etc.) or for
            navigations that fail or are canceled before commit. For notification of
            overall browser load status use OnLoadingStateChange instead.
            </summary>
        </member>
        <member name="E:NetDimension.NanUI.Formium.LoadEnd">
            <summary>
            Called when the browser is done loading a frame. The |frame| value will
            never be empty -- call the IsMain() method to check if this frame is the
            main frame. Multiple frames may be loading at the same time. Sub-frames may
            start or continue loading after the main frame load has ended. This method
            will not be called for same page navigations (fragments, history state,
            etc.) or for navigations that fail or are canceled before commit. For
            notification of overall browser load status use OnLoadingStateChange
            instead.
            </summary>
        </member>
        <member name="E:NetDimension.NanUI.Formium.LoadError">
            <summary>
            Called when a navigation fails or is canceled. This method may be called
            by itself if before commit or in combination with OnLoadStart/OnLoadEnd if
            after commit. |errorCode| is the error code number, |errorText| is the
            error text and |failedUrl| is the URL that failed to load.
            See net\base\net_error_list.h for complete descriptions of the error codes.
            </summary>
        </member>
        <member name="E:NetDimension.NanUI.Formium.LoadingStateChanged">
            <summary>
            Called when the loading state has changed. This callback will be executed
            twice -- once when loading is initiated either programmatically or by user
            action, and once when loading is terminated due to completion, cancellation
            of failure. It will be called before any calls to OnLoadStart and after all
            calls to OnLoadError and/or OnLoadEnd.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnLoadStart(NetDimension.NanUI.Browser.LoadStartEventArgs)">
            <summary>
            Raises the LoadStart event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnLoadEnd(NetDimension.NanUI.Browser.LoadEndEventArgs)">
            <summary>
            Raises the LoadEnd event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnLoadError(NetDimension.NanUI.Browser.LoadErrorEventArgs)">
            <summary>
            Raises the LoadError event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnLoadingStateChanged(NetDimension.NanUI.Browser.LoadingStateChangeEventArgs)">
            <summary>
            Raises the LoadingStateChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:NetDimension.NanUI.Formium.AddressChanged">
            <summary>
            Called when a frame's address has changed.
            </summary>
        </member>
        <member name="E:NetDimension.NanUI.Formium.ConsoleMessage">
            <summary>
            Called to display a console message. Return true to stop the message from
            being output to the console.
            </summary>
        </member>
        <member name="E:NetDimension.NanUI.Formium.FullScreenModeChanged">
            <summary>
            Called when web content in the page has toggled fullscreen mode. If
            |fullscreen| is true the content will automatically be sized to fill the
            browser content area. If |fullscreen| is false the content will
            automatically return to its original size and position. The client is
            responsible for resizing the browser if desired.
            </summary>
        </member>
        <member name="E:NetDimension.NanUI.Formium.LoadingProgressChanged">
            <summary>
            Called when the overall page loading progress has changed. |progress|
            ranges from 0.0 to 1.0.
            </summary>
        </member>
        <member name="E:NetDimension.NanUI.Formium.StatusMessage">
            <summary>
            Called when the browser receives a status message. |value| contains the
            text that will be displayed in the status message.
            </summary>
        </member>
        <member name="E:NetDimension.NanUI.Formium.DocumentTitleChanged">
            <summary>
            Called when the page title changes.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnAddressChanged(NetDimension.NanUI.Browser.AddressChangedEventArgs)">
            <summary>
            Raises the AddressChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnConsoleMessage(NetDimension.NanUI.Browser.ConsoleMessageEventArgs)">
            <summary>
            Raises the ConsoleMessage event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnFullscreenModeChanged(NetDimension.NanUI.Browser.FullScreenModeChangedEventArgs)">
            <summary>
            Raises the FullScreenModeChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnLoadingProgressChanged(NetDimension.NanUI.Browser.LoadingProgressChangedEventArgs)">
            <summary>
            Raises the LoadingProgressChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnStatusMessage(NetDimension.NanUI.Browser.StatusMessageEventArgs)">
            <summary>
            Raises the StatusMessage event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnDocumentTitleChanged(NetDimension.NanUI.Browser.DocumentTitleChangedEventArgs)">
            <summary>
            Raises the DocumentTitleChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:NetDimension.NanUI.Formium.BeforeContextMenu">
            <summary>
            Called before a context menu is displayed. |params| provides information
            about the context menu state. |model| initially contains the default
            context menu. The |model| can be cleared to show no context menu or
            modified to show a custom menu. Do not keep references to |params| or
            |model| outside of this callback.
            </summary>
        </member>
        <member name="E:NetDimension.NanUI.Formium.ContextMenuCommand">
            <summary>
            Called to execute a command selected from the context menu. Return true if
            the command was handled or false for the default implementation. See
            cef_menu_id_t for the command ids that have default implementations. All
            user-defined command ids should be between MENU_ID_USER_FIRST and
            MENU_ID_USER_LAST. |params| will have the same values as what was passed to
            OnBeforeContextMenu(). Do not keep a reference to |params| outside of this
            callback.
            </summary>
        </member>
        <member name="E:NetDimension.NanUI.Formium.DragEnter">
            <summary>
            Called when an external drag event enters the browser window. |dragData|
            contains the drag event data and |mask| represents the type of drag
            operation. Return false for default drag handling behavior or true to
            cancel the drag event.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnBeforeContextMenu(NetDimension.NanUI.Browser.BeforeContextMenuEventArgs)">
            <summary>
            Raises the BeforeContextMenu event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnContextMenuCommand(NetDimension.NanUI.Browser.ContextMenuCommandEventArgs)">
            <summary>
            Raises the ContextMenuCommand event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnDragEnter(NetDimension.NanUI.Browser.DragEnterEventArgs)">
            <summary>
            Raises the DragEnter event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:NetDimension.NanUI.Formium.GetAuthCredentials">
            <summary>
            Called on the IO thread when the browser needs credentials from the user.
            |origin_url| is the origin making this authentication request. |isProxy|
            indicates whether the host is a proxy server. |host| contains the hostname
            and |port| contains the port number. |realm| is the realm of the challenge
            and may be empty. |scheme| is the authentication scheme used, such as
            "basic" or "digest", and will be empty if the source of the request is an
            FTP server. Return true to continue the request and call
            CefAuthCallback::Continue() either in this method or at a later time when
            the authentication information is available. Return false to cancel the
            request immediately.
            </summary>
        </member>
        <member name="E:NetDimension.NanUI.Formium.CertificateError">
            <summary>
            Called on the UI thread to handle requests for URLs with an invalid
            SSL certificate. Return true and call CefRequestCallback::Continue() either
            in this method or at a later time to continue or cancel the request. Return
            false to cancel the request immediately. If
            CefSettings.ignore_certificate_errors is set all invalid certificates will
            be accepted without calling this method.
            </summary>
        </member>
        <member name="E:NetDimension.NanUI.Formium.BeforeBrowse">
            <summary>
            Called on the UI thread before browser navigation. Return true to cancel
            the navigation or false to allow the navigation to proceed. The |request|
            object cannot be modified in this callback.
            CefLoadHandler::OnLoadingStateChange will be called twice in all cases.
            If the navigation is allowed CefLoadHandler::OnLoadStart and
            CefLoadHandler::OnLoadEnd will be called. If the navigation is canceled
            CefLoadHandler::OnLoadError will be called with an |errorCode| value of
            ERR_ABORTED. The |user_gesture| value will be true if the browser
            navigated via explicit user gesture (e.g. clicking a link) or false if it
            navigated automatically (e.g. via the DomContentLoaded event).
            </summary>
        </member>
        <member name="E:NetDimension.NanUI.Formium.RenderProcessTerminated">
            <summary>
            Called on the browser process UI thread when the render process
            terminates unexpectedly. |status| indicates how the process
            terminated.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnBeforeBrowse(NetDimension.NanUI.Browser.BeforeBrowseEventArgs)">
            <summary>
            Raises the OnBeforeBrowse event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnGetAuthCredentials(NetDimension.NanUI.Browser.AuthCredentialsEventArgs)">
            <summary>
            Raises the GetAuthCredentials event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnCertificateError(NetDimension.NanUI.Browser.CertificateErrorEventArgs)">
            <summary>
            Raises the CertificateError event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnRenderProcessTerminated(NetDimension.NanUI.Browser.RenderProcessTerminatedEventArgs)">
            <summary>
            Raises the RenderProcessTerminated event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:NetDimension.NanUI.Formium.BeforeDownload">
            <summary>
            Called before a download begins. |suggested_name| is the suggested name for
            the download file. By default the download will be canceled. Execute
            |callback| either asynchronously or in this method to continue the download
            if desired. Do not keep a reference to |download_item| outside of this
            method.
            </summary>
        </member>
        <member name="E:NetDimension.NanUI.Formium.DownloadUpdated">
            <summary>
            Called when a download's status or progress information has been updated.
            This may be called multiple times before and after OnBeforeDownload().
            Execute |callback| either asynchronously or in this method to cancel the
            download if desired. Do not keep a reference to |download_item| outside of
            this method.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnBeforeDownload(NetDimension.NanUI.Browser.BeforeDownloadEventArgs)">
            <summary>
            Raises the BeforeDownload event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnDownloadUpdated(NetDimension.NanUI.Browser.DownloadUpdatedEventArgs)">
            <summary>
            Raises the DownloadUpdated event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:NetDimension.NanUI.Formium.KeyEvent">
            <summary>
            Called after the renderer and JavaScript in the page has had a chance to
            handle the event. |event| contains information about the keyboard event.
            |os_event| is the operating system event message, if any. Return true if
            the keyboard event was handled or false otherwise.
            </summary>
        </member>
        <member name="E:NetDimension.NanUI.Formium.PreKeyEvent">
            <summary>
            Called before a keyboard event is sent to the renderer. |event| contains
            information about the keyboard event. |os_event| is the operating system
            event message, if any. Return true if the event was handled or false
            otherwise. If the event will be handled in OnKeyEvent() as a keyboard
            shortcut set |is_keyboard_shortcut| to true and return false.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnKeyEvent(NetDimension.NanUI.Browser.KeyEventArgs)">
            <summary>
            Raises the PreKeyEvent event.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnPreKeyEvent(NetDimension.NanUI.Browser.PreKeyEventArgs)">
            <summary>
            Raises the OnKeyEvent event.
            </summary>
        </member>
        <member name="E:NetDimension.NanUI.Formium.FindResult">
            <summary>
            Called to report find results returned by CefBrowserHost::Find().
            |identifer| is the identifier passed to Find(), |count| is the number of
            matches currently identified, |selectionRect| is the location of where the
            match was found (in window coordinates), |activeMatchOrdinal| is the
            current position in the search results, and |finalUpdate| is true if this
            is the last find notification.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnFindResult(NetDimension.NanUI.Browser.FindResultEventArgs)">
            <summary>
            Raises the FindResult event.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.HostWindow">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.IsFullScreen">
            <summary>
            Gets a value indicating whether the Formium is in full screen mode.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.HostWindowHandle">
            <summary>
            Gets the handle of the host window.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.BrowserWindowHandle">
            <summary>
            Gets the handle of the browser window.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.WindowType">
            <summary>
            Sets the window type of current window, this value can not changed when host window is created.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.StartUrl">
            <summary>
            Sets the startup url.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.AllowSystemMenu">
            <summary>
            Gets or sets the system menu will show when right clicking in dragable regions.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.AllowFullScreen">
            <summary>
            Gets or sets  a value indicating whether the formium allows to full screen mode.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.AutoShowMask">
            <summary>
            Gets or sets a value indicating whether the Mask Panel allows to show on startup.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.Title">
            <summary>
            Gets or sets the main title associated with this window.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.Subtitle">
            <summary>
            Gets or sets the subtitle associated with this window.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.Icon">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.Location">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.Size">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.ClientSize">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.MaximumSize">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.MinimumSize">
            <summary>
            Gets or sets the minimum size the window can be resized to.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.ShowInTaskbar">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.StartPosition">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.WindowState">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.TopMost">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.Width">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.Height">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.Left">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.Top">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.Visible">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.DialogResult">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.Resizable">
            <summary>
            Gets or sets a value indicating whether the window can be resize.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.CanMaximize">
            <summary>
            Gets or sets a value indicating whether the maximize behavior is allowed to perform.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.CanMinimize">
            <summary>
            Gets or sets a value indicating whether the minimize behavior is allowed to perform.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.BorderlessWindowProperties">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.KioskWindowProperties">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.SystemWindowProperties">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.AcrylicWindowProperties">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.FullScreen(System.Boolean)">
            <summary>
            Makes the window to full screen mode.
            </summary>
            <param name="toggle"></param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.Show">
            <summary>
            Displays the form to the users
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.Show(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the form with the specified owner to the user.
            </summary>
            <param name="owner">
            Any object that implements System.Windows.Forms.IWin32Window and represents the
                top-level window that will own this form.
            </param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.Show(NetDimension.NanUI.Formium)">
            <summary>
            Shows the form with the specified owner to the user.
            </summary>
            <param name="owner">
            Any object that implements System.Windows.Forms.IWin32Window and represents the
                top-level window that will own this form.
            </param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.ShowDialog">
            <summary>
            Shows the form as a modal dialog box.
            </summary>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:NetDimension.NanUI.Formium.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the form as a modal dialog box with the specified owner.
            </summary>
            <param name="owner">Any object that implements System.Windows.Forms.IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:NetDimension.NanUI.Formium.ShowDialog(NetDimension.NanUI.Formium)">
            <summary>
            Shows the form as a modal dialog box with the specified owner.
            </summary>
            <param name="owner">Any object that implements Formium that represents the top-level window that will own the modal dialog box.</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.NanUI.Formium.Close(System.Boolean)">
            <summary>
            Closes the form.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.Hide">
            <summary>
            Hides the form.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.CanGoBack">
            <summary>
            Returns true if current browser can navigate backwards.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.CanGoForward">
            <summary>
            Returns true if current browser can navigate forwards.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.FrameCount">
            <summary>
            Returns the number of frames that currently exist.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.HasDocument">
            <summary>
            Returns true if a document has been loaded in the browser.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.Identifier">
            <summary>
            Returns the globally unique identifier for this browser. This value is also
            used as the tabId for extension APIs.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.IsLoading">
            <summary>
            Returns true if the browser is currently loading.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Formium.IsPopup">
            <summary>
            Returns true if the window is a popup window.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.GetFocusedFrame">
            <summary>
            Returns the focused frame for the browser window.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.GetFrame(System.Int64)">
            <summary>
            Returns the frame with the specified identifier, or NULL if not found.
            </summary>
            <param name="identifier">The identifier of the frame to be get.</param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.GetFrame(System.String)">
            <summary>
            Returns the frame with the specified name, or NULL if not found.
            </summary>
            <param name="name">The name of the frame to be get.</param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.GetFrameIdentifiers">
            <summary>
            Returns the identifiers of all existing frames.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.GetFrameNames">
            <summary>
            Returns the names of all existing frames.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.GetHost">
            <summary>
            Returns the browser host object. This method can only be called in the
            browser process.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.GetMainFrame">
            <summary>
            Returns the main (top-level) frame for the browser window.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.GoBack">
            <summary>
            Navigate backwards.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.GoForward">
            <summary>
            Navigate forwards.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.IsSame(Xilium.CefGlue.CefBrowser)">
            <summary>
            Returns true if this object is pointing to the same handle as |that|
            object.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.Reload(System.Boolean)">
            <summary>
            Reload the current page.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.StopLoad">
            <summary>
            Stop loading the page.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.ExecuteJavaScript(System.String)">
            <summary>
            Execute a string of JavaScript code in main frame.
            </summary>
            <param name="code">The javascript code that will be executed.</param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.EvaluateJavaScriptAsync(System.String)">
            <summary>
            Execute a string of JavaScript code in main frame and get result asynchronously.
            </summary>
            <param name="code">The javascript code that will be executed.</param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.RegisterExternalObjectValue(System.String,NetDimension.NanUI.JavaScript.JavaScriptValue)">
            <summary>
            Register JavaScript object into Formium.external object.
            </summary>
            <param name="name">The name of the object will be registered.</param>
            <param name="value">The JavaScriptValue of object type.</param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.ShowDevTools">
            <summary>
            Open developer tools (DevTools) in its own browser. The DevTools browser
            will remain associated with this browser. If the DevTools browser is
            already open then it will be focused.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.#ctor">
            <summary>
            Initializes a new instance of the Formium class.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnReady">
            <summary>
            If the browser context is ready to use.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.GetWindowTitle">
            <summary>
            Combine subtile and main title of the window.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnCreateBrowserSettings(Xilium.CefGlue.CefBrowserSettings)">
            <summary>
            Setup the default browser settings.
            </summary>
            <param name="defaultBrowserSettings"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.NanUI.Formium.CreateCustomHostWindow">
            <summary>
            If the WindowType is set to Custom, you should create your own window here to host the the browser.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.OnCreateHostWindow(System.Windows.Forms.Form)">
            <summary>
            Fires when the host window is creating.
            </summary>
            <param name="hostWindow"></param>
        </member>
        <member name="M:NetDimension.NanUI.Formium.HostWindowWndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.NanUI.Formium.HostWindowDefWndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows def messages.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="P:NetDimension.NanUI.Formium.IsDisposed">
            <summary>
            Gets the Formium is disposed.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.Dispose">
            <summary>
            Release all resources.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Formium.Dispose(System.Boolean)">
            <summary>
            Release all resources.
            </summary>
            <param name="isDisposing"></param>
        </member>
        <member name="F:NetDimension.NanUI.HostWindow.AboutDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.HostWindow.AboutDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NetDimension.NanUI.HostWindow.AboutDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.HostWindow.BorderlessWindow.ShadowEffect">
            <summary>
            窗体的阴影样式
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.HostWindow.BorderlessWindow.BorderEffect">
            <summary>
            窗体的边框样式
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.HostWindow.BorderlessWindow.IsWindowActivatedCore">
            <summary>
            Gets and sets the active state of the window.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.HostWindow.ShadowDecorator.IsDisposed">
            <summary>
            IsDisposed status
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.HostWindow.ShadowDecorator.Dispose">
            <summary>
            Standard Dispose
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.HostWindow.ShadowDecorator.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">True if disposing, false otherwise</param>
        </member>
        <member name="T:NetDimension.NanUI.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Properties.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Properties.Resources.ASCII_NanUI_Logo">
            <summary>
              查找类似 
             P.O.W.E.R.E.D BY                          
             ███╗   ██╗ █████╗ ███╗   ██╗██╗   ██╗██╗  
             ████╗  ██║██╔══██╗████╗  ██║██║   ██║██║  
             ██╔██╗ ██║███████║██╔██╗ ██║██║   ██║██║  
             ██║╚██╗██║██╔══██║██║╚██╗██║██║   ██║██║  
             ██║ ╚████║██║  ██║██║ ╚████║╚██████╔╝██║  
             ╚═╝  ╚═══╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚═╝  
                                       S.I.N.C.E 2016  
                                                        的本地化字符串。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Properties.Resources.DefaultIcon">
            <summary>
              查找类似于 (图标) 的 System.Drawing.Icon 类型的本地化资源。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Properties.Resources.DevToolsIcon">
            <summary>
              查找类似于 (图标) 的 System.Drawing.Icon 类型的本地化资源。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Properties.Resources.DropShadow">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Properties.Resources.GlowShadow">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Properties.Resources.HostWindowJavaScriptExtension">
             <summary>
               查找类似 var Formium = Formium || {};
            
            (function ($this) {
            
                const CMD_ATTR_PREFIX = &quot;formium-command&quot;;
            
                const RAISE_FUNC_NAME = &quot;__formium_raiseHostWindowEvent&quot;;
            
                const GLOBAL_CLICK_HANDLER_REGISTERED =
                    &quot;__formium_global_click_handler_registered&quot;;
            
            
                let isV8Ready = false;
            
                let isDomReady = false;
            
                const readyFunctions = [];
            
                const contextReadyFunctions = [];
            
                $this._setContextReady =  () =&gt; {
            
                    isV8Ready = true;
            
                    if (!window.hasOwnPropert [字符串的其余部分被截断]&quot;; 的本地化字符串。
             </summary>
        </member>
        <member name="P:NetDimension.NanUI.Properties.Resources.Licenses">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Properties.Resources.Powered">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Properties.Resources.RoundedDropShadow">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Properties.Resources.RoundedGlowShadow">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Properties.Resources.RoundedShadow">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Properties.Resources.Shadow">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="F:NetDimension.NanUI.ResourceHandler.Method.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:NetDimension.NanUI.ResourceHandler.Method.GET">
            <summary>
            The get.
            </summary>
        </member>
        <member name="F:NetDimension.NanUI.ResourceHandler.Method.POST">
            <summary>
            The post.
            </summary>
        </member>
        <member name="F:NetDimension.NanUI.ResourceHandler.Method.PUT">
            <summary>
            The put.
            </summary>
        </member>
        <member name="F:NetDimension.NanUI.ResourceHandler.Method.DELETE">
            <summary>
            The delete.
            </summary>
        </member>
        <member name="F:NetDimension.NanUI.ResourceHandler.Method.HEAD">
            <summary>
            The head.
            </summary>
        </member>
        <member name="F:NetDimension.NanUI.ResourceHandler.Method.OPTIONS">
            <summary>
            The options.
            </summary>
        </member>
        <member name="F:NetDimension.NanUI.ResourceHandler.Method.PATCH">
            <summary>
            The patch.
            </summary>
        </member>
        <member name="F:NetDimension.NanUI.ResourceHandler.Method.MERGE">
            <summary>
            The merge.
            </summary>
        </member>
        <member name="T:NetDimension.NanUI.Resources.Messages">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Resources.Messages.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Resources.Messages.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性，对
              使用此强类型资源类的所有资源查找执行重写。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Resources.Messages.AboutDialog_CloseButton">
            <summary>
              查找类似 关闭(&amp;C) 的本地化字符串。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Resources.Messages.AboutDialog_Title">
            <summary>
              查找类似 关于 NanUI 界面框架 的本地化字符串。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Resources.Messages.Browser_Loading">
            <summary>
              查找类似 正在加载 的本地化字符串。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Resources.Messages.ContextMenu_CloseDevTools">
            <summary>
              查找类似 关闭 DevTools(&amp;C) 的本地化字符串。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Resources.Messages.ContextMenu_ShowDevTools">
            <summary>
              查找类似 打开 DevTools(&amp;D) 的本地化字符串。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Resources.Messages.Exception_DoseNotImpementIHostWindow">
            <summary>
              查找类似 {0} 需要继承IHostWindow接口。 的本地化字符串。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Resources.Messages.Exception_HaveNoRetureValue">
            <summary>
              查找类似 {0} 需要指定返回值。 的本地化字符串。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Resources.Messages.HostWindow_DefaultTitle">
            <summary>
              查找类似 WinFormium 承载窗体 的本地化字符串。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Resources.Messages.HostWindow_DevToolsTitle">
            <summary>
              查找类似 WinFormium 开发者工具箱 的本地化字符串。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Resources.Messages.JSDialog_AlertDialog_Title">
            <summary>
              查找类似 消息提示 的本地化字符串。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Resources.Messages.JSDialog_ConfirmDialog_Title">
            <summary>
              查找类似 需要确认 的本地化字符串。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Resources.Messages.JSDialog_NoButton">
            <summary>
              查找类似 否 的本地化字符串。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Resources.Messages.JSDialog_OKButton">
            <summary>
              查找类似 好的 的本地化字符串。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Resources.Messages.JSDialog_YesButton">
            <summary>
              查找类似 是 的本地化字符串。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Resources.Messages.SystemMenu_About">
            <summary>
              查找类似 关于(&amp;A)... 的本地化字符串。
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Resources.Messages.SystemMenu_FullScreen">
            <summary>
              查找类似 全屏(&amp;F) 的本地化字符串。
            </summary>
        </member>
        <member name="F:NetDimension.NanUI.ExtensionExecutePosition.MainProcessStartup">
            <summary>
            Browser process is starting up.
            </summary>
        </member>
        <member name="F:NetDimension.NanUI.ExtensionExecutePosition.SubProcessStartup">
            <summary>
            Before initializing subprocesses.
            </summary>
        </member>
        <member name="F:NetDimension.NanUI.ExtensionExecutePosition.Initialized">
            <summary>
            Cef environment is initialized
            </summary>
        </member>
        <member name="F:NetDimension.NanUI.ExtensionExecutePosition.Terminated">
            <summary>
            Browser process is terminated.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.ApplicationConfigurationBuilderExtensions.UseSingleInstance(NetDimension.NanUI.ApplicationConfigurationBuilder,System.Action)">
            <summary>
            Allows application just run one instance.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Runtime.ChromiumEnvironment">
            <summary>
            Gets the envrionment configurations of CEF
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Runtime.Container">
            <summary>
            Gets the IoC container
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Runtime.IsDebuggingMode">
            <summary>
            Gets the application is running on debugging mode.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Runtime.ProcessType">
            <summary>
            Gets the type of current running instance.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.Runtime.BrowserProcessId">
            <summary>
            Gets the main process Id.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.Runtime.RegisterCustomResourceHandler(NetDimension.NanUI.ResourceHandler.ResourceSchemeConfiguration)">
            <summary>
            Register custom ResourceHandler
            </summary>
            <param name="config"></param>
        </member>
        <member name="P:NetDimension.NanUI.WinFormium.PlatformArchitecture">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.WinFormium.ApplicationName">
            <summary>
            Gets or sets the default application name. Defauts is the product name. This is used for creating application data directory in %APPDATA%\Net Dimension\NanUI\
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.WinFormium.IsRuntimeInitilized">
            <summary>
            Gets a value indicating whether the Runtime is initialized.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.WinFormium.Runtime">
            <summary>
            Gets the instance of Runtime. If the runtime is not ready, it will return null.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.WinFormium.PackedCefVersion">
            <summary>
            Gets the version of Chromium Embedded Framework that is used for NanUI.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.WinFormium.ApplicationRunningDirectory">
            <summary>
            Gets the startup directory of running application now.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.WinFormium.CommonDataDirectory">
            <summary>
            Gets the common data directoy for NanUI. Usually it's in %APPDATA%\Net Dimension\NanUI\
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.WinFormium.CommonCefRuntimeDirectory">
            <summary>
            Gets the public CEF runtime direcroy. Usually it's in %PROGRAMDATA%\Net Dimension\NanUI\[CEF_VERSION]\
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.WinFormium.DefaultAppDataDirectory">
            <summary>
            Gets the data directory of current application.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.WinFormium.DefaultBrowserSettings">
            <summary>
            Gets the default browser settings object. You can set default options with this.
            </summary>
        </member>
        <member name="P:NetDimension.NanUI.WinFormium.DisableAboutMenu">
            <summary>
            You can disalbe About Menu in System Command Menu here, but you 
            must follow the LICENCE of NanUI Project at https://github.com/NetDimension/NanUI/blob/master/LICENCE
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.WinFormium.CreateRuntimeBuilder(System.Action{NetDimension.NanUI.ChromiumEnvironmentBuilder},System.Action{NetDimension.NanUI.ApplicationConfigurationBuilder})">
            <summary>
            
            </summary>
            <param name="buildChromiumEnvironment"></param>
            <param name="buildApplicationConfiguration"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.NanUI.WinFormium.GetLogger">
            <summary>
            Gets the default Logger implement.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.WinFormium.Run">
            <summary>
            Run the NanUI application with settings.
            </summary>
        </member>
        <member name="M:NetDimension.NanUI.WinFormium.RunAsSubprocess">
            <summary>
            Run the NanUI subprocess.
            </summary>
        </member>
        <member name="T:Caliburn.Light.SimpleContainer">
            <summary>
            A simple IoC container.
            </summary>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Light.SimpleContainer" /> class.
            </summary>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.CreateChildContainer">
            <summary>
            Creates a child container.
            </summary>
            <returns>A new container.</returns>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.IsRegistered(System.Type,System.String)">
            <summary>
            Determines if a handler for the service/key has previously been registered.
            </summary>
            <param name="service">The service.</param>
            <param name="key">The key.</param>
            <returns>True if a handler is registered; false otherwise.</returns>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.IsRegistered``1(System.String)">
            <summary>
            Determines if a handler for the service/key has previously been registered.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="key">The key.</param>
            <returns>True if a handler is registered; false otherwise.</returns>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.RegisterSingleton(System.Type,System.Type,System.String)">
            <summary>
            Registers the class so that it is created once, on first request, and the same instance is returned to all requestors thereafter.
            </summary>
            <param name="service">The service.</param>
            <param name="implementation">The implementation.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.RegisterSingleton``1(System.String)">
            <summary>
            Registers the class so that it is created once, on first request, and the same instance is returned to all requestors thereafter.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.RegisterSingleton``2(System.String)">
            <summary>
            Registers the class so that it is created once, on first request, and the same instance is returned to all requestors thereafter.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.RegisterSingleton``1(System.Func{Caliburn.Light.SimpleContainer,``0},System.String)">
            <summary>
            Registers the class so that it is created once, on first request, and the same instance is returned to all requestors thereafter.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="handler">The handler.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            Registers an instance with the container.
            </summary>
            <param name="service">The service.</param>
            <param name="instance">The instance.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.RegisterInstance``1(``0,System.String)">
            <summary>
            Registers an instance with the container.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="instance">The instance.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.RegisterPerRequest(System.Type,System.Type,System.String)">
            <summary>
            Registers the class so that a new instance is created on each request.
            </summary>
            <param name="service">The service.</param>
            <param name="implementation">The implementation.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.RegisterPerRequest``1(System.String)">
            <summary>
            Registers the class so that a new instance is created on each request.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.RegisterPerRequest``2(System.String)">
            <summary>
            Registers the class so that a new instance is created on each request.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.RegisterPerRequest(System.Type,System.Func{Caliburn.Light.SimpleContainer,System.Object},System.String)">
            <summary>
            Registers a custom handler for serving requests from the container.
            </summary>
            <param name="service">The service.</param>
            <param name="handler">The handler.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.RegisterPerRequest``1(System.Func{Caliburn.Light.SimpleContainer,``0},System.String)">
            <summary>
            Registers a custom handler for serving requests from the container.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="handler">The handler.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.UnregisterHandler(System.Type,System.String)">
            <summary>
            Unregisters any handlers for the service/key that have previously been registered.
            </summary>
            <param name="service">The service.</param>
            <param name="key">The key.</param>
            <returns>true if handler is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.UnregisterHandler``1(System.String)">
            <summary>
            Unregisters any handlers for the service/key that have previously been registered.
            </summary>
            <typeparam name="TService">The of the service.</typeparam>
            <param name="key">The key.</param>
            <returns>true if handler is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.GetInstance``1(System.String)">
            <summary>
            Requests an instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="key">The key.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.GetInstance(System.Type,System.String)">
            <summary>
            Requests an instance.
            </summary>
            <param name="service">The service.</param>
            <param name="key">The key.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.GetAllInstances``1">
            <summary>
            Gets all instances of a particular type.
            </summary>
            <typeparam name="TService">The type to resolve.</typeparam>
            <returns>The resolved instances.</returns>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.GetAllInstances(System.Type)">
            <summary>
            Requests all instances of a given type.
            </summary>
            <param name="service">The service.</param>
            <returns>All the instances or an empty enumerable if none are found.</returns>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.BuildInstance(System.Type)">
            <summary>
            Actually does the work of creating the instance and satisfying it's constructor dependencies.
            </summary>
            <param name="type">The type.</param>
            <returns>The build instance.</returns>
        </member>
        <member name="M:Caliburn.Light.SimpleContainer.ActivateInstance(System.Type,System.Object[])">
            <summary>
            Creates an instance of the type with the specified constructor arguments.
            </summary>
            <param name="type">The type.</param>
            <param name="args">The constructor arguments.</param>
            <returns>The created instance.</returns>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.Load">
            <summary>
            Loads CEF runtime.
            </summary>
            <exception cref="T:System.DllNotFoundException"></exception>
            <exception cref="T:Xilium.CefGlue.CefVersionMismatchException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.Load(System.String)">
            <summary>
            Loads CEF runtime from specified path.
            </summary>
            <exception cref="T:System.DllNotFoundException"></exception>
            <exception cref="T:Xilium.CefGlue.CefVersionMismatchException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.ExecuteProcess(Xilium.CefGlue.CefMainArgs,Xilium.CefGlue.CefApp,System.IntPtr)">
            <summary>
            This function should be called from the application entry point function to
            execute a secondary process. It can be used to run secondary processes from
            the browser client executable (default behavior) or from a separate
            executable specified by the CefSettings.browser_subprocess_path value. If
            called for the browser process (identified by no "type" command-line value)
            it will return immediately with a value of -1. If called for a recognized
            secondary process it will block until the process should exit and then return
            the process exit code. The |application| parameter may be empty. The
            |windows_sandbox_info| parameter is only used on Windows and may be NULL (see
            cef_sandbox_win.h for details).
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.Initialize(Xilium.CefGlue.CefMainArgs,Xilium.CefGlue.CefSettings,Xilium.CefGlue.CefApp,System.IntPtr)">
            <summary>
            This function should be called on the main application thread to initialize
            the CEF browser process. The |application| parameter may be empty. A return
            value of true indicates that it succeeded and false indicates that it failed.
            The |windows_sandbox_info| parameter is only used on Windows and may be NULL
            (see cef_sandbox_win.h for details).
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.Shutdown">
            <summary>
            This function should be called on the main application thread to shut down
            the CEF browser process before the application exits.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.DoMessageLoopWork">
            <summary>
            Perform a single iteration of CEF message loop processing. This function is
            provided for cases where the CEF message loop must be integrated into an
            existing application message loop. Use of this function is not recommended
            for most users; use either the CefRunMessageLoop() function or
            CefSettings.multi_threaded_message_loop if possible. When using this function
            care must be taken to balance performance against excessive CPU usage. It is
            recommended to enable the CefSettings.external_message_pump option when using
            this function so that CefBrowserProcessHandler::OnScheduleMessagePumpWork()
            callbacks can facilitate the scheduling process. This function should only be
            called on the main application thread and only if CefInitialize() is called
            with a CefSettings.multi_threaded_message_loop value of false. This function
            will not block.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.RunMessageLoop">
            <summary>
            Run the CEF message loop. Use this function instead of an application-
            provided message loop to get the best balance between performance and CPU
            usage. This function should only be called on the main application thread and
            only if CefInitialize() is called with a
            CefSettings.multi_threaded_message_loop value of false. This function will
            block until a quit message is received by the system.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.QuitMessageLoop">
            <summary>
            Quit the CEF message loop that was started by calling CefRunMessageLoop().
            This function should only be called on the main application thread and only
            if CefRunMessageLoop() was used.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.SetOSModalLoop(System.Boolean)">
            <summary>
            Set to true before calling Windows APIs like TrackPopupMenu that enter a
            modal message loop. Set to false after exiting the modal message loop.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.EnableHighDpiSupport">
            <summary>
            Call during process startup to enable High-DPI support on Windows 7 or newer.
            Older versions of Windows should be left DPI-unaware because they do not
            support DirectWrite and GDI fonts are kerned very badly.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.CurrentlyOn(Xilium.CefGlue.CefThreadId)">
            <summary>
            CEF maintains multiple internal threads that are used for handling different
            types of tasks in different processes. See the cef_thread_id_t definitions in
            cef_types.h for more information. This function will return true if called on
            the specified thread. It is an error to request a thread from the wrong
            process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.PostTask(Xilium.CefGlue.CefThreadId,Xilium.CefGlue.CefTask)">
            <summary>
            Post a task for execution on the specified thread. This function may be
            called on any thread. It is an error to request a thread from the wrong
            process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.PostTask(Xilium.CefGlue.CefThreadId,Xilium.CefGlue.CefTask,System.Int64)">
            <summary>
            Post a task for delayed execution on the specified thread. This function may
            be called on any thread. It is an error to request a thread from the wrong
            process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.AddCrossOriginWhitelistEntry(System.String,System.String,System.String,System.Boolean)">
             <summary>
             Add an entry to the cross-origin access whitelist.
            
             The same-origin policy restricts how scripts hosted from different origins
             (scheme + domain + port) can communicate. By default, scripts can only access
             resources with the same origin. Scripts hosted on the HTTP and HTTPS schemes
             (but no other schemes) can use the "Access-Control-Allow-Origin" header to
             allow cross-origin requests. For example, https://source.example.com can make
             XMLHttpRequest requests on http://target.example.com if the
             http://target.example.com request returns an "Access-Control-Allow-Origin:
             https://source.example.com" response header.
            
             Scripts in separate frames or iframes and hosted from the same protocol and
             domain suffix can execute cross-origin JavaScript if both pages set the
             document.domain value to the same domain suffix. For example,
             scheme://foo.example.com and scheme://bar.example.com can communicate using
             JavaScript if both domains set document.domain="example.com".
            
             This method is used to allow access to origins that would otherwise violate
             the same-origin policy. Scripts hosted underneath the fully qualified
             |source_origin| URL (like http://www.example.com) will be allowed access to
             all resources hosted on the specified |target_protocol| and |target_domain|.
             If |target_domain| is non-empty and |allow_target_subdomains| if false only
             exact domain matches will be allowed. If |target_domain| contains a top-
             level domain component (like "example.com") and |allow_target_subdomains| is
             true sub-domain matches will be allowed. If |target_domain| is empty and
             |allow_target_subdomains| if true all domains and IP addresses will be
             allowed.
            
             This method cannot be used to bypass the restrictions on local or display
             isolated schemes. See the comments on CefRegisterCustomScheme for more
             information.
            
             This function may be called on any thread. Returns false if |source_origin|
             is invalid or the whitelist cannot be accessed.
             </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.RemoveCrossOriginWhitelistEntry(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Remove an entry from the cross-origin access whitelist. Returns false if
            |source_origin| is invalid or the whitelist cannot be accessed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.ClearCrossOriginWhitelist">
            <summary>
            Remove all entries from the cross-origin access whitelist. Returns false if
            the whitelist cannot be accessed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.RegisterSchemeHandlerFactory(System.String,System.String,Xilium.CefGlue.CefSchemeHandlerFactory)">
            <summary>
            Register a scheme handler factory for the specified |scheme_name| and
            optional |domain_name|. An empty |domain_name| value for a standard scheme
            will cause the factory to match all domain names. The |domain_name| value
            will be ignored for non-standard schemes. If |scheme_name| is a built-in
            scheme and no handler is returned by |factory| then the built-in scheme
            handler factory will be called. If |scheme_name| is a custom scheme then
            also implement the CefApp::OnRegisterCustomSchemes() method in all processes.
            This function may be called multiple times to change or remove the factory
            that matches the specified |scheme_name| and optional |domain_name|.
            Returns false if an error occurs. This function may be called on any thread
            in the browser process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.ClearSchemeHandlerFactories">
            <summary>
            Clear all registered scheme handler factories. Returns false on error. This
            function may be called on any thread in the browser process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.BeginTracing(System.String,Xilium.CefGlue.CefCompletionCallback)">
             <summary>
             Start tracing events on all processes. Tracing is initialized asynchronously
             and |callback| will be executed on the UI thread after initialization is
             complete.
            
             If CefBeginTracing was called previously, or if a CefEndTracingAsync call is
             pending, CefBeginTracing will fail and return false.
            
             |categories| is a comma-delimited list of category wildcards. A category can
             have an optional '-' prefix to make it an excluded category. Having both
             included and excluded categories in the same list is not supported.
            
             Example: "test_MyTest*"
             Example: "test_MyTest*,test_OtherStuff"
             Example: "-excluded_category1,-excluded_category2"
            
             This function must be called on the browser process UI thread.
             </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.EndTracing(System.String,Xilium.CefGlue.CefEndTracingCallback)">
             <summary>
             Stop tracing events on all processes.
            
             This function will fail and return false if a previous call to
             CefEndTracingAsync is already pending or if CefBeginTracing was not called.
            
             |tracing_file| is the path at which tracing data will be written and
             |callback| is the callback that will be executed once all processes have
             sent their trace data. If |tracing_file| is empty a new temporary file path
             will be used. If |callback| is empty no trace data will be written.
            
             This function must be called on the browser process UI thread.
             </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.NowFromSystemTraceTime">
            <summary>
            Returns the current system trace time or, if none is defined, the current
            high-res time. Can be used by clients to synchronize with the time
            information in trace events.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.ParseUrl(System.String,Xilium.CefGlue.CefUrlParts@)">
            <summary>
            Parse the specified |url| into its component parts.
            Returns false if the URL is empty or invalid.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.GetMimeType(System.String)">
            <summary>
            Returns the mime type for the specified file extension or an empty string if
            unknown.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.GetExtensionsForMimeType(System.String)">
            <summary>
            Get the extensions associated with the given mime type. This should be passed
            in lower case. There could be multiple extensions for a given mime type, like
            "html,htm" for "text/html", or "txt,text,html,..." for "text/*". Any existing
            elements in the provided vector will not be erased.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.Base64Encode(System.Void*,System.Int32)">
            <summary>
            Encodes |data| as a base64 string.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.Base64Decode(System.String)">
            <summary>
            Decodes the base64 encoded string |data|. The returned value will be NULL if
            the decoding fails.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.UriEncode(System.String,System.Boolean)">
            <summary>
            Escapes characters in |text| which are unsuitable for use as a query
            parameter value. Everything except alphanumerics and -_.!~*'() will be
            converted to "%XX". If |use_plus| is true spaces will change to "+". The
            result is basically the same as encodeURIComponent in Javacript.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.UriDecode(System.String,System.Boolean,Xilium.CefGlue.CefUriUnescapeRules)">
            <summary>
            Unescapes |text| and returns the result. Unescaping consists of looking for
            the exact pattern "%XX" where each X is a hex digit and converting to the
            character with the numerical value of those digits (e.g. "i%20=%203%3b"
            unescapes to "i = 3;"). If |convert_to_utf8| is true this function will
            attempt to interpret the initial decoded result as UTF-8. If the result is
            convertable into UTF-8 it will be returned as converted. Otherwise the
            initial decoded result will be returned.  The |unescape_rule| parameter
            supports further customization the decoding process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.ParseJson(System.String,Xilium.CefGlue.CefJsonParserOptions)">
            <summary>
            Parses the specified |json_string| and returns a dictionary or list
            representation. If JSON parsing fails this method returns NULL.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.ParseJsonAndReturnError(System.String,Xilium.CefGlue.CefJsonParserOptions,Xilium.CefGlue.CefJsonParserError@,System.String@)">
            <summary>
            Parses the specified |json_string| and returns a dictionary or list
            representation. If JSON parsing fails this method returns NULL and populates
            |error_code_out| and |error_msg_out| with an error code and a formatted error
            message respectively.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.WriteJson(Xilium.CefGlue.CefValue,Xilium.CefGlue.CefJsonWriterOptions)">
            <summary>
            Generates a JSON string from the specified root |node| which should be a
            dictionary or list value. Returns an empty string on failure. This method
            requires exclusive access to |node| including any underlying data.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.RegisterExtension(System.String,System.String,Xilium.CefGlue.CefV8Handler)">
             <summary>
             Register a new V8 extension with the specified JavaScript extension code and
             handler. Functions implemented by the handler are prototyped using the
             keyword 'native'. The calling of a native function is restricted to the scope
             in which the prototype of the native function is defined. This function may
             only be called on the render process main thread.
            
             Example JavaScript extension code:
             <code>
               // create the 'example' global object if it doesn't already exist.
               if (!example)
                 example = {};
               // create the 'example.test' global object if it doesn't already exist.
               if (!example.test)
                 example.test = {};
               (function() {
                 // Define the function 'example.test.myfunction'.
                 example.test.myfunction = function() {
                   // Call CefV8Handler::Execute() with the function name 'MyFunction'
                   // and no arguments.
                   native function MyFunction();
                   return MyFunction();
                 };
                 // Define the getter function for parameter 'example.test.myparam'.
                 example.test.__defineGetter__('myparam', function() {
                   // Call CefV8Handler::Execute() with the function name 'GetMyParam'
                   // and no arguments.
                   native function GetMyParam();
                   return GetMyParam();
                 });
                 // Define the setter function for parameter 'example.test.myparam'.
                 example.test.__defineSetter__('myparam', function(b) {
                   // Call CefV8Handler::Execute() with the function name 'SetMyParam'
                   // and a single argument.
                   native function SetMyParam();
                   if(b) SetMyParam(b);
                 });
            
                 // Extension definitions can also contain normal JavaScript variables
                 // and functions.
                 var myint = 0;
                 example.test.increment = function() {
                   myint += 1;
                   return myint;
                 };
               })();
             </code>
             Example usage in the page:
             <code>
               // Call the function.
               example.test.myfunction();
               // Set the parameter.
               example.test.myparam = value;
               // Get the parameter.
               value = example.test.myparam;
               // Call another function.
               example.test.increment();
             </code>
             </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.VisitWebPluginInfo(Xilium.CefGlue.CefWebPluginInfoVisitor)">
            <summary>
            Visit web plugin information. Can be called on any thread in the browser
            process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.RefreshWebPlugins">
            <summary>
            Cause the plugin list to refresh the next time it is accessed regardless
            of whether it has already been loaded. Can be called on any thread in the
            browser process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.UnregisterInternalWebPlugin(System.String)">
            <summary>
            Unregister an internal plugin. This may be undone the next time
            CefRefreshWebPlugins() is called. Can be called on any thread in the browser
            process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.RegisterWebPluginCrash(System.String)">
            <summary>
            Register a plugin crash. Can be called on any thread in the browser process
            but will be executed on the IO thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.IsWebPluginUnstable(System.String,Xilium.CefGlue.CefWebPluginUnstableCallback)">
            <summary>
            Query if a plugin is unstable. Can be called on any thread in the browser
            process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.CefRegisterWidevineCdm(System.String,Xilium.CefGlue.CefRegisterCdmCallback)">
             <summary>
             Register the Widevine CDM plugin.
            
             The client application is responsible for downloading an appropriate
             platform-specific CDM binary distribution from Google, extracting the
             contents, and building the required directory structure on the local machine.
             The CefBrowserHost::StartDownload method and CefZipArchive class can be used
             to implement this functionality in CEF. Contact Google via
             https://www.widevine.com/contact.html for details on CDM download.
            
             |path| is a directory that must contain the following files:
               1. manifest.json file from the CDM binary distribution (see below).
               2. widevinecdm file from the CDM binary distribution (e.g.
                  widevinecdm.dll on on Windows, libwidevinecdm.dylib on OS X,
                  libwidevinecdm.so on Linux).
            
             If any of these files are missing or if the manifest file has incorrect
             contents the registration will fail and |callback| will receive a |result|
             value of CEF_CDM_REGISTRATION_ERROR_INCORRECT_CONTENTS.
            
             The manifest.json file must contain the following keys:
               A. "os": Supported OS (e.g. "mac", "win" or "linux").
               B. "arch": Supported architecture (e.g. "ia32" or "x64").
               C. "x-cdm-module-versions": Module API version (e.g. "4").
               D. "x-cdm-interface-versions": Interface API version (e.g. "8").
               E. "x-cdm-host-versions": Host API version (e.g. "8").
               F. "version": CDM version (e.g. "1.4.8.903").
               G. "x-cdm-codecs": List of supported codecs (e.g. "vp8,vp9.0,avc1").
            
             A through E are used to verify compatibility with the current Chromium
             version. If the CDM is not compatible the registration will fail and
             |callback| will receive a |result| value of
             CEF_CDM_REGISTRATION_ERROR_INCOMPATIBLE.
            
             |callback| will be executed asynchronously once registration is complete.
            
             On Linux this function must be called before CefInitialize() and the
             registration cannot be changed during runtime. If registration is not
             supported at the time that CefRegisterWidevineCdm() is called then |callback|
             will receive a |result| value of CEF_CDM_REGISTRATION_ERROR_NOT_SUPPORTED.
             </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.GetPath(Xilium.CefGlue.CefPathKey)">
            <summary>
            Retrieve the path associated with the specified |key|. Returns true on
            success. Can be called on any thread in the browser process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.LaunchProcess(Xilium.CefGlue.CefCommandLine)">
             <summary>
             Launches the process specified via |command_line|. Returns true upon
             success. Must be called on the browser process TID_PROCESS_LAUNCHER thread.
            
             Unix-specific notes:
             - All file descriptors open in the parent process will be closed in the
               child process except for stdin, stdout, and stderr.
             - If the first argument on the command line does not contain a slash,
               PATH will be searched. (See man execvp.)
             </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.IsCertStatusError(Xilium.CefGlue.CefCertStatus)">
            <summary>
            Returns true if the certificate status represents an error.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.CrashReportingEnabled">
             <summary>
             Crash reporting is configured using an INI-style config file named
             "crash_reporter.cfg". On Windows and Linux this file must be placed next to
             the main application executable. On macOS this file must be placed in the
             top-level app bundle Resources directory (e.g.
             "&lt;appname&gt;.app/Contents/Resources"). File contents are as follows:
            
              # Comments start with a hash character and must be on their own line.
            
              [Config]
              ProductName=&lt;Value of the "prod" crash key; defaults to "cef"&gt;
              ProductVersion=&lt;Value of the "ver" crash key; defaults to the CEF version&gt;
              AppName=&lt;Windows only; App-specific folder name component for storing crash
                       information; default to "CEF"&gt;
              ExternalHandler=&lt;Windows only; Name of the external handler exe to use
                               instead of re-launching the main exe; default to empty&gt;
              BrowserCrashForwardingEnabled=&lt;macOS only; True if browser process crashes
                                            should be forwarded to the system crash
                                            reporter; default to false&gt;
              ServerURL=&lt;crash server URL; default to empty&gt;
              RateLimitEnabled=&lt;True if uploads should be rate limited; default to true&gt;
              MaxUploadsPerDay=&lt;Max uploads per 24 hours, used if rate limit is enabled;
                                default to 5&gt;
              MaxDatabaseSizeInMb=&lt;Total crash report disk usage greater than this value
                                   will cause older reports to be deleted; default to 20&gt;
              MaxDatabaseAgeInDays=&lt;Crash reports older than this value will be deleted;
                                    default to 5&gt;
            
              [CrashKeys]
              my_key1=&lt;small|medium|large&gt;
              my_key2=&lt;small|medium|large&gt;
            
             Config section:
            
             If "ProductName" and/or "ProductVersion" are set then the specified values
             will be included in the crash dump metadata. On macOS if these values are set
             to empty then they will be retrieved from the Info.plist file using the
             "CFBundleName" and "CFBundleShortVersionString" keys respectively.
            
             If "AppName" is set on Windows then crash report information (metrics,
             database and dumps) will be stored locally on disk under the
             "C:\Users\[CurrentUser]\AppData\Local\[AppName]\User Data" folder. On other
             platforms the CefSettings.user_data_path value will be used.
            
             If "ExternalHandler" is set on Windows then the specified exe will be
             launched as the crashpad-handler instead of re-launching the main process
             exe. The value can be an absolute path or a path relative to the main exe
             directory. On Linux the CefSettings.browser_subprocess_path value will be
             used. On macOS the existing subprocess app bundle will be used.
            
             If "BrowserCrashForwardingEnabled" is set to true on macOS then browser
             process crashes will be forwarded to the system crash reporter. This results
             in the crash UI dialog being displayed to the user and crash reports being
             logged under "~/Library/Logs/DiagnosticReports". Forwarding of crash reports
             from non-browser processes and Debug builds is always disabled.
            
             If "ServerURL" is set then crashes will be uploaded as a multi-part POST
             request to the specified URL. Otherwise, reports will only be stored locally
             on disk.
            
             If "RateLimitEnabled" is set to true then crash report uploads will be rate
             limited as follows:
              1. If "MaxUploadsPerDay" is set to a positive value then at most the
                 specified number of crashes will be uploaded in each 24 hour period.
              2. If crash upload fails due to a network or server error then an
                 incremental backoff delay up to a maximum of 24 hours will be applied for
                 retries.
              3. If a backoff delay is applied and "MaxUploadsPerDay" is > 1 then the
                 "MaxUploadsPerDay" value will be reduced to 1 until the client is
                 restarted. This helps to avoid an upload flood when the network or
                 server error is resolved.
             Rate limiting is not supported on Linux.
            
             If "MaxDatabaseSizeInMb" is set to a positive value then crash report storage
             on disk will be limited to that size in megabytes. For example, on Windows
             each dump is about 600KB so a "MaxDatabaseSizeInMb" value of 20 equates to
             about 34 crash reports stored on disk. Not supported on Linux.
            
             If "MaxDatabaseAgeInDays" is set to a positive value then crash reports older
             than the specified age in days will be deleted. Not supported on Linux.
            
             CrashKeys section:
            
             A maximum of 26 crash keys of each size can be specified for use by the
             application. Crash key values will be truncated based on the specified size
             (small = 64 bytes, medium = 256 bytes, large = 1024 bytes). The value of
             crash keys can be set from any thread or process using the
             CefSetCrashKeyValue function. These key/value pairs will be sent to the crash
             server along with the crash dump file.+// A maximum of 26 crash keys of each size can be specified for use by the
             application. Crash key values will be truncated based on the specified size
             (small = 64 bytes, medium = 256 bytes, large = 1024 bytes). The value of
             crash keys can be set from any thread or process using the
             CefSetCrashKeyValue function. These key/value pairs will be sent to the crash
             server along with the crash dump file.
             </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.SetCrashKeyValue(System.String,System.String)">
            <summary>
            Sets or clears a specific key-value pair from the crash metadata.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRuntime.LoadCrlSetsFile(System.String)">
            <summary>
            Loads the existing "Certificate Revocation Lists" file that is managed by
            Google Chrome. This file can generally be found in Chrome's User Data
            directory (e.g. "C:\Users\[User]\AppData\Local\Google\Chrome\User Data\" on
            Windows) and is updated periodically by Chrome's component updater service.
            Must be called in the browser process after the context has been initialized.
            See https://dev.chromium.org/Home/chromium-security/crlsets for background.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefAccessibilityHandler">
            <summary>
            Implement this interface to receive accessibility notification when
            accessibility events have been registered. The methods of this class will
            be called on the UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefAccessibilityHandler.OnAccessibilityTreeChange(Xilium.CefGlue.CefValue)">
            <summary>
            Called after renderer process sends accessibility tree changes to the
            browser process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefAccessibilityHandler.OnAccessibilityLocationChange(Xilium.CefGlue.CefValue)">
            <summary>
            Called after renderer process sends accessibility location changes to the
            browser process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefApp.OnBeforeCommandLineProcessing(System.String,Xilium.CefGlue.CefCommandLine)">
            <summary>
            Provides an opportunity to view and/or modify command-line arguments before
            processing by CEF and Chromium. The |process_type| value will be empty for
            the browser process. Do not keep a reference to the CefCommandLine object
            passed to this method. The CefSettings.command_line_args_disabled value
            can be used to start with an empty command-line object. Any values
            specified in CefSettings that equate to command-line arguments will be set
            before this method is called. Be cautious when using this method to modify
            command-line arguments for non-browser processes as this may result in
            undefined behavior including crashes.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefApp.OnRegisterCustomSchemes(Xilium.CefGlue.CefSchemeRegistrar)">
            <summary>
            Provides an opportunity to register custom schemes. Do not keep a reference
            to the |registrar| object. This method is called on the main thread for
            each process and the registered schemes should be the same across all
            processes.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefApp.GetResourceBundleHandler">
            <summary>
            Return the handler for resource bundle events. If
            CefSettings.pack_loading_disabled is true a handler must be returned. If no
            handler is returned resources will be loaded from pack files. This method
            is called by the browser and renderer processes on multiple threads.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefApp.GetBrowserProcessHandler">
            <summary>
            Return the handler for functionality specific to the browser process. This
            method is called on multiple threads in the browser process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefApp.GetRenderProcessHandler">
            <summary>
            Return the handler for render process events. This method is called by the
            render process main thread.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Xilium.CefGlue.CefAuthCallback">
            <summary>
            Callback interface used for asynchronous continuation of authentication
            requests.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefAuthCallback.Continue(System.String,System.String)">
            <summary>
            Continue the authentication request.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefAuthCallback.Cancel">
            <summary>
            Cancel the authentication request.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefBeforeDownloadCallback">
            <summary>
            Callback interface used to asynchronously continue a download.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBeforeDownloadCallback.Continue(System.String,System.Boolean)">
            <summary>
            Call to continue the download. Set |download_path| to the full file path
            for the download including the file name or leave blank to use the
            suggested name and the default temp directory. Set |show_dialog| to true
            if you do wish to show the default "Save As" dialog.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefBinaryValue">
            <summary>
            Class representing a binary value. Can be used on any process and thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBinaryValue.Create(System.Byte[])">
            <summary>
            Creates a new object that is not owned by any other object. The specified
            |data| will be copied.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBinaryValue.IsValid">
            <summary>
            Returns true if this object is valid. This object may become invalid if
            the underlying data is owned by another object (e.g. list or dictionary)
            and that other object is then modified or destroyed. Do not call any other
            methods if this method returns false.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBinaryValue.IsOwned">
            <summary>
            Returns true if this object is currently owned by another object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBinaryValue.IsSame(Xilium.CefGlue.CefBinaryValue)">
            <summary>
            Returns true if this object and |that| object have the same underlying
            data.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBinaryValue.IsEqual(Xilium.CefGlue.CefBinaryValue)">
            <summary>
            Returns true if this object and |that| object have an equivalent underlying
            value but are not necessarily the same object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBinaryValue.Copy">
            <summary>
            Returns a copy of this object. The data in this object will also be copied.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBinaryValue.Size">
            <summary>
            Returns the data size.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBinaryValue.GetData(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Read up to |buffer_size| number of bytes into |buffer|. Reading begins at
            the specified byte |data_offset|. Returns the number of bytes read.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefBrowser">
            <summary>
            Class used to represent a browser window. When used in the browser process
            the methods of this class may be called on any thread unless otherwise
            indicated in the comments. When used in the render process the methods of
            this class may only be called on the main thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowser.GetHost">
            <summary>
            Returns the browser host object. This method can only be called in the
            browser process.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowser.CanGoBack">
            <summary>
            Returns true if the browser can navigate backwards.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowser.GoBack">
            <summary>
            Navigate backwards.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowser.CanGoForward">
            <summary>
            Returns true if the browser can navigate forwards.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowser.GoForward">
            <summary>
            Navigate forwards.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowser.IsLoading">
            <summary>
            Returns true if the browser is currently loading.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowser.Reload">
            <summary>
            Reload the current page.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowser.ReloadIgnoreCache">
            <summary>
            Reload the current page ignoring any cached data.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowser.StopLoad">
            <summary>
            Stop loading the page.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowser.Identifier">
            <summary>
            Returns the globally unique identifier for this browser. This value is also
            used as the tabId for extension APIs.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowser.IsSame(Xilium.CefGlue.CefBrowser)">
            <summary>
            Returns true if this object is pointing to the same handle as |that|
            object.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowser.IsPopup">
            <summary>
            Returns true if the window is a popup window.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowser.HasDocument">
            <summary>
            Returns true if a document has been loaded in the browser.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowser.GetMainFrame">
            <summary>
            Returns the main (top-level) frame for the browser window.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowser.GetFocusedFrame">
            <summary>
            Returns the focused frame for the browser window.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowser.GetFrame(System.Int64)">
            <summary>
            Returns the frame with the specified identifier, or NULL if not found.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowser.GetFrame(System.String)">
            <summary>
            Returns the frame with the specified name, or NULL if not found.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowser.FrameCount">
            <summary>
            Returns the number of frames that currently exist.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowser.GetFrameIdentifiers">
            <summary>
            Returns the identifiers of all existing frames.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowser.GetFrameNames">
            <summary>
            Returns the names of all existing frames.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefBrowserHost">
            <summary>
            Class used to represent the browser process aspects of a browser window. The
            methods of this class can only be called in the browser process. They may be
            called on any thread in that process unless otherwise indicated in the
            comments.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.CreateBrowser(Xilium.CefGlue.CefWindowInfo,Xilium.CefGlue.CefClient,Xilium.CefGlue.CefBrowserSettings,System.String,Xilium.CefGlue.CefDictionaryValue,Xilium.CefGlue.CefRequestContext)">
            <summary>
            Create a new browser window using the window parameters specified by
            |windowInfo|. All values will be copied internally and the actual window
            will be created on the UI thread. If |request_context| is empty the
            global request context will be used. This method can be called on any
            browser process thread and will not block. The optional |extra_info|
            parameter provides an opportunity to specify extra information specific
            to the created browser that will be passed to
            CefRenderProcessHandler::OnBrowserCreated() in the render process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.CreateBrowserSync(Xilium.CefGlue.CefWindowInfo,Xilium.CefGlue.CefClient,Xilium.CefGlue.CefBrowserSettings,System.String,Xilium.CefGlue.CefDictionaryValue,Xilium.CefGlue.CefRequestContext)">
            <summary>
            Create a new browser window using the window parameters specified by
            |windowInfo|. If |request_context| is empty the global request context
            will be used. This method can only be called on the browser process UI
            thread. The optional |extra_info| parameter provides an opportunity to
            specify extra information specific to the created browser that will be
            passed to CefRenderProcessHandler::OnBrowserCreated() in the render
            process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.GetBrowser">
            <summary>
            Returns the hosted browser object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.CloseBrowser(System.Boolean)">
            <summary>
            Request that the browser close. The JavaScript 'onbeforeunload' event will
            be fired. If |force_close| is false the event handler, if any, will be
            allowed to prompt the user and the user can optionally cancel the close.
            If |force_close| is true the prompt will not be displayed and the close
            will proceed. Results in a call to CefLifeSpanHandler::DoClose() if the
            event handler allows the close or if |force_close| is true. See
            CefLifeSpanHandler::DoClose() documentation for additional usage
            information.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.TryCloseBrowser">
            <summary>
            Helper for closing a browser. Call this method from the top-level window
            close handler. Internally this calls CloseBrowser(false) if the close has
            not yet been initiated. This method returns false while the close is
            pending and true after the close has completed. See CloseBrowser() and
            CefLifeSpanHandler::DoClose() documentation for additional usage
            information. This method must be called on the browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.SetFocus(System.Boolean)">
            <summary>
            Set whether the browser is focused.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.GetWindowHandle">
            <summary>
            Retrieve the window handle for this browser. If this browser is wrapped in
            a CefBrowserView this method should be called on the browser process UI
            thread and it will return the handle for the top-level native window.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.GetOpenerWindowHandle">
            <summary>
            Retrieve the window handle of the browser that opened this browser. Will
            return NULL for non-popup windows or if this browser is wrapped in a
            CefBrowserView. This method can be used in combination with custom handling
            of modal windows.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserHost.HasView">
            <summary>
            Returns true if this browser is wrapped in a CefBrowserView.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.GetClient">
            <summary>
            Returns the client for this browser.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.GetRequestContext">
            <summary>
            Returns the request context for this browser.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.GetZoomLevel">
            <summary>
            Get the current zoom level. The default zoom level is 0.0. This method can
            only be called on the UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.SetZoomLevel(System.Double)">
            <summary>
            Change the zoom level to the specified value. Specify 0.0 to reset the
            zoom level. If called on the UI thread the change will be applied
            immediately. Otherwise, the change will be applied asynchronously on the
            UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.RunFileDialog(Xilium.CefGlue.CefFileDialogMode,System.String,System.String,System.String[],System.Int32,Xilium.CefGlue.CefRunFileDialogCallback)">
            <summary>
            Call to run a file chooser dialog. Only a single file chooser dialog may be
            pending at any given time. |mode| represents the type of dialog to display.
            |title| to the title to be used for the dialog and may be empty to show the
            default title ("Open" or "Save" depending on the mode). |default_file_path|
            is the path with optional directory and/or file name component that will be
            initially selected in the dialog. |accept_filters| are used to restrict the
            selectable file types and may any combination of (a) valid lower-cased MIME
            types (e.g. "text/*" or "image/*"), (b) individual file extensions (e.g.
            ".txt" or ".png"), or (c) combined description and file extension delimited
            using "|" and ";" (e.g. "Image Types|.png;.gif;.jpg").
            |selected_accept_filter| is the 0-based index of the filter that will be
            selected by default. |callback| will be executed after the dialog is
            dismissed or immediately if another dialog is already pending. The dialog
            will be initiated asynchronously on the UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.StartDownload(System.String)">
            <summary>
            Download the file at |url| using CefDownloadHandler.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.DownloadImage(System.String,System.Boolean,System.UInt32,System.Boolean,Xilium.CefGlue.CefDownloadImageCallback)">
            <summary>
            Download |image_url| and execute |callback| on completion with the images
            received from the renderer. If |is_favicon| is true then cookies are not
            sent and not accepted during download. Images with density independent
            pixel (DIP) sizes larger than |max_image_size| are filtered out from the
            image results. Versions of the image at different scale factors may be
            downloaded up to the maximum scale factor supported by the system. If there
            are no image results &lt;= |max_image_size| then the smallest image is resized
            to |max_image_size| and is the only result. A |max_image_size| of 0 means
            unlimited. If |bypass_cache| is true then |image_url| is requested from the
            server even if it is present in the browser cache.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.Print">
            <summary>
            Print the current browser contents.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.PrintToPdf(System.String,Xilium.CefGlue.CefPdfPrintSettings,Xilium.CefGlue.CefPdfPrintCallback)">
            <summary>
            Print the current browser contents to the PDF file specified by |path| and
            execute |callback| on completion. The caller is responsible for deleting
            |path| when done. For PDF printing to work on Linux you must implement the
            CefPrintHandler::GetPdfPaperSize method.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.Find(System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Search for |searchText|. |identifier| must be a unique ID and these IDs
            must strictly increase so that newer requests always have greater IDs than
            older requests. If |identifier| is zero or less than the previous ID value
            then it will be automatically assigned a new valid ID. |forward| indicates
            whether to search forward or backward within the page. |matchCase|
            indicates whether the search should be case-sensitive. |findNext| indicates
            whether this is the first request or a follow-up. The CefFindHandler
            instance, if any, returned via CefClient::GetFindHandler will be called to
            report find results.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.StopFinding(System.Boolean)">
            <summary>
            Cancel all searches that are currently going on.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.ShowDevTools(Xilium.CefGlue.CefWindowInfo,Xilium.CefGlue.CefClient,Xilium.CefGlue.CefBrowserSettings,Xilium.CefGlue.CefPoint)">
            <summary>
            Open developer tools (DevTools) in its own browser. The DevTools browser
            will remain associated with this browser. If the DevTools browser is
            already open then it will be focused, in which case the |windowInfo|,
            |client| and |settings| parameters will be ignored. If |inspect_element_at|
            is non-empty then the element at the specified (x,y) location will be
            inspected. The |windowInfo| parameter will be ignored if this browser is
            wrapped in a CefBrowserView.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.CloseDevTools">
            <summary>
            Explicitly close the associated DevTools browser, if any.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserHost.HasDevTools">
            <summary>
            Returns true if this browser currently has an associated DevTools browser.
            Must be called on the browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.GetNavigationEntries(Xilium.CefGlue.CefNavigationEntryVisitor,System.Boolean)">
            <summary>
            Retrieve a snapshot of current navigation entries as values sent to the
            specified visitor. If |current_only| is true only the current navigation
            entry will be sent, otherwise all navigation entries will be sent.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.SetMouseCursorChangeDisabled(System.Boolean)">
            <summary>
            Set whether mouse cursor change is disabled.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserHost.IsMouseCursorChangeDisabled">
            <summary>
            Returns true if mouse cursor change is disabled.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.ReplaceMisspelling(System.String)">
            <summary>
            If a misspelled word is currently selected in an editable node calling
            this method will replace it with the specified |word|.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.AddWordToDictionary(System.String)">
            <summary>
            Add the specified |word| to the spelling dictionary.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserHost.IsWindowRenderingDisabled">
            <summary>
            Returns true if window rendering is disabled.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.WasResized">
            <summary>
            Notify the browser that the widget has been resized. The browser will first
            call CefRenderHandler::GetViewRect to get the new size and then call
            CefRenderHandler::OnPaint asynchronously with the updated regions. This
            method is only used when window rendering is disabled.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.WasHidden(System.Boolean)">
            <summary>
            Notify the browser that it has been hidden or shown. Layouting and
            CefRenderHandler::OnPaint notification will stop when the browser is
            hidden. This method is only used when window rendering is disabled.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.NotifyScreenInfoChanged">
            <summary>
            Send a notification to the browser that the screen info has changed. The
            browser will then call CefRenderHandler::GetScreenInfo to update the
            screen information with the new values. This simulates moving the webview
            window from one display to another, or changing the properties of the
            current display. This method is only used when window rendering is
            disabled.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.Invalidate(Xilium.CefGlue.CefPaintElementType)">
            <summary>
            Invalidate the view. The browser will call CefRenderHandler::OnPaint
            asynchronously. This method is only used when window rendering is
            disabled.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.SendExternalBeginFrame">
            <summary>
            Issue a BeginFrame request to Chromium.  Only valid when
            CefWindowInfo::external_begin_frame_enabled is set to true.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.SendKeyEvent(Xilium.CefGlue.CefKeyEvent)">
            <summary>
            Send a key event to the browser.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.SendMouseClickEvent(Xilium.CefGlue.CefMouseEvent,Xilium.CefGlue.CefMouseButtonType,System.Boolean,System.Int32)">
            <summary>
            Send a mouse click event to the browser. The |x| and |y| coordinates are
            relative to the upper-left corner of the view.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.SendMouseMoveEvent(Xilium.CefGlue.CefMouseEvent,System.Boolean)">
            <summary>
            Send a mouse move event to the browser. The |x| and |y| coordinates are
            relative to the upper-left corner of the view.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.SendMouseWheelEvent(Xilium.CefGlue.CefMouseEvent,System.Int32,System.Int32)">
            <summary>
            Send a mouse wheel event to the browser. The |x| and |y| coordinates are
            relative to the upper-left corner of the view. The |deltaX| and |deltaY|
            values represent the movement delta in the X and Y directions respectively.
            In order to scroll inside select popups with window rendering disabled
            CefRenderHandler::GetScreenPoint should be implemented properly.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.SendTouchEvent(Xilium.CefGlue.CefTouchEvent)">
            <summary>
            Send a touch event to the browser for a windowless browser.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.SendFocusEvent(System.Boolean)">
            <summary>
            Send a focus event to the browser.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.SendCaptureLostEvent">
            <summary>
            Send a capture lost event to the browser.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.NotifyMoveOrResizeStarted">
            <summary>
            Notify the browser that the window hosting it is about to be moved or
            resized. This method is only used on Windows and Linux.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.GetWindowlessFrameRate">
            <summary>
            Returns the maximum rate in frames per second (fps) that CefRenderHandler::
            OnPaint will be called for a windowless browser. The actual fps may be
            lower if the browser cannot generate frames at the requested rate. The
            minimum value is 1 and the maximum value is 60 (default 30). This method
            can only be called on the UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.SetWindowlessFrameRate(System.Int32)">
            <summary>
            Set the maximum rate in frames per second (fps) that CefRenderHandler::
            OnPaint will be called for a windowless browser. The actual fps may be
            lower if the browser cannot generate frames at the requested rate. The
            minimum value is 1 and the maximum value is 60 (default 30). Can also be
            set at browser creation via CefBrowserSettings.windowless_frame_rate.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.ImeSetComposition(System.String,System.Int32,Xilium.CefGlue.CefCompositionUnderline,Xilium.CefGlue.CefRange,Xilium.CefGlue.CefRange)">
            <summary>
            Begins a new composition or updates the existing composition. Blink has a
            special node (a composition node) that allows the input method to change
            text without affecting other DOM nodes. |text| is the optional text that
            will be inserted into the composition node. |underlines| is an optional set
            of ranges that will be underlined in the resulting text.
            |replacement_range| is an optional range of the existing text that will be
            replaced. |selection_range| is an optional range of the resulting text that
            will be selected after insertion or replacement. The |replacement_range|
            value is only used on OS X.
            This method may be called multiple times as the composition changes. When
            the client is done making changes the composition should either be canceled
            or completed. To cancel the composition call ImeCancelComposition. To
            complete the composition call either ImeCommitText or
            ImeFinishComposingText. Completion is usually signaled when:
            A. The client receives a WM_IME_COMPOSITION message with a GCS_RESULTSTR
            flag (on Windows), or;
            B. The client receives a "commit" signal of GtkIMContext (on Linux), or;
            C. insertText of NSTextInput is called (on Mac).
            This method is only used when window rendering is disabled.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.ImeCommitText(System.String,Xilium.CefGlue.CefRange,System.Int32)">
            <summary>
            Completes the existing composition by optionally inserting the specified
            |text| into the composition node. |replacement_range| is an optional range
            of the existing text that will be replaced. |relative_cursor_pos| is where
            the cursor will be positioned relative to the current cursor position. See
            comments on ImeSetComposition for usage. The |replacement_range| and
            |relative_cursor_pos| values are only used on OS X.
            This method is only used when window rendering is disabled.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.ImeFinishComposingText(System.Boolean)">
            <summary>
            Completes the existing composition by applying the current composition node
            contents. If |keep_selection| is false the current selection, if any, will
            be discarded. See comments on ImeSetComposition for usage.
            This method is only used when window rendering is disabled.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.ImeCancelComposition">
            <summary>
            Cancels the existing composition and discards the composition node
            contents without applying them. See comments on ImeSetComposition for
            usage.
            This method is only used when window rendering is disabled.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.DragTargetDragEnter(Xilium.CefGlue.CefDragData,Xilium.CefGlue.CefMouseEvent,Xilium.CefGlue.CefDragOperationsMask)">
            <summary>
            Call this method when the user drags the mouse into the web view (before
            calling DragTargetDragOver/DragTargetLeave/DragTargetDrop).
            |drag_data| should not contain file contents as this type of data is not
            allowed to be dragged into the web view. File contents can be removed using
            CefDragData::ResetFileContents (for example, if |drag_data| comes from
            CefRenderHandler::StartDragging).
            This method is only used when window rendering is disabled.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.DragTargetDragOver(Xilium.CefGlue.CefMouseEvent,Xilium.CefGlue.CefDragOperationsMask)">
            <summary>
            Call this method each time the mouse is moved across the web view during
            a drag operation (after calling DragTargetDragEnter and before calling
            DragTargetDragLeave/DragTargetDrop).
            This method is only used when window rendering is disabled.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.DragTargetDragLeave">
            <summary>
            Call this method when the user drags the mouse out of the web view (after
            calling DragTargetDragEnter).
            This method is only used when window rendering is disabled.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.DragTargetDrop(Xilium.CefGlue.CefMouseEvent)">
            <summary>
            Call this method when the user completes the drag operation by dropping
            the object onto the web view (after calling DragTargetDragEnter).
            The object being dropped is |drag_data|, given as an argument to
            the previous DragTargetDragEnter call.
            This method is only used when window rendering is disabled.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.DragSourceEndedAt(System.Int32,System.Int32,Xilium.CefGlue.CefDragOperationsMask)">
            <summary>
            Call this method when the drag operation started by a
            CefRenderHandler::StartDragging call has ended either in a drop or
            by being cancelled. |x| and |y| are mouse coordinates relative to the
            upper-left corner of the view. If the web view is both the drag source
            and the drag target then all DragTarget* methods should be called before
            DragSource* mthods.
            This method is only used when window rendering is disabled.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.DragSourceSystemDragEnded">
            <summary>
            Call this method when the drag operation started by a
            CefRenderHandler::StartDragging call has completed. This method may be
            called immediately without first calling DragSourceEndedAt to cancel a
            drag operation. If the web view is both the drag source and the drag
            target then all DragTarget* methods should be called before DragSource*
            mthods.
            This method is only used when window rendering is disabled.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.GetVisibleNavigationEntry">
            <summary>
            Returns the current visible navigation entry for this browser. This method
            can only be called on the UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.SetAccessibilityState(Xilium.CefGlue.CefState)">
            <summary>
            Set accessibility state for all frames. |accessibility_state| may be
            default, enabled or disabled. If |accessibility_state| is STATE_DEFAULT
            then accessibility will be disabled by default and the state may be further
            controlled with the "force-renderer-accessibility" and
            "disable-renderer-accessibility" command-line switches. If
            |accessibility_state| is STATE_ENABLED then accessibility will be enabled.
            If |accessibility_state| is STATE_DISABLED then accessibility will be
            completely disabled.
            For windowed browsers accessibility will be enabled in Complete mode (which
            corresponds to kAccessibilityModeComplete in Chromium). In this mode all
            platform accessibility objects will be created and managed by Chromium's
            internal implementation. The client needs only to detect the screen reader
            and call this method appropriately. For example, on macOS the client can
            handle the @"AXEnhancedUserInterface" accessibility attribute to detect
            VoiceOver state changes and on Windows the client can handle WM_GETOBJECT
            with OBJID_CLIENT to detect accessibility readers.
            For windowless browsers accessibility will be enabled in TreeOnly mode
            (which corresponds to kAccessibilityModeWebContentsOnly in Chromium). In
            this mode renderer accessibility is enabled, the full tree is computed, and
            events are passed to CefAccessibiltyHandler, but platform accessibility
            objects are not created. The client may implement platform accessibility
            objects using CefAccessibiltyHandler callbacks if desired.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.SetAutoResizeEnabled(System.Boolean,Xilium.CefGlue.CefSize,Xilium.CefGlue.CefSize)">
            <summary>
            Enable notifications of auto resize via CefDisplayHandler::OnAutoResize.
            Notifications are disabled by default. |min_size| and |max_size| define the
            range of allowed sizes.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.GetExtension">
            <summary>
            Returns the extension hosted in this browser or NULL if no extension is
            hosted. See CefRequestContext::LoadExtension for details.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserHost.IsBackgroundHost">
            <summary>
            Returns true if this browser is hosting an extension background script.
            Background hosts do not have a window and are not displayable. See
            CefRequestContext::LoadExtension for details.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserHost.SetAudioMuted(System.Boolean)">
            <summary>
            Set whether the browser's audio is muted.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserHost.IsAudioMuted">
            <summary>
            Returns true if the browser's audio is muted.  This method can only be
            called on the UI thread.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefBrowserProcessHandler">
            <summary>
            Class used to implement browser process callbacks. The methods of this class
            will be called on the browser process main thread unless otherwise indicated.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserProcessHandler.OnContextInitialized">
            <summary>
            Called on the browser process UI thread immediately after the CEF context
            has been initialized.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserProcessHandler.OnBeforeChildProcessLaunch(Xilium.CefGlue.CefCommandLine)">
            <summary>
            Called before a child process is launched. Will be called on the browser
            process UI thread when launching a render process and on the browser
            process IO thread when launching a GPU or plugin process. Provides an
            opportunity to modify the child process command line. Do not keep a
            reference to |command_line| outside of this method.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserProcessHandler.OnRenderProcessThreadCreated(Xilium.CefGlue.CefListValue)">
            <summary>
            Called on the browser process IO thread after the main thread has been
            created for a new render process. Provides an opportunity to specify extra
            information that will be passed to
            CefRenderProcessHandler::OnRenderThreadCreated() in the render process. Do
            not keep a reference to |extra_info| outside of this method.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserProcessHandler.GetPrintHandler">
            <summary>
            Return the handler for printing on Linux. If a print handler is not
            provided then printing will not be supported on the Linux platform.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefBrowserProcessHandler.OnScheduleMessagePumpWork(System.Int64)">
            <summary>
            Called from any thread when work has been scheduled for the browser process
            main (UI) thread. This callback is used in combination with CefSettings.
            external_message_pump and CefDoMessageLoopWork() in cases where the CEF
            message loop must be integrated into an existing application message loop
            (see additional comments and warnings on CefDoMessageLoopWork). This
            callback should schedule a CefDoMessageLoopWork() call to happen on the
            main (UI) thread. |delay_ms| is the requested delay in milliseconds. If
            |delay_ms| is &lt;= 0 then the call should happen reasonably soon. If
            |delay_ms| is &gt; 0 then the call should be scheduled to happen after the
            specified delay and any currently pending scheduled call should be
            cancelled.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefCallback">
            <summary>
            Generic callback interface used for asynchronous continuation.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCallback.Continue">
            <summary>
            Continue processing.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCallback.Cancel">
            <summary>
            Cancel processing.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefClient.GetContextMenuHandler">
            <summary>
            Return the handler for context menus. If no handler is provided the default
            implementation will be used.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefClient.GetDialogHandler">
            <summary>
            Return the handler for dialogs. If no handler is provided the default
            implementation will be used.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefClient.GetDisplayHandler">
            <summary>
            Return the handler for browser display state events.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefClient.GetDownloadHandler">
            <summary>
            Return the handler for download events. If no handler is returned downloads
            will not be allowed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefClient.GetDragHandler">
            <summary>
            Return the handler for drag events.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefClient.GetFindHandler">
            <summary>
            Return the handler for find result events.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefClient.GetFocusHandler">
            <summary>
            Return the handler for focus events.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefClient.GetJSDialogHandler">
            <summary>
            Return the handler for JavaScript dialogs. If no handler is provided the
            default implementation will be used.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefClient.GetKeyboardHandler">
            <summary>
            Return the handler for keyboard events.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefClient.GetLifeSpanHandler">
            <summary>
            Return the handler for browser life span events.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefClient.GetLoadHandler">
            <summary>
            Return the handler for browser load status events.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefClient.GetRenderHandler">
            <summary>
            Return the handler for off-screen rendering events.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefClient.GetRequestHandler">
            <summary>
            Return the handler for browser request events.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefClient.OnProcessMessageReceived(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefProcessId,Xilium.CefGlue.CefProcessMessage)">
            <summary>
            Called when a new message is received from a different process. Return true
            if the message was handled or false otherwise. Do not keep a reference to
            or attempt to access the message outside of this callback.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefCommandLine">
            <summary>
            Class used to create and/or parse command line arguments. Arguments with
            '--', '-' and, on Windows, '/' prefixes are considered switches. Switches
            will always precede any arguments without switch prefixes. Switches can
            optionally have a value specified using the '=' delimiter (e.g.
            "-switch=value"). An argument of "--" will terminate switch parsing with all
            subsequent tokens, regardless of prefix, being interpreted as non-switch
            arguments. Switch names are considered case-insensitive. This class can be
            used before CefInitialize() is called.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCommandLine.Create">
            <summary>
            Create a new CefCommandLine instance.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefCommandLine.Global">
            <summary>
            Returns the singleton global CefCommandLine object. The returned object
            will be read-only.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefCommandLine.IsValid">
            <summary>
            Returns true if this object is valid. Do not call any other methods if this
            function returns false.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefCommandLine.IsReadOnly">
            <summary>
            Returns true if the values of this object are read-only. Some APIs may
            expose read-only objects.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCommandLine.Copy">
            <summary>
            Returns a writable copy of this object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCommandLine.Reset">
            <summary>
            Reset the command-line switches and arguments but leave the program
            component unchanged.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCommandLine.GetArgv">
            <summary>
            Retrieve the original command line string as a vector of strings.
            The argv array: { program, [(--|-|/)switch[=value]]*, [--], [argument]* }
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCommandLine.ToString">
            <summary>
            Constructs and returns the represented command line string. Use this method
            cautiously because quoting behavior is unclear.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCommandLine.GetProgram">
            <summary>
            Get the program part of the command line string (the first item).
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCommandLine.SetProgram(System.String)">
            <summary>
            Set the program part of the command line string (the first item).
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefCommandLine.HasSwitches">
            <summary>
            Returns true if the command line has switches.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCommandLine.HasSwitch(System.String)">
            <summary>
            Returns true if the command line contains the given switch.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCommandLine.GetSwitchValue(System.String)">
            <summary>
            Returns the value associated with the given switch. If the switch has no
            value or isn't present this method returns the empty string.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCommandLine.GetSwitches">
            <summary>
            Returns the map of switch names and values. If a switch has no value an
            empty string is returned.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCommandLine.AppendSwitch(System.String)">
            <summary>
            Add a switch to the end of the command line. If the switch has no value
            pass an empty value string.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCommandLine.AppendSwitch(System.String,System.String)">
            <summary>
            Add a switch with the specified value to the end of the command line.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefCommandLine.HasArguments">
            <summary>
            True if there are remaining command line arguments.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCommandLine.GetArguments">
            <summary>
            Get the remaining command line arguments.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCommandLine.AppendArgument(System.String)">
            <summary>
            Add an argument to the end of the command line.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCommandLine.PrependWrapper(System.String)">
            <summary>
            Insert a command before the current command.
            Common for debuggers, like "valgrind" or "gdb --args".
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCommandLine.PrependArgument(System.String)">
            <summary>
            Insert an argument to the beginning of the command line.
            Unlike PrependWrapper this method doesn't strip argument by spaces.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefCompletionCallback">
            <summary>
            Generic callback interface used for asynchronous completion.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCompletionCallback.OnComplete">
            <summary>
            Method that will be called once the task is complete.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefContextMenuHandler">
            <summary>
            Implement this interface to handle context menu events. The methods of this
            class will be called on the UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefContextMenuHandler.OnBeforeContextMenu(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefContextMenuParams,Xilium.CefGlue.CefMenuModel)">
            <summary>
            Called before a context menu is displayed. |params| provides information
            about the context menu state. |model| initially contains the default
            context menu. The |model| can be cleared to show no context menu or
            modified to show a custom menu. Do not keep references to |params| or
            |model| outside of this callback.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefContextMenuHandler.RunContextMenu(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefContextMenuParams,Xilium.CefGlue.CefMenuModel,Xilium.CefGlue.CefRunContextMenuCallback)">
            <summary>
            Called to allow custom display of the context menu. |params| provides
            information about the context menu state. |model| contains the context menu
            model resulting from OnBeforeContextMenu. For custom display return true
            and execute |callback| either synchronously or asynchronously with the
            selected command ID. For default display return false. Do not keep
            references to |params| or |model| outside of this callback.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefContextMenuHandler.OnContextMenuCommand(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefContextMenuParams,System.Int32,Xilium.CefGlue.CefEventFlags)">
            <summary>
            Called to execute a command selected from the context menu. Return true if
            the command was handled or false for the default implementation. See
            cef_menu_id_t for the command ids that have default implementations. All
            user-defined command ids should be between MENU_ID_USER_FIRST and
            MENU_ID_USER_LAST. |params| will have the same values as what was passed to
            OnBeforeContextMenu(). Do not keep a reference to |params| outside of this
            callback.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefContextMenuHandler.OnContextMenuDismissed(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame)">
            <summary>
            Called when the context menu is dismissed irregardless of whether the menu
            was empty or a command was selected.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefContextMenuParams">
            <summary>
            Provides information about the context menu state. The ethods of this class
            can only be accessed on browser process the UI thread.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefContextMenuParams.X">
            <summary>
            Returns the X coordinate of the mouse where the context menu was invoked.
            Coords are relative to the associated RenderView's origin.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefContextMenuParams.Y">
            <summary>
            Returns the Y coordinate of the mouse where the context menu was invoked.
            Coords are relative to the associated RenderView's origin.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefContextMenuParams.ContextMenuType">
            <summary>
            Returns flags representing the type of node that the context menu was
            invoked on.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefContextMenuParams.LinkUrl">
            <summary>
            Returns the URL of the link, if any, that encloses the node that the
            context menu was invoked on.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefContextMenuParams.UnfilteredLinkUrl">
            <summary>
            Returns the link URL, if any, to be used ONLY for "copy link address". We
            don't validate this field in the frontend process.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefContextMenuParams.SourceUrl">
            <summary>
            Returns the source URL, if any, for the element that the context menu was
            invoked on. Example of elements with source URLs are img, audio, and video.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefContextMenuParams.HasImageContents">
            <summary>
            Returns true if the context menu was invoked on an image which has
            non-empty contents.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefContextMenuParams.TitleText">
            <summary>
            Returns the title text or the alt text if the context menu was invoked on
            an image.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefContextMenuParams.PageUrl">
            <summary>
            Returns the URL of the top level page that the context menu was invoked on.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefContextMenuParams.FrameUrl">
            <summary>
            Returns the URL of the subframe that the context menu was invoked on.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefContextMenuParams.FrameCharset">
            <summary>
            Returns the character encoding of the subframe that the context menu was
            invoked on.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefContextMenuParams.MediaType">
            <summary>
            Returns the type of context node that the context menu was invoked on.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefContextMenuParams.MediaState">
            <summary>
            Returns flags representing the actions supported by the media element, if
            any, that the context menu was invoked on.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefContextMenuParams.SelectionText">
            <summary>
            Returns the text of the selection, if any, that the context menu was
            invoked on.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefContextMenuParams.GetMisspelledWord">
            <summary>
            Returns the text of the misspelled word, if any, that the context menu was
            invoked on.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefContextMenuParams.GetDictionarySuggestions">
            <summary>
            Returns true if suggestions exist, false otherwise. Fills in |suggestions|
            from the spell check service for the misspelled word if there is one.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefContextMenuParams.IsEditable">
            <summary>
            Returns true if the context menu was invoked on an editable node.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefContextMenuParams.IsSpellCheckEnabled">
            <summary>
            Returns true if the context menu was invoked on an editable node where
            spell-check is enabled.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefContextMenuParams.EditState">
            <summary>
            Returns flags representing the actions supported by the editable node, if
            any, that the context menu was invoked on.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefContextMenuParams.IsCustomMenu">
            <summary>
            Returns true if the context menu contains items specified by the renderer
            process (for example, plugin placeholder or pepper plugin menu items).
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefContextMenuParams.IsPepperMenu">
            <summary>
            Returns true if the context menu was invoked from a pepper plugin.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefCookieAccessFilter">
            <summary>
            Implement this interface to filter cookies that may be sent or received from
            resource requests. The methods of this class will be called on the IO thread
            unless otherwise indicated.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCookieAccessFilter.CanSendCookie(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefRequest,Xilium.CefGlue.CefCookie)">
            <summary>
            Called on the IO thread before a resource request is sent. The |browser|
            and |frame| values represent the source of the request, and may be NULL for
            requests originating from service workers or CefURLRequest. |request|
            cannot be modified in this callback. Return true if the specified cookie
            can be sent with the request or false otherwise.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCookieAccessFilter.CanSaveCookie(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefRequest,Xilium.CefGlue.CefResponse,Xilium.CefGlue.CefCookie)">
            <summary>
            Called on the IO thread after a resource response is received. The
            |browser| and |frame| values represent the source of the request, and may
            be NULL for requests originating from service workers or CefURLRequest.
            |request| cannot be modified in this callback. Return true if the specified
            cookie returned with the response can be saved or false otherwise.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefCookieManager">
            <summary>
            Class used for managing cookies. The methods of this class may be called on
            any thread unless otherwise indicated.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCookieManager.GetGlobal(Xilium.CefGlue.CefCompletionCallback)">
            <summary>
            Returns the global cookie manager. By default data will be stored at
            CefSettings.cache_path if specified or in memory otherwise. If |callback|
            is non-NULL it will be executed asnychronously on the UI thread after the
            manager's storage has been initialized. Using this method is equivalent to
            calling CefRequestContext::GetGlobalContext()->GetDefaultCookieManager().
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCookieManager.SetSupportedSchemes(System.String[],System.Boolean,Xilium.CefGlue.CefCompletionCallback)">
            <summary>
            Set the schemes supported by this manager. If |include_defaults| is true
            the default schemes ("http", "https", "ws" and "wss") will also be
            supported. Calling this method with an empty |schemes| value and
            |include_defaults| set to false will disable all loading and saving of
            cookies for this manager. If |callback| is non-NULL it will be executed
            asnychronously on the UI thread after the change has been applied. Must be
            called before any cookies are accessed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCookieManager.VisitAllCookies(Xilium.CefGlue.CefCookieVisitor)">
            <summary>
            Visit all cookies on the UI thread. The returned cookies are ordered by
            longest path, then by earliest creation date. Returns false if cookies
            cannot be accessed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCookieManager.VisitUrlCookies(System.String,System.Boolean,Xilium.CefGlue.CefCookieVisitor)">
            <summary>
            Visit a subset of cookies on the UI thread. The results are filtered by the
            given url scheme, host, domain and path. If |includeHttpOnly| is true
            HTTP-only cookies will also be included in the results. The returned
            cookies are ordered by longest path, then by earliest creation date.
            Returns false if cookies cannot be accessed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCookieManager.SetCookie(System.String,Xilium.CefGlue.CefCookie,Xilium.CefGlue.CefSetCookieCallback)">
            <summary>
            Sets a cookie given a valid URL and explicit user-provided cookie
            attributes. This function expects each attribute to be well-formed. It will
            check for disallowed characters (e.g. the ';' character is disallowed
            within the cookie value attribute) and fail without setting the cookie if
            such characters are found. If |callback| is non-NULL it will be executed
            asnychronously on the UI thread after the cookie has been set. Returns
            false if an invalid URL is specified or if cookies cannot be accessed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCookieManager.DeleteCookies(System.String,System.String,Xilium.CefGlue.CefDeleteCookiesCallback)">
            <summary>
            Delete all cookies that match the specified parameters. If both |url| and
            |cookie_name| values are specified all host and domain cookies matching
            both will be deleted. If only |url| is specified all host cookies (but not
            domain cookies) irrespective of path will be deleted. If |url| is empty all
            cookies for all hosts and domains will be deleted. If |callback| is
            non-NULL it will be executed asnychronously on the UI thread after the
            cookies have been deleted. Returns false if a non-empty invalid URL is
            specified or if cookies cannot be accessed. Cookies can alternately be
            deleted using the Visit*Cookies() methods.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCookieManager.FlushStore(Xilium.CefGlue.CefCompletionCallback)">
            <summary>
            Flush the backing store (if any) to disk. If |callback| is non-NULL it will
            be executed asnychronously on the UI thread after the flush is complete.
            Returns false if cookies cannot be accessed.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefCookieVisitor">
            <summary>
            Interface to implement for visiting cookie values. The methods of this class
            will always be called on the UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefCookieVisitor.Visit(Xilium.CefGlue.CefCookie,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Method that will be called once for each cookie. |count| is the 0-based
            index for the current cookie. |total| is the total number of cookies.
            Set |deleteCookie| to true to delete the cookie currently being visited.
            Return false to stop visiting cookies. This method may never be called if
            no cookies are found.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefDeleteCookiesCallback">
            <summary>
            Interface to implement to be notified of asynchronous completion via
            CefCookieManager::DeleteCookies().
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDeleteCookiesCallback.OnComplete(System.Int32)">
            <summary>
            Method that will be called upon completion. |num_deleted| will be the
            number of cookies that were deleted.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefDialogHandler">
            <summary>
            Implement this interface to handle dialog events. The methods of this class
            will be called on the browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDialogHandler.OnFileDialog(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFileDialogMode,System.String,System.String,System.String[],System.Int32,Xilium.CefGlue.CefFileDialogCallback)">
            <summary>
            Called to run a file chooser dialog. |mode| represents the type of dialog
            to display. |title| to the title to be used for the dialog and may be empty
            to show the default title ("Open" or "Save" depending on the mode).
            |default_file_path| is the path with optional directory and/or file name
            component that should be initially selected in the dialog. |accept_filters|
            are used to restrict the selectable file types and may any combination of
            (a) valid lower-cased MIME types (e.g. "text/*" or "image/*"),
            (b) individual file extensions (e.g. ".txt" or ".png"), or (c) combined
            description and file extension delimited using "|" and ";" (e.g.
            "Image Types|.png;.gif;.jpg"). |selected_accept_filter| is the 0-based
            index of the filter that should be selected by default. To display a custom
            dialog return true and execute |callback| either inline or at a later time.
            To display the default dialog return false.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefDictionaryValue">
            <summary>
            Class representing a dictionary value. Can be used on any process and thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.Create">
            <summary>
            Creates a new object that is not owned by any other object.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDictionaryValue.IsValid">
            <summary>
            Returns true if this object is valid. This object may become invalid if
            the underlying data is owned by another object (e.g. list or dictionary)
            and that other object is then modified or destroyed. Do not call any other
            methods if this method returns false.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDictionaryValue.IsOwned">
            <summary>
            Returns true if this object is currently owned by another object.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDictionaryValue.IsReadOnly">
            <summary>
            Returns true if the values of this object are read-only. Some APIs may
            expose read-only objects.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.IsSame(Xilium.CefGlue.CefDictionaryValue)">
            <summary>
            Returns true if this object and |that| object have the same underlying
            data. If true modifications to this object will also affect |that| object
            and vice-versa.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.IsEqual(Xilium.CefGlue.CefDictionaryValue)">
            <summary>
            Returns true if this object and |that| object have an equivalent underlying
            value but are not necessarily the same object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.Copy(System.Boolean)">
            <summary>
            Returns a writable copy of this object. If |exclude_empty_children| is true
            any empty dictionaries or lists will be excluded from the copy.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDictionaryValue.Count">
            <summary>
            Returns the number of values.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.Clear">
            <summary>
            Removes all values. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.HasKey(System.String)">
            <summary>
            Returns true if the current dictionary has a value for the given key.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.GetKeys">
            <summary>
            Reads all keys for this dictionary into the specified vector.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.Remove(System.String)">
            <summary>
            Removes the value at the specified key. Returns true is the value was
            removed successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.GetValueType(System.String)">
            <summary>
            Returns the value type for the specified key.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.GetValue(System.String)">
            <summary>
            Returns the value at the specified key. For simple types the returned
            value will copy existing data and modifications to the value will not
            modify this object. For complex types (binary, dictionary and list) the
            returned value will reference existing data and modifications to the value
            will modify this object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.GetBool(System.String)">
            <summary>
            Returns the value at the specified key as type bool.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.GetInt(System.String)">
            <summary>
            Returns the value at the specified key as type int.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.GetDouble(System.String)">
            <summary>
            Returns the value at the specified key as type double.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.GetString(System.String)">
            <summary>
            Returns the value at the specified key as type string.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.GetBinary(System.String)">
            <summary>
            Returns the value at the specified key as type binary. The returned
            value will reference existing data.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.GetDictionary(System.String)">
            <summary>
            Returns the value at the specified key as type dictionary. The returned
            value will reference existing data and modifications to the value will
            modify this object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.GetList(System.String)">
            <summary>
            Returns the value at the specified key as type list. The returned value
            will reference existing data and modifications to the value will modify
            this object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.SetValue(System.String,Xilium.CefGlue.CefValue)">
            <summary>
            Sets the value at the specified key. Returns true if the value was set
            successfully. If |value| represents simple data then the underlying data
            will be copied and modifications to |value| will not modify this object. If
            |value| represents complex data (binary, dictionary or list) then the
            underlying data will be referenced and modifications to |value| will modify
            this object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.SetNull(System.String)">
            <summary>
            Sets the value at the specified key as type null. Returns true if the
            value was set successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.SetBool(System.String,System.Boolean)">
            <summary>
            Sets the value at the specified key as type bool. Returns true if the
            value was set successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.SetInt(System.String,System.Int32)">
            <summary>
            Sets the value at the specified key as type int. Returns true if the
            value was set successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.SetDouble(System.String,System.Double)">
            <summary>
            Sets the value at the specified key as type double. Returns true if the
            value was set successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.SetString(System.String,System.String)">
            <summary>
            Sets the value at the specified key as type string. Returns true if the
            value was set successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.SetBinary(System.String,Xilium.CefGlue.CefBinaryValue)">
            <summary>
            Sets the value at the specified key as type binary. Returns true if the
            value was set successfully. If |value| is currently owned by another object
            then the value will be copied and the |value| reference will not change.
            Otherwise, ownership will be transferred to this object and the |value|
            reference will be invalidated.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.SetDictionary(System.String,Xilium.CefGlue.CefDictionaryValue)">
            <summary>
            Sets the value at the specified key as type dict. Returns true if the
            value was set successfully. If |value| is currently owned by another object
            then the value will be copied and the |value| reference will not change.
            Otherwise, ownership will be transferred to this object and the |value|
            reference will be invalidated.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDictionaryValue.SetList(System.String,Xilium.CefGlue.CefListValue)">
            <summary>
            Sets the value at the specified key as type list. Returns true if the
            value was set successfully. If |value| is currently owned by another object
            then the value will be copied and the |value| reference will not change.
            Otherwise, ownership will be transferred to this object and the |value|
            reference will be invalidated.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefDisplayHandler">
            <summary>
            Implement this interface to handle events related to browser display state.
            The methods of this class will be called on the UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDisplayHandler.OnAddressChange(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,System.String)">
            <summary>
            Called when a frame's address has changed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDisplayHandler.OnTitleChange(Xilium.CefGlue.CefBrowser,System.String)">
            <summary>
            Called when the page title changes.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDisplayHandler.OnFaviconUrlChange(Xilium.CefGlue.CefBrowser,System.String[])">
            <summary>
            Called when the page icon changes.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDisplayHandler.OnFullscreenModeChange(Xilium.CefGlue.CefBrowser,System.Boolean)">
            <summary>
            Called when web content in the page has toggled fullscreen mode. If
            |fullscreen| is true the content will automatically be sized to fill the
            browser content area. If |fullscreen| is false the content will
            automatically return to its original size and position. The client is
            responsible for resizing the browser if desired.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDisplayHandler.OnTooltip(Xilium.CefGlue.CefBrowser,System.String)">
            <summary>
            Called when the browser is about to display a tooltip. |text| contains the
            text that will be displayed in the tooltip. To handle the display of the
            tooltip yourself return true. Otherwise, you can optionally modify |text|
            and then return false to allow the browser to display the tooltip.
            When window rendering is disabled the application is responsible for
            drawing tooltips and the return value is ignored.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDisplayHandler.OnStatusMessage(Xilium.CefGlue.CefBrowser,System.String)">
            <summary>
            Called when the browser receives a status message. |value| contains the
            text that will be displayed in the status message.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDisplayHandler.OnConsoleMessage(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefLogSeverity,System.String,System.String,System.Int32)">
            <summary>
            Called to display a console message. Return true to stop the message from
            being output to the console.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDisplayHandler.OnAutoResize(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefSize@)">
            <summary>
            Called when auto-resize is enabled via CefBrowserHost::SetAutoResizeEnabled
            and the contents have auto-resized. |new_size| will be the desired size in
            view coordinates. Return true if the resize was handled or false for
            default handling.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDisplayHandler.OnLoadingProgressChange(Xilium.CefGlue.CefBrowser,System.Double)">
            <summary>
            Called when the overall page loading progress has changed. |progress|
            ranges from 0.0 to 1.0.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefDomDocument">
            <summary>
            Class used to represent a DOM document. The methods of this class should only
            be called on the render process main thread thread.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomDocument.DocumentType">
            <summary>
            Returns the document type.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomDocument.Root">
            <summary>
            Returns the root document node.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomDocument.Body">
            <summary>
            Returns the BODY node of an HTML document.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomDocument.Head">
            <summary>
            Returns the HEAD node of an HTML document.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomDocument.Title">
            <summary>
            Returns the title of an HTML document.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDomDocument.GetElementById(System.String)">
            <summary>
            Returns the document element with the specified ID value.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomDocument.FocusedNode">
            <summary>
            Returns the node that currently has keyboard focus.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomDocument.HasSelection">
            <summary>
            Returns true if a portion of the document is selected.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomDocument.SelectionStartOffset">
            <summary>
            Returns the selection offset within the start node.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomDocument.GetSelectionEndOffset">
            <summary>
            Returns the selection offset within the end node.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomDocument.SelectionAsMarkup">
            <summary>
            Returns the contents of this selection as markup.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomDocument.GetSelectionAsText">
            <summary>
            Returns the contents of this selection as text.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomDocument.BaseUrl">
            <summary>
            Returns the base URL for the document.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDomDocument.GetCompleteUrl(System.String)">
            <summary>
            Returns a complete URL based on the document base URL and the specified
            partial URL.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefDomNode">
            <summary>
            Class used to represent a DOM node. The methods of this class should only be
            called on the render process main thread.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomNode.NodeType">
            <summary>
            Returns the type for this node.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomNode.IsText">
            <summary>
            Returns true if this is a text node.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomNode.IsElement">
            <summary>
            Returns true if this is an element node.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomNode.IsEditable">
            <summary>
            Returns true if this is an editable node.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomNode.IsFormControlElement">
            <summary>
            Returns true if this is a form control element node.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomNode.FormControlElementType">
            <summary>
            Returns the type of this form control element node.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDomNode.IsSame(Xilium.CefGlue.CefDomNode)">
            <summary>
            Returns true if this object is pointing to the same handle as |that|
            object.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomNode.Name">
            <summary>
            Returns the name of this node.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomNode.Value">
            <summary>
            Returns the value of this node.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDomNode.SetValue(System.String)">
            <summary>
            Set the value of this node. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDomNode.GetAsMarkup">
            <summary>
            Returns the contents of this node as markup.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomNode.Document">
            <summary>
            Returns the document associated with this node.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomNode.Parent">
            <summary>
            Returns the parent node.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomNode.PreviousSibling">
            <summary>
            Returns the previous sibling node.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomNode.NextSibling">
            <summary>
            Returns the next sibling node.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomNode.HasChildren">
            <summary>
            Returns true if this node has child nodes.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomNode.FirstChild">
            <summary>
            Return the first child node.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomNode.LastChild">
            <summary>
            Returns the last child node.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomNode.ElementTagName">
            <summary>
            The following methods are valid only for element nodes.
            Returns the tag name of this element.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomNode.HasAttributes">
            <summary>
            Returns true if this element has attributes.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDomNode.HasAttribute(System.String)">
            <summary>
            Returns true if this element has an attribute named |attrName|.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDomNode.GetAttribute(System.String)">
            <summary>
            Returns the element attribute named |attrName|.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDomNode.GetAttributes">
            <summary>
            Returns a map of all element attributes.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDomNode.SetAttribute(System.String,System.String)">
            <summary>
            Set the value for the element attribute named |attrName|. Returns true on
            success.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDomNode.InnerText">
            <summary>
            Returns the inner text of the element.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDomNode.GetElementBounds">
            <summary>
            Returns the bounds of the element.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefDomVisitor">
            <summary>
            Interface to implement for visiting the DOM. The methods of this class will
            be called on the render process main thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDomVisitor.Visit(Xilium.CefGlue.CefDomDocument)">
            <summary>
            Method executed for visiting the DOM. The document object passed to this
            method represents a snapshot of the DOM at the time this method is
            executed. DOM objects are only valid for the scope of this method. Do not
            keep references to or attempt to access any DOM objects outside the scope
            of this method.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefDownloadHandler">
            <summary>
            Class used to handle file downloads. The methods of this class will called
            on the browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDownloadHandler.OnBeforeDownload(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefDownloadItem,System.String,Xilium.CefGlue.CefBeforeDownloadCallback)">
            <summary>
            Called before a download begins. |suggested_name| is the suggested name for
            the download file. By default the download will be canceled. Execute
            |callback| either asynchronously or in this method to continue the download
            if desired. Do not keep a reference to |download_item| outside of this
            method.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDownloadHandler.OnDownloadUpdated(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefDownloadItem,Xilium.CefGlue.CefDownloadItemCallback)">
            <summary>
            Called when a download's status or progress information has been updated.
            This may be called multiple times before and after OnBeforeDownload().
            Execute |callback| either asynchronously or in this method to cancel the
            download if desired. Do not keep a reference to |download_item| outside of
            this method.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefDownloadImageCallback">
            <summary>
            Callback interface for CefBrowserHost::DownloadImage. The methods of this
            class will be called on the browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDownloadImageCallback.OnDownloadImageFinished(System.String,System.Int32,Xilium.CefGlue.CefImage)">
            <summary>
            Method that will be executed when the image download has completed.
            |image_url| is the URL that was downloaded and |http_status_code| is the
            resulting HTTP status code. |image| is the resulting image, possibly at
            multiple scale factors, or empty if the download failed.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefDownloadItem">
            <summary>
            Class used to represent a download item.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDownloadItem.IsValid">
            <summary>
            Returns true if this object is valid. Do not call any other methods if this
            function returns false.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDownloadItem.IsInProgress">
            <summary>
            Returns true if the download is in progress.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDownloadItem.IsComplete">
            <summary>
            Returns true if the download is complete.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDownloadItem.IsCanceled">
            <summary>
            Returns true if the download has been canceled or interrupted.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDownloadItem.CurrentSpeed">
            <summary>
            Returns a simple speed estimate in bytes/s.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDownloadItem.PercentComplete">
            <summary>
            Returns the rough percent complete or -1 if the receive total size is
            unknown.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDownloadItem.TotalBytes">
            <summary>
            Returns the total number of bytes.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDownloadItem.ReceivedBytes">
            <summary>
            Returns the number of received bytes.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDownloadItem.StartTime">
            <summary>
            Returns the time that the download started.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDownloadItem.EndTime">
            <summary>
            Returns the time that the download ended.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDownloadItem.FullPath">
            <summary>
            Returns the full path to the downloaded or downloading file.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDownloadItem.Id">
            <summary>
            Returns the unique identifier for this download.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDownloadItem.Url">
            <summary>
            Returns the URL.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDownloadItem.OriginalUrl">
            <summary>
            Returns the original URL before any redirections.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDownloadItem.SuggestedFileName">
            <summary>
            Returns the suggested file name.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDownloadItem.ContentDisposition">
            <summary>
            Returns the content disposition.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDownloadItem.MimeType">
            <summary>
            Returns the mime type.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefDownloadItemCallback">
            <summary>
            Callback interface used to asynchronously cancel a download.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDownloadItemCallback.Cancel">
            <summary>
            Call to cancel the download.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDownloadItemCallback.Pause">
            <summary>
            Call to pause the download.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDownloadItemCallback.Resume">
            <summary>
            Call to resume the download.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefDragData">
            <summary>
            Class used to represent drag data. The methods of this class may be called
            on any thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDragData.Create">
            <summary>
            Create a new CefDragData object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDragData.Clone">
            <summary>
            Returns a copy of the current object.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDragData.IsReadOnly">
            <summary>
            Returns true if this object is read-only.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDragData.IsLink">
            <summary>
            Returns true if the drag data is a link.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDragData.IsFragment">
            <summary>
            Returns true if the drag data is a text or html fragment.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDragData.IsFile">
            <summary>
            Returns true if the drag data is a file.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDragData.LinkUrl">
            <summary>
            Return the link URL that is being dragged.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDragData.LinkTitle">
            <summary>
            Return the title associated with the link being dragged.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDragData.LinkMetadata">
            <summary>
            Return the metadata, if any, associated with the link being dragged.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDragData.FragmentText">
            <summary>
            Return the plain text fragment that is being dragged.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDragData.FragmentHtml">
            <summary>
            Return the text/html fragment that is being dragged.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDragData.FragmentBaseUrl">
            <summary>
            Return the base URL that the fragment came from. This value is used for
            resolving relative URLs and may be empty.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDragData.FileName">
            <summary>
            Return the name of the file being dragged out of the browser window.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDragData.GetFileContents(Xilium.CefGlue.CefStreamWriter)">
            <summary>
            Write the contents of the file being dragged out of the web view into
            |writer|. Returns the number of bytes sent to |writer|. If |writer| is
            NULL this method will return the size of the file contents in bytes.
            Call GetFileName() to get a suggested name for the file.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDragData.GetFileNames">
            <summary>
            Retrieve the list of file names that are being dragged into the browser
            window.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDragData.SetLinkURL(System.String)">
            <summary>
            Set the link URL that is being dragged.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDragData.SetLinkTitle(System.String)">
            <summary>
            Set the title associated with the link being dragged.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDragData.SetLinkMetadata(System.String)">
            <summary>
            Set the metadata associated with the link being dragged.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDragData.SetFragmentText(System.String)">
            <summary>
            Set the plain text fragment that is being dragged.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDragData.SetFragmentHtml(System.String)">
            <summary>
            Set the text/html fragment that is being dragged.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDragData.SetFragmentBaseURL(System.String)">
            <summary>
            Set the base URL that the fragment came from.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDragData.ResetFileContents">
            <summary>
            Reset the file contents. You should do this before calling
            CefBrowserHost::DragTargetDragEnter as the web view does not allow us to
            drag in this kind of data.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDragData.AddFile(System.String,System.String)">
            <summary>
            Add a file that is being dragged into the webview.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDragData.GetImage">
            <summary>
            Get the image representation of drag data. May return NULL if no image
            representation is available.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDragData.GetImageHotspot">
            <summary>
            Get the image hotspot (drag start location relative to image dimensions).
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefDragData.HasImage">
            <summary>
            Returns true if an image representation of drag data is available.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefDragHandler">
            <summary>
            Implement this interface to handle events related to dragging. The methods of
            this class will be called on the UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDragHandler.OnDragEnter(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefDragData,Xilium.CefGlue.CefDragOperationsMask)">
            <summary>
            Called when an external drag event enters the browser window. |dragData|
            contains the drag event data and |mask| represents the type of drag
            operation. Return false for default drag handling behavior or true to
            cancel the drag event.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefDragHandler.OnDraggableRegionsChanged(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefDraggableRegion[])">
            <summary>
            Called whenever draggable regions for the browser window change. These can
            be specified using the '-webkit-app-region: drag/no-drag' CSS-property. If
            draggable regions are never defined in a document this method will also
            never be called. If the last draggable region is removed from a document
            this method will be called with an empty vector.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefEndTracingCallback">
            <summary>
            Implement this interface to receive notification when tracing has completed.
            The methods of this class will be called on the browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefEndTracingCallback.OnEndTracingComplete(System.String)">
            <summary>
            Called after all processes have sent their trace data. |tracing_file| is
            the path at which tracing data was written. The client is responsible for
            deleting |tracing_file|.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefExtension">
            <summary>
            Object representing an extension. Methods may be called on any thread unless
            otherwise indicated.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefExtension.Identifier">
            <summary>
            Returns the unique extension identifier. This is calculated based on the
            extension public key, if available, or on the extension path. See
            https://developer.chrome.com/extensions/manifest/key for details.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefExtension.Path">
            <summary>
            Returns the absolute path to the extension directory on disk. This value
            will be prefixed with PK_DIR_RESOURCES if a relative path was passed to
            CefRequestContext::LoadExtension.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefExtension.GetManifest">
            <summary>
            Returns the extension manifest contents as a CefDictionaryValue object. See
            https://developer.chrome.com/extensions/manifest for details.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefExtension.IsSame(Xilium.CefGlue.CefExtension)">
            <summary>
            Returns true if this object is the same extension as |that| object.
            Extensions are considered the same if identifier, path and loader context
            match.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefExtension.GetHandler">
            <summary>
            Returns the handler for this extension. Will return NULL for internal
            extensions or if no handler was passed to CefRequestContext::LoadExtension.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefExtension.GetLoaderContext">
            <summary>
            Returns the request context that loaded this extension. Will return NULL
            for internal extensions or if the extension has been unloaded. See the
            CefRequestContext::LoadExtension documentation for more information about
            loader contexts. Must be called on the browser process UI thread.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefExtension.IsLoaded">
            <summary>
            Returns true if this extension is currently loaded. Must be called on the
            browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefExtension.Unload">
            <summary>
            Unload this extension if it is not an internal extension and is currently
            loaded. Will result in a call to CefExtensionHandler::OnExtensionUnloaded
            on success.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefExtensionHandler">
            <summary>
            Implement this interface to handle events related to browser extensions.
            The methods of this class will be called on the UI thread. See
            CefRequestContext::LoadExtension for information about extension loading.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefExtensionHandler.OnExtensionLoadFailed(Xilium.CefGlue.CefErrorCode)">
            <summary>
            Called if the CefRequestContext::LoadExtension request fails. |result| will
            be the error code.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefExtensionHandler.OnExtensionLoaded(Xilium.CefGlue.CefExtension)">
            <summary>
            Called if the CefRequestContext::LoadExtension request succeeds.
            |extension| is the loaded extension.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefExtensionHandler.OnExtensionUnloaded(Xilium.CefGlue.CefExtension)">
            <summary>
            Called after the CefExtension::Unload request has completed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefExtensionHandler.OnBeforeBackgroundBrowser(Xilium.CefGlue.CefExtension,System.String,Xilium.CefGlue.CefClient@,Xilium.CefGlue.CefBrowserSettings)">
            <summary>
            Called when an extension needs a browser to host a background script
            specified via the "background" manifest key. The browser will have no
            visible window and cannot be displayed. |extension| is the extension that
            is loading the background script. |url| is an internally generated
            reference to an HTML page that will be used to load the background script
            via a &lt;script&gt; src attribute. To allow creation of the browser optionally
            modify |client| and |settings| and return false. To cancel creation of the
            browser (and consequently cancel load of the background script) return
            true. Successful creation will be indicated by a call to
            CefLifeSpanHandler::OnAfterCreated, and CefBrowserHost::IsBackgroundHost
            will return true for the resulting browser. See
            https://developer.chrome.com/extensions/event_pages for more information
            about extension background script usage.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefExtensionHandler.OnBeforeBrowser(Xilium.CefGlue.CefExtension,Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefBrowser,System.Int32,System.String,System.Boolean,Xilium.CefGlue.CefWindowInfo,Xilium.CefGlue.CefClient@,Xilium.CefGlue.CefBrowserSettings)">
            <summary>
            Called when an extension API (e.g. chrome.tabs.create) requests creation of
            a new browser. |extension| and |browser| are the source of the API call.
            |active_browser| may optionally be specified via the windowId property or
            returned via the GetActiveBrowser() callback and provides the default
            |client| and |settings| values for the new browser. |index| is the position
            value optionally specified via the index property. |url| is the URL that
            will be loaded in the browser. |active| is true if the new browser should
            be active when opened.  To allow creation of the browser optionally modify
            |windowInfo|, |client| and |settings| and return false. To cancel creation
            of the browser return true. Successful creation will be indicated by a call
            to CefLifeSpanHandler::OnAfterCreated. Any modifications to |windowInfo|
            will be ignored if |active_browser| is wrapped in a CefBrowserView.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefExtensionHandler.GetActiveBrowser(Xilium.CefGlue.CefExtension,Xilium.CefGlue.CefBrowser,System.Boolean)">
            <summary>
            Called when no tabId is specified to an extension API call that accepts a
            tabId parameter (e.g. chrome.tabs.*). |extension| and |browser| are the
            source of the API call. Return the browser that will be acted on by the API
            call or return NULL to act on |browser|. The returned browser must share
            the same CefRequestContext as |browser|. Incognito browsers should not be
            considered unless the source extension has incognito access enabled, in
            which case |include_incognito| will be true.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefExtensionHandler.CanAccessBrowser(Xilium.CefGlue.CefExtension,Xilium.CefGlue.CefBrowser,System.Boolean,Xilium.CefGlue.CefBrowser)">
            <summary>
            Called when the tabId associated with |target_browser| is specified to an
            extension API call that accepts a tabId parameter (e.g. chrome.tabs.*).
            |extension| and |browser| are the source of the API call. Return true
            to allow access of false to deny access. Access to incognito browsers
            should not be allowed unless the source extension has incognito access
            enabled, in which case |include_incognito| will be true.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefExtensionHandler.GetExtensionResource(Xilium.CefGlue.CefExtension,Xilium.CefGlue.CefBrowser,System.String,Xilium.CefGlue.CefGetExtensionResourceCallback)">
            <summary>
            Called to retrieve an extension resource that would normally be loaded from
            disk (e.g. if a file parameter is specified to chrome.tabs.executeScript).
            |extension| and |browser| are the source of the resource request. |file| is
            the requested relative file path. To handle the resource request return
            true and execute |callback| either synchronously or asynchronously. For the
            default behavior which reads the resource from the extension directory on
            disk return false. Localization substitutions will not be applied to
            resources handled via this method.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefFileDialogCallback">
            <summary>
            Callback interface for asynchronous continuation of file dialog requests.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFileDialogCallback.Continue(System.Int32,System.String[])">
            <summary>
            Continue the file selection. |selected_accept_filter| should be the 0-based
            index of the value selected from the accept filters array passed to
            CefDialogHandler::OnFileDialog. |file_paths| should be a single value or a
            list of values depending on the dialog mode. An empty |file_paths| value is
            treated the same as calling Cancel().
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFileDialogCallback.Cancel">
            <summary>
            Cancel the file selection.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefFindHandler">
            <summary>
            Implement this interface to handle events related to find results. The
            methods of this class will be called on the UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFindHandler.OnFindResult(Xilium.CefGlue.CefBrowser,System.Int32,System.Int32,Xilium.CefGlue.CefRectangle,System.Int32,System.Boolean)">
            <summary>
            Called to report find results returned by CefBrowserHost::Find().
            |identifer| is the identifier passed to Find(), |count| is the number of
            matches currently identified, |selectionRect| is the location of where the
            match was found (in window coordinates), |activeMatchOrdinal| is the
            current position in the search results, and |finalUpdate| is true if this
            is the last find notification.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefFocusHandler">
            <summary>
            Implement this interface to handle events related to focus. The methods of
            this class will be called on the UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFocusHandler.OnTakeFocus(Xilium.CefGlue.CefBrowser,System.Boolean)">
            <summary>
            Called when the browser component is about to loose focus. For instance, if
            focus was on the last HTML element and the user pressed the TAB key. |next|
            will be true if the browser is giving focus to the next component and false
            if the browser is giving focus to the previous component.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFocusHandler.OnSetFocus(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFocusSource)">
            <summary>
            Called when the browser component is requesting focus. |source| indicates
            where the focus request is originating from. Return false to allow the
            focus to be set or true to cancel setting the focus.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFocusHandler.OnGotFocus(Xilium.CefGlue.CefBrowser)">
            <summary>
            Called when the browser component has received focus.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefFrame">
            <summary>
            Class used to represent a frame in the browser window. When used in the
            browser process the methods of this class may be called on any thread unless
            otherwise indicated in the comments. When used in the render process the
            methods of this class may only be called on the main thread.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefFrame.IsValid">
            <summary>
            True if this object is currently attached to a valid frame.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFrame.Undo">
            <summary>
            Execute undo in this frame.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFrame.Redo">
            <summary>
            Execute redo in this frame.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFrame.Cut">
            <summary>
            Execute cut in this frame.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFrame.Copy">
            <summary>
            Execute copy in this frame.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFrame.Paste">
            <summary>
            Execute paste in this frame.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFrame.Delete">
            <summary>
            Execute delete in this frame.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFrame.SelectAll">
            <summary>
            Execute select all in this frame.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFrame.ViewSource">
            <summary>
            Save this frame's HTML source to a temporary file and open it in the
            default text viewing application. This method can only be called from the
            browser process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFrame.GetSource(Xilium.CefGlue.CefStringVisitor)">
            <summary>
            Retrieve this frame's HTML source as a string sent to the specified
            visitor.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFrame.GetText(Xilium.CefGlue.CefStringVisitor)">
            <summary>
            Retrieve this frame's display text as a string sent to the specified
            visitor.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFrame.LoadRequest(Xilium.CefGlue.CefRequest)">
            <summary>
            Load the request represented by the |request| object.
            WARNING: This method will fail with "bad IPC message" reason
            INVALID_INITIATOR_ORIGIN (213) unless you first navigate to the
            request origin using some other mechanism (LoadURL, link click, etc).
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFrame.LoadUrl(System.String)">
            <summary>
            Load the specified |url|.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFrame.ExecuteJavaScript(System.String,System.String,System.Int32)">
            <summary>
            Execute a string of JavaScript code in this frame. The |script_url|
            parameter is the URL where the script in question can be found, if any.
            The renderer may request this URL to show the developer the source of the
            error.  The |start_line| parameter is the base line number to use for error
            reporting.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefFrame.IsMain">
            <summary>
            Returns true if this is the main (top-level) frame.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefFrame.IsFocused">
            <summary>
            Returns true if this is the focused frame.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefFrame.Name">
            <summary>
            Returns the name for this frame. If the frame has an assigned name (for
            example, set via the iframe "name" attribute) then that value will be
            returned. Otherwise a unique name will be constructed based on the frame
            parent hierarchy. The main (top-level) frame will always have an empty name
            value.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefFrame.Identifier">
            <summary>
            Returns the globally unique identifier for this frame or &lt; 0 if the
            underlying frame does not yet exist.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefFrame.Parent">
            <summary>
            Returns the parent of this frame or NULL if this is the main (top-level)
            frame.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefFrame.Url">
            <summary>
            Returns the URL currently loaded in this frame.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefFrame.Browser">
            <summary>
            Returns the browser that this frame belongs to.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefFrame.V8Context">
            <summary>
            Get the V8 context associated with the frame. This method can only be
            called from the render process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFrame.VisitDom(Xilium.CefGlue.CefDomVisitor)">
            <summary>
            Visit the DOM document. This method can only be called from the render
            process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFrame.CreateUrlRequest(Xilium.CefGlue.CefRequest,Xilium.CefGlue.CefUrlRequestClient)">
            <summary>
            Create a new URL request that will be treated as originating from this
            frame and the associated browser. This request may be intercepted by the
            client via CefResourceRequestHandler or CefSchemeHandlerFactory. Use
            CefURLRequest::Create instead if you do not want the request to have this
            association, in which case it may be handled differently (see documentation
            on that method). Requests may originate from both the browser process and
            the render process.
            For requests originating from the browser process:
            - POST data may only contain a single element of type PDE_TYPE_FILE or
            PDE_TYPE_BYTES.
            For requests originating from the render process:
            - POST data may only contain a single element of type PDE_TYPE_BYTES.
            - If the response contains Content-Disposition or Mime-Type header values
            that would not normally be rendered then the response may receive
            special handling inside the browser (for example, via the file download
            code path instead of the URL request code path).
            The |request| object will be marked as read-only after calling this method.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefFrame.SendProcessMessage(Xilium.CefGlue.CefProcessId,Xilium.CefGlue.CefProcessMessage)">
            <summary>
            Send a message to the specified |target_process|. Message delivery is not
            guaranteed in all cases (for example, if the browser is closing,
            navigating, or if the target process crashes). Send an ACK message back
            from the target process if confirmation is required.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefGetExtensionResourceCallback">
            <summary>
            Callback interface used for asynchronous continuation of
            CefExtensionHandler::GetExtensionResource.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefGetExtensionResourceCallback.Continue(Xilium.CefGlue.CefStreamReader)">
            <summary>
            Continue the request. Read the resource contents from |stream|.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefGetExtensionResourceCallback.Cancel">
            <summary>
            Cancel the request.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefImage">
            <summary>
            Container for a single image represented at different scale factors. All
            image representations should be the same size in density independent pixel
            (DIP) units. For example, if the image at scale factor 1.0 is 100x100 pixels
            then the image at scale factor 2.0 should be 200x200 pixels -- both images
            will display with a DIP size of 100x100 units. The methods of this class can
            be called on any browser process thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefImage.CreateImage">
            <summary>
            Create a new CefImage. It will initially be empty. Use the Add*() methods
            to add representations at different scale factors.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefImage.IsEmpty">
            <summary>
            Returns true if this Image is empty.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefImage.IsSame(Xilium.CefGlue.CefImage)">
            <summary>
            Returns true if this Image and |that| Image share the same underlying
            storage. Will also return true if both images are empty.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefImage.AddBitmap(System.Single,System.Int32,System.Int32,Xilium.CefGlue.CefColorType,Xilium.CefGlue.CefAlphaType,System.IntPtr,System.Int32)">
            <summary>
            Add a bitmap image representation for |scale_factor|. Only 32-bit RGBA/BGRA
            formats are supported. |pixel_width| and |pixel_height| are the bitmap
            representation size in pixel coordinates. |pixel_data| is the array of
            pixel data and should be |pixel_width| x |pixel_height| x 4 bytes in size.
            |color_type| and |alpha_type| values specify the pixel format.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefImage.AddPng(System.Single,System.IntPtr,System.Int32)">
            <summary>
            Add a PNG image representation for |scale_factor|. |png_data| is the image
            data of size |png_data_size|. Any alpha transparency in the PNG data will
            be maintained.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefImage.AddJpeg(System.Single,System.IntPtr,System.Int32)">
            <summary>
            Create a JPEG image representation for |scale_factor|. |jpeg_data| is the
            image data of size |jpeg_data_size|. The JPEG format does not support
            transparency so the alpha byte will be set to 0xFF for all pixels.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefImage.Width">
            <summary>
            Returns the image width in density independent pixel (DIP) units.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefImage.Height">
            <summary>
            Returns the image height in density independent pixel (DIP) units.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefImage.HasRepresentation(System.Single)">
            <summary>
            Returns true if this image contains a representation for |scale_factor|.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefImage.RemoveRepresentation(System.Single)">
            <summary>
            Removes the representation for |scale_factor|. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefImage.GetRepresentationInfo(System.Single,System.Single@,System.Int32@,System.Int32@)">
            <summary>
            Returns information for the representation that most closely matches
            |scale_factor|. |actual_scale_factor| is the actual scale factor for the
            representation. |pixel_width| and |pixel_height| are the representation
            size in pixel coordinates. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefImage.GetAsBitmap(System.Single,Xilium.CefGlue.CefColorType,Xilium.CefGlue.CefAlphaType,System.Int32@,System.Int32@)">
            <summary>
            Returns the bitmap representation that most closely matches |scale_factor|.
            Only 32-bit RGBA/BGRA formats are supported. |color_type| and |alpha_type|
            values specify the desired output pixel format. |pixel_width| and
            |pixel_height| are the output representation size in pixel coordinates.
            Returns a CefBinaryValue containing the pixel data on success or NULL on
            failure.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefImage.GetAsPng(System.Single,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Returns the PNG representation that most closely matches |scale_factor|. If
            |with_transparency| is true any alpha transparency in the image will be
            represented in the resulting PNG data. |pixel_width| and |pixel_height| are
            the output representation size in pixel coordinates. Returns a
            CefBinaryValue containing the PNG image data on success or NULL on failure.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefImage.GetAsJpeg(System.Single,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns the JPEG representation that most closely matches |scale_factor|.
            |quality| determines the compression level with 0 == lowest and 100 ==
            highest. The JPEG format does not support alpha transparency and the alpha
            channel, if any, will be discarded. |pixel_width| and |pixel_height| are
            the output representation size in pixel coordinates. Returns a
            CefBinaryValue containing the JPEG image data on success or NULL on
            failure.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefJSDialogCallback">
            <summary>
            Callback interface used for asynchronous continuation of JavaScript dialog
            requests.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefJSDialogCallback.Continue(System.Boolean,System.String)">
            <summary>
            Continue the JS dialog request. Set |success| to true if the OK button was
            pressed. The |user_input| value should be specified for prompt dialogs.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefJSDialogHandler">
            <summary>
            Implement this interface to handle events related to JavaScript dialogs. The
            methods of this class will be called on the UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefJSDialogHandler.OnJSDialog(Xilium.CefGlue.CefBrowser,System.String,Xilium.CefGlue.CefJSDialogType,System.String,System.String,Xilium.CefGlue.CefJSDialogCallback,System.Boolean@)">
            <summary>
            Called to run a JavaScript dialog. If |origin_url| is non-empty it can be
            passed to the CefFormatUrlForSecurityDisplay function to retrieve a secure
            and user-friendly display string. The |default_prompt_text| value will be
            specified for prompt dialogs only. Set |suppress_message| to true and
            return false to suppress the message (suppressing messages is preferable to
            immediately executing the callback as this is used to detect presumably
            malicious behavior like spamming alert messages in onbeforeunload). Set
            |suppress_message| to false and return false to use the default
            implementation (the default implementation will show one modal dialog at a
            time and suppress any additional dialog requests until the displayed dialog
            is dismissed). Return true if the application will use a custom dialog or
            if the callback has been executed immediately. Custom dialogs may be either
            modal or modeless. If a custom dialog is used the application must execute
            |callback| once the custom dialog is dismissed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefJSDialogHandler.OnBeforeUnloadDialog(Xilium.CefGlue.CefBrowser,System.String,System.Boolean,Xilium.CefGlue.CefJSDialogCallback)">
            <summary>
            Called to run a dialog asking the user if they want to leave a page. Return
            false to use the default dialog implementation. Return true if the
            application will use a custom dialog or if the callback has been executed
            immediately. Custom dialogs may be either modal or modeless. If a custom
            dialog is used the application must execute |callback| once the custom
            dialog is dismissed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefJSDialogHandler.OnResetDialogState(Xilium.CefGlue.CefBrowser)">
            <summary>
            Called to cancel any pending dialogs and reset any saved dialog state. Will
            be called due to events like page navigation irregardless of whether any
            dialogs are currently pending.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefJSDialogHandler.OnDialogClosed(Xilium.CefGlue.CefBrowser)">
            <summary>
            Called when the default implementation dialog is closed.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefKeyboardHandler">
            <summary>
            Implement this interface to handle events related to keyboard input. The
            methods of this class will be called on the UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefKeyboardHandler.OnPreKeyEvent(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefKeyEvent,System.IntPtr,System.Boolean@)">
            <summary>
            Called before a keyboard event is sent to the renderer. |event| contains
            information about the keyboard event. |os_event| is the operating system
            event message, if any. Return true if the event was handled or false
            otherwise. If the event will be handled in OnKeyEvent() as a keyboard
            shortcut set |is_keyboard_shortcut| to true and return false.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefKeyboardHandler.OnKeyEvent(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefKeyEvent,System.IntPtr)">
            <summary>
            Called after the renderer and JavaScript in the page has had a chance to
            handle the event. |event| contains information about the keyboard event.
            |os_event| is the operating system event message, if any. Return true if
            the keyboard event was handled or false otherwise.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefLifeSpanHandler">
            <summary>
            Implement this interface to handle events related to browser life span. The
            methods of this class will be called on the UI thread unless otherwise
            indicated.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefLifeSpanHandler.OnBeforePopup(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,System.String,System.String,Xilium.CefGlue.CefWindowOpenDisposition,System.Boolean,Xilium.CefGlue.CefPopupFeatures,Xilium.CefGlue.CefWindowInfo,Xilium.CefGlue.CefClient@,Xilium.CefGlue.CefBrowserSettings,Xilium.CefGlue.CefDictionaryValue@,System.Boolean@)">
            <summary>
            Called on the UI thread before a new popup browser is created. The
            |browser| and |frame| values represent the source of the popup request. The
            |target_url| and |target_frame_name| values indicate where the popup
            browser should navigate and may be empty if not specified with the request.
            The |target_disposition| value indicates where the user intended to open
            the popup (e.g. current tab, new tab, etc). The |user_gesture| value will
            be true if the popup was opened via explicit user gesture (e.g. clicking a
            link) or false if the popup opened automatically (e.g. via the
            DomContentLoaded event). The |popupFeatures| structure contains additional
            information about the requested popup window. To allow creation of the
            popup browser optionally modify |windowInfo|, |client|, |settings| and
            |no_javascript_access| and return false. To cancel creation of the popup
            browser return true. The |client| and |settings| values will default to the
            source browser's values. If the |no_javascript_access| value is set to
            false the new browser will not be scriptable and may not be hosted in the
            same renderer process as the source browser. Any modifications to
            |windowInfo| will be ignored if the parent browser is wrapped in a
            CefBrowserView. Popup browser creation will be canceled if the parent
            browser is destroyed before the popup browser creation completes (indicated
            by a call to OnAfterCreated for the popup browser). The |extra_info|
            parameter provides an opportunity to specify extra information specific
            to the created popup browser that will be passed to
            CefRenderProcessHandler::OnBrowserCreated() in the render process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefLifeSpanHandler.OnAfterCreated(Xilium.CefGlue.CefBrowser)">
            <summary>
            Called after a new browser is created. This callback will be the first
            notification that references |browser|.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefLifeSpanHandler.DoClose(Xilium.CefGlue.CefBrowser)">
            <summary>
            Called when a browser has recieved a request to close. This may result
            directly from a call to CefBrowserHost::*CloseBrowser() or indirectly if
            the browser is parented to a top-level window created by CEF and the user
            attempts to close that window (by clicking the 'X', for example). The
            DoClose() method will be called after the JavaScript 'onunload' event has
            been fired.
            An application should handle top-level owner window close notifications by
            calling CefBrowserHost::TryCloseBrowser() or
            CefBrowserHost::CloseBrowser(false) instead of allowing the window to close
            immediately (see the examples below). This gives CEF an opportunity to
            process the 'onbeforeunload' event and optionally cancel the close before
            DoClose() is called.
            When windowed rendering is enabled CEF will internally create a window or
            view to host the browser. In that case returning false from DoClose() will
            send the standard close notification to the browser's top-level owner
            window (e.g. WM_CLOSE on Windows, performClose: on OS X, "delete_event" on
            Linux or CefWindowDelegate::CanClose() callback from Views). If the
            browser's host window/view has already been destroyed (via view hierarchy
            tear-down, for example) then DoClose() will not be called for that browser
            since is no longer possible to cancel the close.
            When windowed rendering is disabled returning false from DoClose() will
            cause the browser object to be destroyed immediately.
            If the browser's top-level owner window requires a non-standard close
            notification then send that notification from DoClose() and return true.
            The CefLifeSpanHandler::OnBeforeClose() method will be called after
            DoClose() (if DoClose() is called) and immediately before the browser
            object is destroyed. The application should only exit after OnBeforeClose()
            has been called for all existing browsers.
            The below examples describe what should happen during window close when the
            browser is parented to an application-provided top-level window.
            Example 1: Using CefBrowserHost::TryCloseBrowser(). This is recommended for
            clients using standard close handling and windows created on the browser
            process UI thread.
            1.  User clicks the window close button which sends a close notification to
            the application's top-level window.
            2.  Application's top-level window receives the close notification and
            calls TryCloseBrowser() (which internally calls CloseBrowser(false)).
            TryCloseBrowser() returns false so the client cancels the window close.
            3.  JavaScript 'onbeforeunload' handler executes and shows the close
            confirmation dialog (which can be overridden via
            CefJSDialogHandler::OnBeforeUnloadDialog()).
            4.  User approves the close.
            5.  JavaScript 'onunload' handler executes.
            6.  CEF sends a close notification to the application's top-level window
            (because DoClose() returned false by default).
            7.  Application's top-level window receives the close notification and
            calls TryCloseBrowser(). TryCloseBrowser() returns true so the client
            allows the window close.
            8.  Application's top-level window is destroyed.
            9.  Application's OnBeforeClose() handler is called and the browser object
            is destroyed.
            10. Application exits by calling CefQuitMessageLoop() if no other browsers
            exist.
            Example 2: Using CefBrowserHost::CloseBrowser(false) and implementing the
            DoClose() callback. This is recommended for clients using non-standard
            close handling or windows that were not created on the browser process UI
            thread.
            1.  User clicks the window close button which sends a close notification to
            the application's top-level window.
            2.  Application's top-level window receives the close notification and:
            A. Calls CefBrowserHost::CloseBrowser(false).
            B. Cancels the window close.
            3.  JavaScript 'onbeforeunload' handler executes and shows the close
            confirmation dialog (which can be overridden via
            CefJSDialogHandler::OnBeforeUnloadDialog()).
            4.  User approves the close.
            5.  JavaScript 'onunload' handler executes.
            6.  Application's DoClose() handler is called. Application will:
            A. Set a flag to indicate that the next close attempt will be allowed.
            B. Return false.
            7.  CEF sends an close notification to the application's top-level window.
            8.  Application's top-level window receives the close notification and
            allows the window to close based on the flag from #6B.
            9.  Application's top-level window is destroyed.
            10. Application's OnBeforeClose() handler is called and the browser object
            is destroyed.
            11. Application exits by calling CefQuitMessageLoop() if no other browsers
            exist.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefLifeSpanHandler.OnBeforeClose(Xilium.CefGlue.CefBrowser)">
            <summary>
            Called just before a browser is destroyed. Release all references to the
            browser object and do not attempt to execute any methods on the browser
            object (other than GetIdentifier or IsSame) after this callback returns.
            This callback will be the last notification that references |browser| on
            the UI thread. Any in-progress network requests associated with |browser|
            will be aborted when the browser is destroyed, and
            CefResourceRequestHandler callbacks related to those requests may still
            arrive on the IO thread after this method is called. See DoClose()
            documentation for additional usage information.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefListValue">
            <summary>
            Class representing a list value. Can be used on any process and thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.Create">
            <summary>
            Creates a new object that is not owned by any other object.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefListValue.IsValid">
            <summary>
            Returns true if this object is valid. This object may become invalid if
            the underlying data is owned by another object (e.g. list or dictionary)
            and that other object is then modified or destroyed. Do not call any other
            methods if this method returns false.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefListValue.IsOwned">
            <summary>
            Returns true if this object is currently owned by another object.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefListValue.IsReadOnly">
            <summary>
            Returns true if the values of this object are read-only. Some APIs may
            expose read-only objects.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.IsSame(Xilium.CefGlue.CefListValue)">
            <summary>
            Returns true if this object and |that| object have the same underlying
            data. If true modifications to this object will also affect |that| object
            and vice-versa.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.IsEqual(Xilium.CefGlue.CefListValue)">
            <summary>
            Returns true if this object and |that| object have an equivalent underlying
            value but are not necessarily the same object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.Copy">
            <summary>
            Returns a writable copy of this object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.SetSize(System.Int32)">
            <summary>
            Sets the number of values. If the number of values is expanded all
            new value slots will default to type null. Returns true on success.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefListValue.Count">
            <summary>
            Returns the number of values.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.Clear">
            <summary>
            Removes all values. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.Remove(System.Int32)">
            <summary>
            Removes the value at the specified index.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.GetValueType(System.Int32)">
            <summary>
            Returns the value type at the specified index.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.GetValue(System.Int32)">
            <summary>
            Returns the value at the specified index. For simple types the returned
            value will copy existing data and modifications to the value will not
            modify this object. For complex types (binary, dictionary and list) the
            returned value will reference existing data and modifications to the value
            will modify this object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.GetBool(System.Int32)">
            <summary>
            Returns the value at the specified index as type bool.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.GetInt(System.Int32)">
            <summary>
            Returns the value at the specified index as type int.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.GetDouble(System.Int32)">
            <summary>
            Returns the value at the specified index as type double.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.GetString(System.Int32)">
            <summary>
            Returns the value at the specified index as type string.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.GetBinary(System.Int32)">
            <summary>
            Returns the value at the specified index as type binary. The returned
            value will reference existing data.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.GetDictionary(System.Int32)">
            <summary>
            Returns the value at the specified index as type dictionary. The returned
            value will reference existing data and modifications to the value will
            modify this object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.GetList(System.Int32)">
            <summary>
            Returns the value at the specified index as type list. The returned
            value will reference existing data and modifications to the value will
            modify this object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.SetValue(System.Int32,Xilium.CefGlue.CefValue)">
            <summary>
            Sets the value at the specified index. Returns true if the value was set
            successfully. If |value| represents simple data then the underlying data
            will be copied and modifications to |value| will not modify this object. If
            |value| represents complex data (binary, dictionary or list) then the
            underlying data will be referenced and modifications to |value| will modify
            this object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.SetNull(System.Int32)">
            <summary>
            Sets the value at the specified index as type null. Returns true if the
            value was set successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.SetBool(System.Int32,System.Boolean)">
            <summary>
            Sets the value at the specified index as type bool. Returns true if the
            value was set successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.SetInt(System.Int32,System.Int32)">
            <summary>
            Sets the value at the specified index as type int. Returns true if the
            value was set successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.SetDouble(System.Int32,System.Double)">
            <summary>
            Sets the value at the specified index as type double. Returns true if the
            value was set successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.SetString(System.Int32,System.String)">
            <summary>
            Sets the value at the specified index as type string. Returns true if the
            value was set successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.SetBinary(System.Int32,Xilium.CefGlue.CefBinaryValue)">
            <summary>
            Sets the value at the specified index as type binary. Returns true if the
            value was set successfully. If |value| is currently owned by another object
            then the value will be copied and the |value| reference will not change.
            Otherwise, ownership will be transferred to this object and the |value|
            reference will be invalidated.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.SetDictionary(System.Int32,Xilium.CefGlue.CefDictionaryValue)">
            <summary>
            Sets the value at the specified index as type dict. Returns true if the
            value was set successfully. If |value| is currently owned by another object
            then the value will be copied and the |value| reference will not change.
            Otherwise, ownership will be transferred to this object and the |value|
            reference will be invalidated.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefListValue.SetList(System.Int32,Xilium.CefGlue.CefListValue)">
            <summary>
            Sets the value at the specified index as type list. Returns true if the
            value was set successfully. If |value| is currently owned by another object
            then the value will be copied and the |value| reference will not change.
            Otherwise, ownership will be transferred to this object and the |value|
            reference will be invalidated.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefLoadHandler">
            <summary>
            Implement this interface to handle events related to browser load status. The
            methods of this class will be called on the browser process UI thread or
            render process main thread (TID_RENDERER).
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefLoadHandler.OnLoadingStateChange(Xilium.CefGlue.CefBrowser,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Called when the loading state has changed. This callback will be executed
            twice -- once when loading is initiated either programmatically or by user
            action, and once when loading is terminated due to completion, cancellation
            of failure. It will be called before any calls to OnLoadStart and after all
            calls to OnLoadError and/or OnLoadEnd.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefLoadHandler.OnLoadStart(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefTransitionType)">
            <summary>
            Called after a navigation has been committed and before the browser begins
            loading contents in the frame. The |frame| value will never be empty --
            call the IsMain() method to check if this frame is the main frame.
            |transition_type| provides information about the source of the navigation
            and an accurate value is only available in the browser process. Multiple
            frames may be loading at the same time. Sub-frames may start or continue
            loading after the main frame load has ended. This method will not be called
            for same page navigations (fragments, history state, etc.) or for
            navigations that fail or are canceled before commit. For notification of
            overall browser load status use OnLoadingStateChange instead.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefLoadHandler.OnLoadEnd(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,System.Int32)">
            <summary>
            Called when the browser is done loading a frame. The |frame| value will
            never be empty -- call the IsMain() method to check if this frame is the
            main frame. Multiple frames may be loading at the same time. Sub-frames may
            start or continue loading after the main frame load has ended. This method
            will not be called for same page navigations (fragments, history state,
            etc.) or for navigations that fail or are canceled before commit. For
            notification of overall browser load status use OnLoadingStateChange
            instead.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefLoadHandler.OnLoadError(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefErrorCode,System.String,System.String)">
            <summary>
            Called when a navigation fails or is canceled. This method may be called
            by itself if before commit or in combination with OnLoadStart/OnLoadEnd if
            after commit. |errorCode| is the error code number, |errorText| is the
            error text and |failedUrl| is the URL that failed to load.
            See net\base\net_error_list.h for complete descriptions of the error codes.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefMediaObserver">
            <summary>
            Implemented by the client to observe MediaRouter events and registered via
            CefMediaRouter::AddObserver. The methods of this class will be called on the
            browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMediaObserver.OnSinks(Xilium.CefGlue.CefMediaSink[])">
            <summary>
            The list of available media sinks has changed or
            CefMediaRouter::NotifyCurrentSinks was called.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMediaObserver.OnRoutes(Xilium.CefGlue.CefMediaRoute[])">
            <summary>
            The list of available media routes has changed or
            CefMediaRouter::NotifyCurrentRoutes was called.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMediaObserver.OnRouteStateChanged(Xilium.CefGlue.CefMediaRoute,Xilium.CefGlue.CefMediaRouteConnectionState)">
            <summary>
            The connection state of |route| has changed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMediaObserver.OnRouteMessageReceived(Xilium.CefGlue.CefMediaRoute,System.IntPtr,System.Int32)">
            <summary>
            A message was recieved over |route|. |message| is only valid for
            the scope of this callback and should be copied if necessary.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefMediaRoute">
            <summary>
            Represents the route between a media source and sink. Instances of this
            object are created via CefMediaRouter::CreateRoute and retrieved via
            CefMediaObserver::OnRoutes. Contains the status and metadata of a
            routing operation. The methods of this class may be called on any browser
            process thread unless otherwise indicated.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefMediaRoute.Id">
            <summary>
            Returns the ID for this route.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMediaRoute.GetSource">
            <summary>
            Returns the source associated with this route.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMediaRoute.GetSink">
            <summary>
            Returns the sink associated with this route.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMediaRoute.SendRouteMessage(System.IntPtr,System.Int32)">
            <summary>
            Send a message over this route. |message| will be copied if necessary.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMediaRoute.Terminate">
            <summary>
            Terminate this route. Will result in an asynchronous call to
            CefMediaObserver::OnRoutes on all registered observers.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefMediaRouteCreateCallback">
            <summary>
            Callback interface for CefMediaRouter::CreateRoute. The methods of this
            class will be called on the browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMediaRouteCreateCallback.OnMediaRouteCreateFinished(Xilium.CefGlue.CefMediaRouteCreateResult,System.String,Xilium.CefGlue.CefMediaRoute)">
            <summary>
            Method that will be executed when the route creation has finished. |result|
            will be CEF_MRCR_OK if the route creation succeeded. |error| will be a
            description of the error if the route creation failed. |route| is the
            resulting route, or empty if the route creation failed.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefMediaRouter">
            <summary>
            Supports discovery of and communication with media devices on the local
            network via the Cast and DIAL protocols. The methods of this class may be
            called on any browser process thread unless otherwise indicated.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMediaRouter.GetGlobalMediaRouter">
            <summary>
            Returns the MediaRouter object associated with the global request context.
            Equivalent to calling
            CefRequestContext::GetGlobalContext()->GetMediaRouter().
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMediaRouter.AddObserver(Xilium.CefGlue.CefMediaObserver)">
            <summary>
            Add an observer for MediaRouter events. The observer will remain registered
            until the returned Registration object is destroyed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMediaRouter.GetSource(System.String)">
            <summary>
            Returns a MediaSource object for the specified media source URN. Supported
            URN schemes include "cast:" and "dial:", and will be already known by the
            client application (e.g. "cast:&lt;appId&gt;?clientId=&lt;clientId&gt;").
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMediaRouter.NotifyCurrentSinks">
            <summary>
            Trigger an asynchronous call to CefMediaObserver::OnSinks on all
            registered observers.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMediaRouter.CreateRoute(Xilium.CefGlue.CefMediaSource,Xilium.CefGlue.CefMediaSink,Xilium.CefGlue.CefMediaRouteCreateCallback)">
            <summary>
            Create a new route between |source| and |sink|. Source and sink must be
            valid, compatible (as reported by CefMediaSink::IsCompatibleWith), and a
            route between them must not already exist. |callback| will be executed
            on success or failure. If route creation succeeds it will also trigger an
            asynchronous call to CefMediaObserver::OnRoutes on all registered
            observers.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMediaRouter.NotifyCurrentRoutes">
            <summary>
            Trigger an asynchronous call to CefMediaObserver::OnRoutes on all
            registered observers.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefMediaSink">
            <summary>
            Represents a sink to which media can be routed. Instances of this object are
            retrieved via CefMediaObserver::OnSinks. The methods of this class may
            be called on any browser process thread unless otherwise indicated.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefMediaSink.Id">
            <summary>
            Returns the ID for this sink.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefMediaSink.IsValid">
            <summary>
            Returns true if this sink is valid.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefMediaSink.Name">
            <summary>
            Returns the name of this sink.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefMediaSink.Description">
            <summary>
            Returns the description of this sink.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefMediaSink.IsCastSink">
            <summary>
            Returns true if this sink accepts content via Cast.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefMediaSink.IsDialSink">
            <summary>
            Returns true if this sink accepts content via DIAL.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMediaSink.IsCompatibleWith(Xilium.CefGlue.CefMediaSource)">
            <summary>
            Returns true if this sink is compatible with |source|.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefMediaSource">
            <summary>
            Represents a source from which media can be routed. Instances of this object
            are retrieved via CefMediaRouter::GetSource. The methods of this class may be
            called on any browser process thread unless otherwise indicated.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefMediaSource.Id">
            <summary>
            Returns the ID (media source URN or URL) for this source.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefMediaSource.IsValid">
            <summary>
            Returns true if this source is valid.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefMediaSource.IsCastSource">
            <summary>
            Returns true if this source outputs its content via Cast.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefMediaSource.IsDialSource">
            <summary>
            Returns true if this source outputs its content via DIAL.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefMenuModel">
            <summary>
            Supports creation and modification of menus. See cef_menu_id_t for the
            command ids that have default implementations. All user-defined command ids
            should be between MENU_ID_USER_FIRST and MENU_ID_USER_LAST. The methods of
            this class can only be accessed on the browser process the UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.Create(Xilium.CefGlue.CefMenuModelDelegate)">
            <summary>
            Create a new MenuModel with the specified |delegate|.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefMenuModel.IsSubMenu">
            <summary>
            Returns true if this menu is a submenu.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.Clear">
            <summary>
            Clears the menu. Returns true on success.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefMenuModel.Count">
            <summary>
            Returns the number of items in this menu.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.AddSeparator">
            <summary>
            Add a separator to the menu. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.AddItem(System.Int32,System.String)">
            <summary>
            Add an item to the menu. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.AddCheckItem(System.Int32,System.String)">
            <summary>
            Add a check item to the menu. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.AddRadioItem(System.Int32,System.String,System.Int32)">
            <summary>
            Add a radio item to the menu. Only a single item with the specified
            |group_id| can be checked at a time. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.AddSubMenu(System.Int32,System.String)">
            <summary>
            Add a sub-menu to the menu. The new sub-menu is returned.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.InsertSeparatorAt(System.Int32)">
            <summary>
            Insert a separator in the menu at the specified |index|. Returns true on
            success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.InsertItemAt(System.Int32,System.Int32,System.String)">
            <summary>
            Insert an item in the menu at the specified |index|. Returns true on
            success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.InsertCheckItemAt(System.Int32,System.Int32,System.String)">
            <summary>
            Insert a check item in the menu at the specified |index|. Returns true on
            success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.InsertRadioItemAt(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Insert a radio item in the menu at the specified |index|. Only a single
            item with the specified |group_id| can be checked at a time. Returns true
            on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.InsertSubMenuAt(System.Int32,System.Int32,System.String)">
            <summary>
            Insert a sub-menu in the menu at the specified |index|. The new sub-menu
            is returned.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.Remove(System.Int32)">
            <summary>
            Removes the item with the specified |commandId|. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified |index|. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.GetIndexOf(System.Int32)">
            <summary>
            Returns the index associated with the specified |commandId| or -1 if not
            found due to the command id not existing in the menu.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.GetCommandIdAt(System.Int32)">
            <summary>
            Returns the command id at the specified |index| or -1 if not found due to
            invalid range or the index being a separator.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.SetCommandIdAt(System.Int32,System.Int32)">
            <summary>
            Sets the command id at the specified |index|. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.GetLabel(System.Int32)">
            <summary>
            Returns the label for the specified |commandId| or empty if not found.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.GetLabelAt(System.Int32)">
            <summary>
            Returns the label at the specified |index| or empty if not found due to
            invalid range or the index being a separator.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.SetLabel(System.Int32,System.String)">
            <summary>
            Sets the label for the specified |commandId|. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.SetLabelAt(System.Int32,System.String)">
            <summary>
            Set the label at the specified |index|. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.GetItemType(System.Int32)">
            <summary>
            Returns the item type for the specified |commandId|.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.GetItemTypeAt(System.Int32)">
            <summary>
            Returns the item type at the specified |index|.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.GetGroupId(System.Int32)">
            <summary>
            Returns the group id for the specified |commandId| or -1 if invalid.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.GetGroupIdAt(System.Int32)">
            <summary>
            Returns the group id at the specified |index| or -1 if invalid.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.SetGroupId(System.Int32,System.Int32)">
            <summary>
            Sets the group id for the specified |commandId|. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.SetGroupIdAt(System.Int32,System.Int32)">
            <summary>
            Sets the group id at the specified |index|. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.GetSubMenu(System.Int32)">
            <summary>
            Returns the submenu for the specified |commandId| or empty if invalid.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.GetSubMenuAt(System.Int32)">
            <summary>
            Returns the submenu at the specified |index| or empty if invalid.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.IsVisible(System.Int32)">
            <summary>
            Returns true if the specified |commandId| is visible.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.IsVisibleAt(System.Int32)">
            <summary>
            Returns true if the specified |index| is visible.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.SetVisible(System.Int32,System.Boolean)">
            <summary>
            Change the visibility of the specified |commandId|. Returns true on
            success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.SetVisibleAt(System.Int32,System.Boolean)">
            <summary>
            Change the visibility at the specified |index|. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.IsEnabled(System.Int32)">
            <summary>
            Returns true if the specified |commandId| is enabled.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.IsEnabledAt(System.Int32)">
            <summary>
            Returns true if the specified |index| is enabled.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.SetEnabled(System.Int32,System.Boolean)">
            <summary>
            Change the enabled status of the specified |commandId|. Returns true on
            success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.SetEnabledAt(System.Int32,System.Boolean)">
            <summary>
            Change the enabled status at the specified |index|. Returns true on
            success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.IsChecked(System.Int32)">
            <summary>
            Returns true if the specified |commandId| is checked. Only applies to
            check and radio items.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.IsCheckedAt(System.Int32)">
            <summary>
            Returns true if the specified |index| is checked. Only applies to check
            and radio items.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.SetChecked(System.Int32,System.Boolean)">
            <summary>
            Check the specified |commandId|. Only applies to check and radio items.
            Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.SetCheckedAt(System.Int32,System.Boolean)">
            <summary>
            Check the specified |index|. Only applies to check and radio items. Returns
            true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.HasAccelerator(System.Int32)">
            <summary>
            Returns true if the specified |commandId| has a keyboard accelerator
            assigned.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.HasAcceleratorAt(System.Int32)">
            <summary>
            Returns true if the specified |index| has a keyboard accelerator assigned.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.SetAccelerator(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set the keyboard accelerator for the specified |commandId|. |key_code| can
            be any virtual key or character value. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.SetAcceleratorAt(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set the keyboard accelerator at the specified |index|. |key_code| can be
            any virtual key or character value. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.RemoveAccelerator(System.Int32)">
            <summary>
            Remove the keyboard accelerator for the specified |commandId|. Returns
            true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.RemoveAcceleratorAt(System.Int32)">
            <summary>
            Remove the keyboard accelerator at the specified |index|. Returns true on
            success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.GetAccelerator(System.Int32,System.Int32@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Retrieves the keyboard accelerator for the specified |commandId|. Returns
            true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.GetAcceleratorAt(System.Int32,System.Int32@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Retrieves the keyboard accelerator for the specified |index|. Returns true
            on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.SetColor(System.Int32,Xilium.CefGlue.CefMenuColorType,System.UInt32)">
            <summary>
            Set the explicit color for |command_id| and |color_type| to |color|.
            Specify a |color| value of 0 to remove the explicit color. If no explicit
            color or default color is set for |color_type| then the system color will
            be used. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.SetColorAt(System.Int32,Xilium.CefGlue.CefMenuColorType,System.UInt32)">
            <summary>
            Set the explicit color for |command_id| and |index| to |color|. Specify a
            |color| value of 0 to remove the explicit color. Specify an |index| value
            of -1 to set the default color for items that do not have an explicit
            color set. If no explicit color or default color is set for |color_type|
            then the system color will be used. Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.GetColor(System.Int32,Xilium.CefGlue.CefMenuColorType,System.UInt32@)">
            <summary>
            Returns in |color| the color that was explicitly set for |command_id| and
            |color_type|. If a color was not set then 0 will be returned in |color|.
            Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.GetColorAt(System.Int32,Xilium.CefGlue.CefMenuColorType,System.UInt32@)">
            <summary>
            Returns in |color| the color that was explicitly set for |command_id| and
            |color_type|. Specify an |index| value of -1 to return the default color
            in |color|. If a color was not set then 0 will be returned in |color|.
            Returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.SetFontList(System.Int32,System.String)">
            <summary>
            Sets the font list for the specified |command_id|. If |font_list| is empty
            the system font will be used. Returns true on success. The format is
            "&lt;FONT_FAMILY_LIST&gt;,[STYLES] &lt;SIZE&gt;", where:
            - FONT_FAMILY_LIST is a comma-separated list of font family names,
            - STYLES is an optional space-separated list of style names (case-sensitive
            "Bold" and "Italic" are supported), and
            - SIZE is an integer font size in pixels with the suffix "px".
            Here are examples of valid font description strings:
            - "Arial, Helvetica, Bold Italic 14px"
            - "Arial, 14px"
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModel.SetFontListAt(System.Int32,System.String)">
            <summary>
            Sets the font list for the specified |index|. Specify an |index| value of
            -1 to set the default font. If |font_list| is empty the system font will
            be used. Returns true on success. The format is
            "&lt;FONT_FAMILY_LIST&gt;,[STYLES] &lt;SIZE&gt;", where:
            - FONT_FAMILY_LIST is a comma-separated list of font family names,
            - STYLES is an optional space-separated list of style names (case-sensitive
            "Bold" and "Italic" are supported), and
            - SIZE is an integer font size in pixels with the suffix "px".
            Here are examples of valid font description strings:
            - "Arial, Helvetica, Bold Italic 14px"
            - "Arial, 14px"
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefMenuModelDelegate">
            <summary>
            Implement this interface to handle menu model events. The methods of this
            class will be called on the browser process UI thread unless otherwise
            indicated.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModelDelegate.ExecuteCommand(Xilium.CefGlue.CefMenuModel,System.Int32,Xilium.CefGlue.CefEventFlags)">
            <summary>
            Perform the action associated with the specified |command_id| and
            optional |event_flags|.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModelDelegate.MouseOutsideMenu(Xilium.CefGlue.CefMenuModel,Xilium.CefGlue.CefPoint)">
            <summary>
            Called when the user moves the mouse outside the menu and over the owning
            window.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModelDelegate.UnhandledOpenSubmenu(Xilium.CefGlue.CefMenuModel,System.Boolean)">
            <summary>
            Called on unhandled open submenu keyboard commands. |is_rtl| will be true
            if the menu is displaying a right-to-left language.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModelDelegate.UnhandledCloseSubmenu(Xilium.CefGlue.CefMenuModel,System.Boolean)">
            <summary>
            Called on unhandled close submenu keyboard commands. |is_rtl| will be true
            if the menu is displaying a right-to-left language.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModelDelegate.MenuWillShow(Xilium.CefGlue.CefMenuModel)">
            <summary>
            The menu is about to show.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModelDelegate.MenuClosed(Xilium.CefGlue.CefMenuModel)">
            <summary>
            The menu has closed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefMenuModelDelegate.FormatLabel(Xilium.CefGlue.CefMenuModel,System.String@)">
            <summary>
            Optionally modify a menu item label. Return true if |label| was modified.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefNavigationEntry">
            <summary>
            Class used to represent an entry in navigation history.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefNavigationEntry.IsValid">
            <summary>
            Returns true if this object is valid. Do not call any other methods if this
            function returns false.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefNavigationEntry.Url">
            <summary>
            Returns the actual URL of the page. For some pages this may be data: URL or
            similar. Use GetDisplayURL() to return a display-friendly version.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefNavigationEntry.GetDisplayUrl">
            <summary>
            Returns a display-friendly version of the URL.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefNavigationEntry.OriginalUrl">
            <summary>
            Returns the original URL that was entered by the user before any redirects.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefNavigationEntry.Title">
            <summary>
            Returns the title set by the page. This value may be empty.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefNavigationEntry.TransitionType">
            <summary>
            Returns the transition type which indicates what the user did to move to
            this page from the previous page.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefNavigationEntry.HasPostData">
            <summary>
            Returns true if this navigation includes post data.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefNavigationEntry.CompletionTime">
            <summary>
            Returns the time for the last known successful navigation completion. A
            navigation may be completed more than once if the page is reloaded. May be
            0 if the navigation has not yet completed.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefNavigationEntry.HttpStatusCode">
            <summary>
            Returns the HTTP status code for the last known successful navigation
            response. May be 0 if the response has not yet been received or if the
            navigation has not yet completed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefNavigationEntry.GetSslStatus">
            <summary>
            Returns the SSL information for this navigation entry.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefNavigationEntryVisitor">
            <summary>
            Callback interface for CefBrowserHost::GetNavigationEntries. The methods of
            this class will be called on the browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefNavigationEntryVisitor.Visit(Xilium.CefGlue.CefNavigationEntry,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Method that will be executed. Do not keep a reference to |entry| outside of
            this callback. Return true to continue visiting entries or false to stop.
            |current| is true if this entry is the currently loaded navigation entry.
            |index| is the 0-based index of this entry and |total| is the total number
            of entries.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefPdfPrintCallback">
            <summary>
            Callback interface for CefBrowserHost::PrintToPDF. The methods of this class
            will be called on the browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPdfPrintCallback.OnPdfPrintFinished(System.String,System.Boolean)">
            <summary>
            Method that will be executed when the PDF printing has completed. |path|
            is the output path. |ok| will be true if the printing completed
            successfully or false otherwise.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefPostData">
            <summary>
            Class used to represent post data for a web request. The methods of this
            class may be called on any thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPostData.Create">
            <summary>
            Create a new CefPostData object.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPostData.IsReadOnly">
            <summary>
            Returns true if this object is read-only.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPostData.HasExcludedElements">
            <summary>
            Returns true if the underlying POST data includes elements that are not
            represented by this CefPostData object (for example, multi-part file upload
            data). Modifying CefPostData objects with excluded elements may result in
            the request failing.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPostData.Count">
            <summary>
            Returns the number of existing post data elements.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPostData.GetElements">
            <summary>
            Retrieve the post data elements.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPostData.Remove(Xilium.CefGlue.CefPostDataElement)">
            <summary>
            Remove the specified post data element.  Returns true if the removal
            succeeds.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPostData.Add(Xilium.CefGlue.CefPostDataElement)">
            <summary>
            Add the specified post data element.  Returns true if the add succeeds.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPostData.RemoveAll">
            <summary>
            Remove all existing post data elements.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefPostDataElement">
            <summary>
            Class used to represent a single element in the request post data. The
            methods of this class may be called on any thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPostDataElement.Create">
            <summary>
            Create a new CefPostDataElement object.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPostDataElement.IsReadOnly">
            <summary>
            Returns true if this object is read-only.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPostDataElement.SetToEmpty">
            <summary>
            Remove all contents from the post data element.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPostDataElement.SetToFile(System.String)">
            <summary>
            The post data element will represent a file.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPostDataElement.SetToBytes(System.Byte[])">
            <summary>
            The post data element will represent bytes.  The bytes passed
            in will be copied.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPostDataElement.ElementType">
            <summary>
            Return the type of this post data element.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPostDataElement.GetFile">
            <summary>
            Return the file name.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPostDataElement.BytesCount">
            <summary>
            Return the number of bytes.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPostDataElement.GetBytes">
            <summary>
            Read up to |size| bytes into |bytes| and return the number of bytes
            actually read.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefPrintDialogCallback">
            <summary>
            Callback interface for asynchronous continuation of print dialog requests.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintDialogCallback.Continue(Xilium.CefGlue.CefPrintSettings)">
            <summary>
            Continue printing with the specified |settings|.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintDialogCallback.Cancel">
            <summary>
            Cancel the printing.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefPrintHandler">
            <summary>
            Implement this interface to handle printing on Linux. Each browser will have
            only one print job in progress at a time. The methods of this class will be
            called on the browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintHandler.OnPrintStart(Xilium.CefGlue.CefBrowser)">
            <summary>
            Called when printing has started for the specified |browser|. This method
            will be called before the other OnPrint*() methods and irrespective of how
            printing was initiated (e.g. CefBrowserHost::Print(), JavaScript
            window.print() or PDF extension print button).
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintHandler.OnPrintSettings(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefPrintSettings,System.Boolean)">
            <summary>
            Synchronize |settings| with client state. If |get_defaults| is true then
            populate |settings| with the default print settings. Do not keep a
            reference to |settings| outside of this callback.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintHandler.OnPrintDialog(Xilium.CefGlue.CefBrowser,System.Boolean,Xilium.CefGlue.CefPrintDialogCallback)">
            <summary>
            Show the print dialog. Execute |callback| once the dialog is dismissed.
            Return true if the dialog will be displayed or false to cancel the
            printing immediately.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintHandler.OnPrintJob(Xilium.CefGlue.CefBrowser,System.String,System.String,Xilium.CefGlue.CefPrintJobCallback)">
            <summary>
            Send the print job to the printer. Execute |callback| once the job is
            completed. Return true if the job will proceed or false to cancel the job
            immediately.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintHandler.OnPrintReset(Xilium.CefGlue.CefBrowser)">
            <summary>
            Reset client state related to printing.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintHandler.GetPdfPaperSize(System.Int32)">
            <summary>
            Return the PDF paper size in device units. Used in combination with
            CefBrowserHost::PrintToPDF().
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefPrintJobCallback">
            <summary>
            Callback interface for asynchronous continuation of print job requests.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintJobCallback.Continue">
            <summary>
            Indicate completion of the print job.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefPrintSettings">
            <summary>
            Class representing print settings.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintSettings.Create">
            <summary>
            Create a new CefPrintSettings object.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPrintSettings.IsValid">
            <summary>
            Returns true if this object is valid. Do not call any other methods if this
            function returns false.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPrintSettings.IsReadOnly">
            <summary>
            Returns true if the values of this object are read-only. Some APIs may
            expose read-only objects.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintSettings.SetOrientation(System.Boolean)">
            <summary>
            Set the page orientation.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintSettings.IsLandscape">
            <summary>
            Returns true if the orientation is landscape.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintSettings.SetPrinterPrintableArea(Xilium.CefGlue.CefSize,Xilium.CefGlue.CefRectangle,System.Boolean)">
            <summary>
            Set the printer printable area in device units.
            Some platforms already provide flipped area. Set |landscape_needs_flip|
            to false on those platforms to avoid double flipping.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintSettings.SetDeviceName(System.String)">
            <summary>
            Set the device name.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPrintSettings.DeviceName">
            <summary>
            Get the device name.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintSettings.SetDpi(System.Int32)">
            <summary>
            Set the DPI (dots per inch).
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintSettings.GetDpi">
            <summary>
            Get the DPI (dots per inch).
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintSettings.SetPageRanges(Xilium.CefGlue.CefRange[])">
            <summary>
            Set the page ranges.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintSettings.GetPageRangesCount">
            <summary>
            Returns the number of page ranges that currently exist.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintSettings.GetPageRanges">
            <summary>
            Retrieve the page ranges.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintSettings.SetSelectionOnly(System.Boolean)">
            <summary>
            Set whether only the selection will be printed.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPrintSettings.IsSelectionOnly">
            <summary>
            Returns true if only the selection will be printed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintSettings.SetCollate(System.Boolean)">
            <summary>
            Set whether pages will be collated.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPrintSettings.WillCollate">
            <summary>
            Returns true if pages will be collated.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintSettings.SetColorModel(Xilium.CefGlue.CefColorModel)">
            <summary>
            Set the color model.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintSettings.GetColorModel">
            <summary>
            Get the color model.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintSettings.SetCopies(System.Int32)">
            <summary>
            Set the number of copies.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintSettings.GetCopies">
            <summary>
            Get the number of copies.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintSettings.SetDuplexMode(Xilium.CefGlue.CefDuplexMode)">
            <summary>
            Set the duplex mode.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefPrintSettings.GetDuplexMode">
            <summary>
            Get the duplex mode.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefProcessMessage">
            <summary>
            Class representing a message. Can be used on any process and thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefProcessMessage.Create(System.String)">
            <summary>
            Create a new CefProcessMessage object with the specified name.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefProcessMessage.IsValid">
            <summary>
            Returns true if this object is valid. Do not call any other methods if this
            function returns false.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefProcessMessage.IsReadOnly">
            <summary>
            Returns true if the values of this object are read-only. Some APIs may
            expose read-only objects.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefProcessMessage.Copy">
            <summary>
            Returns a writable copy of this object.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefProcessMessage.Name">
            <summary>
            Returns the message name.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefProcessMessage.Arguments">
            <summary>
            Returns the list of arguments.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefReadHandler">
            <summary>
            Interface the client can implement to provide a custom stream reader. The
            methods of this class may be called on any thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefReadHandler.Read(System.IO.Stream,System.Int64)">
            <summary>
            Read raw binary data.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefReadHandler.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek to the specified offset position. |whence| may be any one of
            SEEK_CUR, SEEK_END or SEEK_SET. Return zero on success and non-zero on
            failure.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefReadHandler.Tell">
            <summary>
            Return the current offset position.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefReadHandler.Eof">
            <summary>
            Return non-zero if at end of file.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefReadHandler.MayBlock">
            <summary>
            Return true if this handler performs work like accessing the file system
            which may block. Used as a hint for determining the thread to access the
            handler from.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefRegisterCdmCallback">
            <summary>
            Implement this interface to receive notification when CDM registration is
            complete. The methods of this class will be called on the browser process
            UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRegisterCdmCallback.OnCdmRegistrationComplete(Xilium.CefGlue.CefCdmRegistrationError,System.String)">
            <summary>
            Method that will be called when CDM registration is complete. |result|
            will be CEF_CDM_REGISTRATION_ERROR_NONE if registration completed
            successfully. Otherwise, |result| and |error_message| will contain
            additional information about why registration failed.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefRegistration">
            <summary>
            Generic callback interface used for managing the lifespan of a registration.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefRenderHandler">
            <summary>
            Implement this interface to handle events when window rendering is disabled.
            The methods of this class will be called on the UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderHandler.GetAccessibilityHandler">
            <summary>
            Return the handler for accessibility notifications. If no handler is
            provided the default implementation will be used.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderHandler.GetRootScreenRect(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefRectangle@)">
            <summary>
            Called to retrieve the root window rectangle in screen coordinates. Return
            true if the rectangle was provided. If this method returns false the
            rectangle from GetViewRect will be used.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderHandler.GetViewRect(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefRectangle@)">
            <summary>
            Called to retrieve the view rectangle which is relative to screen
            coordinates. This method must always provide a non-empty rectangle.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderHandler.GetScreenPoint(Xilium.CefGlue.CefBrowser,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Called to retrieve the translation from view coordinates to actual screen
            coordinates. Return true if the screen coordinates were provided.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderHandler.GetScreenInfo(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefScreenInfo)">
            <summary>
            Called to allow the client to fill in the CefScreenInfo object with
            appropriate values. Return true if the |screen_info| structure has been
            modified.
            If the screen info rectangle is left empty the rectangle from GetViewRect
            will be used. If the rectangle is still empty or invalid popups may not be
            drawn correctly.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderHandler.OnPopupShow(Xilium.CefGlue.CefBrowser,System.Boolean)">
            <summary>
            Called when the browser wants to show or hide the popup widget. The popup
            should be shown if |show| is true and hidden if |show| is false.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderHandler.OnPopupSize(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefRectangle)">
            <summary>
            Called when the browser wants to move or resize the popup widget. |rect|
            contains the new location and size in view coordinates.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderHandler.OnPaint(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefPaintElementType,Xilium.CefGlue.CefRectangle[],System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Called when an element should be painted. Pixel values passed to this
            method are scaled relative to view coordinates based on the value of
            CefScreenInfo.device_scale_factor returned from GetScreenInfo. |type|
            indicates whether the element is the view or the popup widget. |buffer|
            contains the pixel data for the whole image. |dirtyRects| contains the set
            of rectangles in pixel coordinates that need to be repainted. |buffer| will
            be |width|*|height|*4 bytes in size and represents a BGRA image with an
            upper-left origin. This method is only called when CefWindowInfo::SharedTextureEnabled
            is set to false.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderHandler.OnAcceleratedPaint(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefPaintElementType,Xilium.CefGlue.CefRectangle[],System.IntPtr)">
            <summary>
            Called when an element has been rendered to the shared texture handle.
            |type| indicates whether the element is the view or the popup widget.
            |dirtyRects| contains the set of rectangles in pixel coordinates that need
            to be repainted. |shared_handle| is the handle for a D3D11 Texture2D that
            can be accessed via ID3D11Device using the OpenSharedResource method. This
            method is only called when CefWindowInfo::SharedTextureEnabled is set to
            true, and is currently only supported on Windows.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderHandler.OnCursorChange(Xilium.CefGlue.CefBrowser,System.IntPtr,Xilium.CefGlue.CefCursorType,Xilium.CefGlue.CefCursorInfo)">
            <summary>
            Called when the browser's cursor has changed. If |type| is CT_CUSTOM then
            |custom_cursor_info| will be populated with the custom cursor information.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderHandler.StartDragging(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefDragData,Xilium.CefGlue.CefDragOperationsMask,System.Int32,System.Int32)">
            <summary>
            Called when the user starts dragging content in the web view. Contextual
            information about the dragged content is supplied by |drag_data|.
            (|x|, |y|) is the drag start location in screen coordinates.
            OS APIs that run a system message loop may be used within the
            StartDragging call.
            Return false to abort the drag operation. Don't call any of
            CefBrowserHost::DragSource*Ended* methods after returning false.
            Return true to handle the drag operation. Call
            CefBrowserHost::DragSourceEndedAt and DragSourceSystemDragEnded either
            synchronously or asynchronously to inform the web view that the drag
            operation has ended.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderHandler.UpdateDragCursor(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefDragOperationsMask)">
            <summary>
            Called when the web view wants to update the mouse cursor during a
            drag &amp; drop operation. |operation| describes the allowed operation
            (none, move, copy, link).
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderHandler.OnScrollOffsetChanged(Xilium.CefGlue.CefBrowser,System.Double,System.Double)">
            <summary>
            Called when the scroll offset has changed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderHandler.OnImeCompositionRangeChanged(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefRange,Xilium.CefGlue.CefRectangle[])">
            <summary>
            Called when the IME composition range has changed. |selected_range| is the
            range of characters that have been selected. |character_bounds| is the
            bounds of each character in view coordinates.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderHandler.OnTextSelectionChanged(Xilium.CefGlue.CefBrowser,System.String,Xilium.CefGlue.CefRange)">
            <summary>
            Called when text selection has changed for the specified |browser|.
            |selected_text| is the currently selected text and |selected_range| is
            the character range.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderHandler.OnVirtualKeyboardRequested(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefTextInputMode)">
            <summary>
            Called when an on-screen keyboard should be shown or hidden for the
            specified |browser|. |input_mode| specifies what kind of keyboard
            should be opened. If |input_mode| is CEF_TEXT_INPUT_MODE_NONE, any
            existing keyboard for this browser should be hidden.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefRenderProcessHandler">
            <summary>
            Class used to implement render process callbacks. The methods of this class
            will be called on the render process main thread (TID_RENDERER) unless
            otherwise indicated.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderProcessHandler.OnRenderThreadCreated(Xilium.CefGlue.CefListValue)">
            <summary>
            Called after the render process main thread has been created.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderProcessHandler.OnWebKitInitialized">
            <summary>
            Called after WebKit has been initialized.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderProcessHandler.OnBrowserCreated(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefDictionaryValue)">
            <summary>
            Called after a browser has been created. When browsing cross-origin a new
            browser will be created before the old browser with the same identifier is
            destroyed. |extra_info| is a read-only value originating from
            CefBrowserHost::CreateBrowser(), CefBrowserHost::CreateBrowserSync(),
            CefLifeSpanHandler::OnBeforePopup() or CefBrowserView::CreateBrowserView().
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderProcessHandler.OnBrowserDestroyed(Xilium.CefGlue.CefBrowser)">
            <summary>
            Called before a browser is destroyed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderProcessHandler.GetLoadHandler">
            <summary>
            Return the handler for browser load status events.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderProcessHandler.OnContextCreated(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefV8Context)">
            <summary>
            Called immediately after the V8 context for a frame has been created. To
            retrieve the JavaScript 'window' object use the CefV8Context::GetGlobal()
            method. V8 handles can only be accessed from the thread on which they are
            created. A task runner for posting tasks on the associated thread can be
            retrieved via the CefV8Context::GetTaskRunner() method.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderProcessHandler.OnContextReleased(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefV8Context)">
            <summary>
            Called immediately before the V8 context for a frame is released. No
            references to the context should be kept after this method is called.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderProcessHandler.OnUncaughtException(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefV8Context,Xilium.CefGlue.CefV8Exception,Xilium.CefGlue.CefV8StackTrace)">
            <summary>
            Called for global uncaught exceptions in a frame. Execution of this
            callback is disabled by default. To enable set
            CefSettings.uncaught_exception_stack_size &gt; 0.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderProcessHandler.OnFocusedNodeChanged(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefDomNode)">
            <summary>
            Called when a new node in the the browser gets focus. The |node| value may
            be empty if no specific node has gained focus. The node object passed to
            this method represents a snapshot of the DOM at the time this method is
            executed. DOM objects are only valid for the scope of this method. Do not
            keep references to or attempt to access any DOM objects outside the scope
            of this method.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRenderProcessHandler.OnProcessMessageReceived(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefProcessId,Xilium.CefGlue.CefProcessMessage)">
            <summary>
            Called when a new message is received from a different process. Return true
            if the message was handled or false otherwise. Do not keep a reference to
            or attempt to access the message outside of this callback.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefRequest">
            <summary>
            Class used to represent a web request. The methods of this class may be
            called on any thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequest.Create">
            <summary>
            Create a new CefRequest object.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefRequest.IsReadOnly">
            <summary>
            Returns true if this object is read-only.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefRequest.Url">
            <summary>
            Gets or sets the fully qualified URL.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefRequest.Method">
            <summary>
            Gets or sets the request method type.
            The value will default to POST if post data is provided and GET otherwise.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequest.SetReferrer(System.String,Xilium.CefGlue.CefReferrerPolicy)">
            <summary>
            Set the referrer URL and policy. If non-empty the referrer URL must be
            fully qualified with an HTTP or HTTPS scheme component. Any username,
            password or ref component will be removed.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefRequest.ReferrerURL">
            <summary>
            Get the referrer URL.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefRequest.ReferrerPolicy">
            <summary>
            Get the referrer policy.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefRequest.PostData">
            <summary>
            Get the post data.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequest.GetHeaderMap">
            <summary>
            Get the header values. Will not include the Referer value if any.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequest.SetHeaderMap(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Set the header values. If a Referer value exists in the header map it will
            be removed and ignored.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequest.GetHeaderByName(System.String)">
            <summary>
            Returns the first header value for |name| or an empty string if not found.
            Will not return the Referer value if any. Use GetHeaderMap instead if
            |name| might have multiple values.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequest.SetHeaderByName(System.String,System.String,System.Boolean)">
            <summary>
            Set the header |name| to |value|. If |overwrite| is true any existing
            values will be replaced with the new value. If |overwrite| is false any
            existing values will not be overwritten. The Referer value cannot be set
            using this method.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequest.Set(System.String,System.String,Xilium.CefGlue.CefPostData,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Set all values at one time.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefRequest.Options">
            <summary>
            Get the options used in combination with CefUrlRequest.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefRequest.FirstPartyForCookies">
            <summary>
            Gets or sets the URL to the first party for cookies used in combination with
            CefURLRequest.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefRequest.ResourceType">
            <summary>
            Get the resource type for this request. Only available in the browser
            process.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefRequest.TransitionType">
            <summary>
            Get the transition type for this request. Only available in the browser
            process and only applies to requests that represent a main frame or
            sub-frame navigation.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefRequest.Identifier">
            <summary>
            Returns the globally unique identifier for this request or 0 if not
            specified. Can be used by CefResourceRequestHandler implementations in the
            browser process to track a single request across multiple callbacks.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefRequestCallback">
            <summary>
            Callback interface used for asynchronous continuation of url requests.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestCallback.Continue(System.Boolean)">
            <summary>
            Continue the url request. If |allow| is true the request will be continued.
            Otherwise, the request will be canceled.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestCallback.Cancel">
            <summary>
            Cancel the url request.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefRequestContext">
            <summary>
            A request context provides request handling for a set of related browser
            or URL request objects. A request context can be specified when creating a
            new browser via the CefBrowserHost static factory methods or when creating a
            new URL request via the CefURLRequest static factory methods. Browser objects
            with different request contexts will never be hosted in the same render
            process. Browser objects with the same request context may or may not be
            hosted in the same render process depending on the process model. Browser
            objects created indirectly via the JavaScript window.open function or
            targeted links will share the same render process and the same request
            context as the source browser. When running in single-process mode there is
            only a single render process (the main process) and so all browsers created
            in single-process mode will share the same request context. This will be the
            first request context passed into a CefBrowserHost static factory method and
            all other request context objects will be ignored.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.GetGlobalContext">
            <summary>
            Returns the global context object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.CreateContext(Xilium.CefGlue.CefRequestContextSettings,Xilium.CefGlue.CefRequestContextHandler)">
            <summary>
            Creates a new context object with the specified |settings| and optional
            |handler|.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.CreateContext(Xilium.CefGlue.CefRequestContext,Xilium.CefGlue.CefRequestContextHandler)">
            <summary>
            Creates a new context object that shares storage with |other| and uses an
            optional |handler|.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.IsSame(Xilium.CefGlue.CefRequestContext)">
            <summary>
            Returns true if this object is pointing to the same context as |that|
            object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.IsSharingWith(Xilium.CefGlue.CefRequestContext)">
            <summary>
            Returns true if this object is sharing the same storage as |that| object.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefRequestContext.IsGlobal">
            <summary>
            Returns true if this object is the global context. The global context is
            used by default when creating a browser or URL request with a NULL context
            argument.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.GetHandler">
            <summary>
            Returns the handler for this context if any.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefRequestContext.CachePath">
            <summary>
            Returns the cache path for this object. If empty an "incognito mode"
            in-memory cache is being used.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.GetCookieManager(Xilium.CefGlue.CefCompletionCallback)">
            <summary>
            Returns the cookie manager for this object. If |callback| is non-NULL it
            will be executed asnychronously on the IO thread after the manager's
            storage has been initialized.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.RegisterSchemeHandlerFactory(System.String,System.String,Xilium.CefGlue.CefSchemeHandlerFactory)">
            <summary>
            Register a scheme handler factory for the specified |scheme_name| and
            optional |domain_name|. An empty |domain_name| value for a standard scheme
            will cause the factory to match all domain names. The |domain_name| value
            will be ignored for non-standard schemes. If |scheme_name| is a built-in
            scheme and no handler is returned by |factory| then the built-in scheme
            handler factory will be called. If |scheme_name| is a custom scheme then
            you must also implement the CefApp::OnRegisterCustomSchemes() method in all
            processes. This function may be called multiple times to change or remove
            the factory that matches the specified |scheme_name| and optional
            |domain_name|. Returns false if an error occurs. This function may be
            called on any thread in the browser process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.ClearSchemeHandlerFactories">
            <summary>
            Clear all registered scheme handler factories. Returns false on error. This
            function may be called on any thread in the browser process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.PurgePluginListCache(System.Boolean)">
            <summary>
            Tells all renderer processes associated with this context to throw away
            their plugin list cache. If |reload_pages| is true they will also reload
            all pages with plugins. CefRequestContextHandler::OnBeforePluginLoad may
            be called to rebuild the plugin list cache.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.HasPreference(System.String)">
            <summary>
            Returns true if a preference with the specified |name| exists. This method
            must be called on the browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.GetPreference(System.String)">
            <summary>
            Returns the value for the preference with the specified |name|. Returns
            NULL if the preference does not exist. The returned object contains a copy
            of the underlying preference value and modifications to the returned object
            will not modify the underlying preference value. This method must be called
            on the browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.GetAllPreferences(System.Boolean)">
            <summary>
            Returns all preferences as a dictionary. If |include_defaults| is true then
            preferences currently at their default value will be included. The returned
            object contains a copy of the underlying preference values and
            modifications to the returned object will not modify the underlying
            preference values. This method must be called on the browser process UI
            thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.CanSetPreference(System.String)">
            <summary>
            Returns true if the preference with the specified |name| can be modified
            using SetPreference. As one example preferences set via the command-line
            usually cannot be modified. This method must be called on the browser
            process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.SetPreference(System.String,Xilium.CefGlue.CefValue,System.String@)">
            <summary>
            Set the |value| associated with preference |name|. Returns true if the
            value is set successfully and false otherwise. If |value| is NULL the
            preference will be restored to its default value. If setting the preference
            fails then |error| will be populated with a detailed description of the
            problem. This method must be called on the browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.ClearCertificateExceptions(Xilium.CefGlue.CefCompletionCallback)">
            <summary>
            Clears all certificate exceptions that were added as part of handling
            CefRequestHandler::OnCertificateError(). If you call this it is
            recommended that you also call CloseAllConnections() or you risk not
            being prompted again for server certificates if you reconnect quickly.
            If |callback| is non-NULL it will be executed on the UI thread after
            completion.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.ClearHttpAuthCredentials(Xilium.CefGlue.CefCompletionCallback)">
            <summary>
            Clears all HTTP authentication credentials that were added as part of
            handling GetAuthCredentials. If |callback| is non-NULL it will be executed
            on the UI thread after completion.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.CloseAllConnections(Xilium.CefGlue.CefCompletionCallback)">
            <summary>
            Clears all active and idle connections that Chromium currently has.
            This is only recommended if you have released all other CEF objects but
            don't yet want to call CefShutdown(). If |callback| is non-NULL it will be
            executed on the UI thread after completion.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.ResolveHost(System.String,Xilium.CefGlue.CefResolveCallback)">
            <summary>
            Attempts to resolve |origin| to a list of associated IP addresses.
            |callback| will be executed on the UI thread after completion.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.LoadExtension(System.String,Xilium.CefGlue.CefDictionaryValue,Xilium.CefGlue.CefExtensionHandler)">
            <summary>
            Load an extension.
            If extension resources will be read from disk using the default load
            implementation then |root_directory| should be the absolute path to the
            extension resources directory and |manifest| should be NULL. If extension
            resources will be provided by the client (e.g. via CefRequestHandler and/or
            CefExtensionHandler) then |root_directory| should be a path component
            unique to the extension (if not absolute this will be internally prefixed
            with the PK_DIR_RESOURCES path) and |manifest| should contain the contents
            that would otherwise be read from the "manifest.json" file on disk.
            The loaded extension will be accessible in all contexts sharing the same
            storage (HasExtension returns true). However, only the context on which
            this method was called is considered the loader (DidLoadExtension returns
            true) and only the loader will receive CefRequestContextHandler callbacks
            for the extension.
            CefExtensionHandler::OnExtensionLoaded will be called on load success or
            CefExtensionHandler::OnExtensionLoadFailed will be called on load failure.
            If the extension specifies a background script via the "background"
            manifest key then CefExtensionHandler::OnBeforeBackgroundBrowser will be
            called to create the background browser. See that method for additional
            information about background scripts.
            For visible extension views the client application should evaluate the
            manifest to determine the correct extension URL to load and then pass that
            URL to the CefBrowserHost::CreateBrowser* function after the extension has
            loaded. For example, the client can look for the "browser_action" manifest
            key as documented at https://developer.chrome.com/extensions/browserAction.
            Extension URLs take the form "chrome-extension://&lt;extension_id&gt;/&lt;path&gt;".
            Browsers that host extensions differ from normal browsers as follows:
            - Can access chrome.* JavaScript APIs if allowed by the manifest. Visit
            chrome://extensions-support for the list of extension APIs currently
            supported by CEF.
            - Main frame navigation to non-extension content is blocked.
            - Pinch-zooming is disabled.
            - CefBrowserHost::GetExtension returns the hosted extension.
            - CefBrowserHost::IsBackgroundHost returns true for background hosts.
            See https://developer.chrome.com/extensions for extension implementation
            and usage documentation.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.DidLoadExtension(System.String)">
            <summary>
            Returns true if this context was used to load the extension identified by
            |extension_id|. Other contexts sharing the same storage will also have
            access to the extension (see HasExtension). This method must be called on
            the browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.HasExtension(System.String)">
            <summary>
            Returns true if this context has access to the extension identified by
            |extension_id|. This may not be the context that was used to load the
            extension (see DidLoadExtension). This method must be called on the browser
            process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.GetExtensions(System.String[]@)">
            <summary>
            Retrieve the list of all extensions that this context has access to (see
            HasExtension). |extension_ids| will be populated with the list of extension
            ID values. Returns true on success. This method must be called on the
            browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.GetExtension(System.String)">
            <summary>
            Returns the extension matching |extension_id| or NULL if no matching
            extension is accessible in this context (see HasExtension). This method
            must be called on the browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContext.GetMediaRouter">
            <summary>
            Returns the MediaRouter object associated with this context.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefRequestContextHandler">
            <summary>
            Implement this interface to provide handler implementations. The handler
            instance will not be released until all objects related to the context have
            been destroyed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContextHandler.OnRequestContextInitialized(Xilium.CefGlue.CefRequestContext)">
            <summary>
            Called on the browser process UI thread immediately after the request
            context has been initialized.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContextHandler.OnBeforePluginLoad(System.String,System.String,System.Boolean,System.String,Xilium.CefGlue.CefWebPluginInfo,Xilium.CefGlue.CefPluginPolicy@)">
            <summary>
            Called on multiple browser process threads before a plugin instance is
            loaded. |mime_type| is the mime type of the plugin that will be loaded.
            |plugin_url| is the content URL that the plugin will load and may be empty.
            |is_main_frame| will be true if the plugin is being loaded in the main
            (top-level) frame, |top_origin_url| is the URL for the top-level frame that
            contains the plugin when loading a specific plugin instance or empty when
            building the initial list of enabled plugins for 'navigator.plugins'
            JavaScript state. |plugin_info| includes additional information about the
            plugin that will be loaded. |plugin_policy| is the recommended policy.
            Modify |plugin_policy| and return true to change the policy. Return false
            to use the recommended policy. The default plugin policy can be set at
            runtime using the `--plugin-policy=[allow|detect|block]` command-line flag.
            Decisions to mark a plugin as disabled by setting |plugin_policy| to
            PLUGIN_POLICY_DISABLED may be cached when |top_origin_url| is empty. To
            purge the plugin list cache and potentially trigger new calls to this
            method call CefRequestContext::PurgePluginListCache.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestContextHandler.GetResourceRequestHandler(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefRequest,System.Boolean,System.Boolean,System.String,System.Boolean@)">
            <summary>
            Called on the browser process IO thread before a resource request is
            initiated. The |browser| and |frame| values represent the source of the
            request, and may be NULL for requests originating from service workers or
            CefURLRequest. |request| represents the request contents and cannot be
            modified in this callback. |is_navigation| will be true if the resource
            request is a navigation. |is_download| will be true if the resource request
            is a download. |request_initiator| is the origin (scheme + domain) of the
            page that initiated the request. Set |disable_default_handling| to true to
            disable default handling of the request, in which case it will need to be
            handled via CefResourceRequestHandler::GetResourceHandler or it will be
            canceled. To allow the resource load to proceed with default handling
            return NULL. To specify a handler for the resource return a
            CefResourceRequestHandler object. This method will not be called if the
            client associated with |browser| returns a non-NULL value from
            CefRequestHandler::GetResourceRequestHandler for the same request
            (identified by CefRequest::GetIdentifier).
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefRequestHandler">
            <summary>
            Implement this interface to handle events related to browser requests. The
            methods of this class will be called on the thread indicated.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestHandler.OnBeforeBrowse(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefRequest,System.Boolean,System.Boolean)">
            <summary>
            Called on the UI thread before browser navigation. Return true to cancel
            the navigation or false to allow the navigation to proceed. The |request|
            object cannot be modified in this callback.
            CefLoadHandler::OnLoadingStateChange will be called twice in all cases.
            If the navigation is allowed CefLoadHandler::OnLoadStart and
            CefLoadHandler::OnLoadEnd will be called. If the navigation is canceled
            CefLoadHandler::OnLoadError will be called with an |errorCode| value of
            ERR_ABORTED. The |user_gesture| value will be true if the browser
            navigated via explicit user gesture (e.g. clicking a link) or false if it
            navigated automatically (e.g. via the DomContentLoaded event).
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestHandler.OnOpenUrlFromTab(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,System.String,Xilium.CefGlue.CefWindowOpenDisposition,System.Boolean)">
            <summary>
            Called on the UI thread before OnBeforeBrowse in certain limited cases
            where navigating a new or different browser might be desirable. This
            includes user-initiated navigation that might open in a special way (e.g.
            links clicked via middle-click or ctrl + left-click) and certain types of
            cross-origin navigation initiated from the renderer process (e.g.
            navigating the top-level frame to/from a file URL). The |browser| and
            |frame| values represent the source of the navigation. The
            |target_disposition| value indicates where the user intended to navigate
            the browser based on standard Chromium behaviors (e.g. current tab,
            new tab, etc). The |user_gesture| value will be true if the browser
            navigated via explicit user gesture (e.g. clicking a link) or false if it
            navigated automatically (e.g. via the DomContentLoaded event). Return true
            to cancel the navigation or false to allow the navigation to proceed in the
            source browser's top-level frame.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestHandler.GetResourceRequestHandler(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefRequest,System.Boolean,System.Boolean,System.String,System.Boolean@)">
            <summary>
            Called on the browser process IO thread before a resource request is
            initiated. The |browser| and |frame| values represent the source of the
            request. |request| represents the request contents and cannot be modified
            in this callback. |is_navigation| will be true if the resource request is a
            navigation. |is_download| will be true if the resource request is a
            download. |request_initiator| is the origin (scheme + domain) of the page
            that initiated the request. Set |disable_default_handling| to true to
            disable default handling of the request, in which case it will need to be
            handled via CefResourceRequestHandler::GetResourceHandler or it will be
            canceled. To allow the resource load to proceed with default handling
            return NULL. To specify a handler for the resource return a
            CefResourceRequestHandler object. If this callback returns NULL the same
            method will be called on the associated CefRequestContextHandler, if any.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestHandler.GetAuthCredentials(Xilium.CefGlue.CefBrowser,System.String,System.Boolean,System.String,System.Int32,System.String,System.String,Xilium.CefGlue.CefAuthCallback)">
            <summary>
            Called on the IO thread when the browser needs credentials from the user.
            |origin_url| is the origin making this authentication request. |isProxy|
            indicates whether the host is a proxy server. |host| contains the hostname
            and |port| contains the port number. |realm| is the realm of the challenge
            and may be empty. |scheme| is the authentication scheme used, such as
            "basic" or "digest", and will be empty if the source of the request is an
            FTP server. Return true to continue the request and call
            CefAuthCallback::Continue() either in this method or at a later time when
            the authentication information is available. Return false to cancel the
            request immediately.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestHandler.OnQuotaRequest(Xilium.CefGlue.CefBrowser,System.String,System.Int64,Xilium.CefGlue.CefRequestCallback)">
            <summary>
            Called on the IO thread when JavaScript requests a specific storage quota
            size via the webkitStorageInfo.requestQuota function. |origin_url| is the
            origin of the page making the request. |new_size| is the requested quota
            size in bytes. Return true to continue the request and call
            CefRequestCallback::Continue() either in this method or at a later time to
            grant or deny the request. Return false to cancel the request immediately.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestHandler.OnCertificateError(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefErrorCode,System.String,Xilium.CefGlue.CefSslInfo,Xilium.CefGlue.CefRequestCallback)">
            <summary>
            Called on the UI thread to handle requests for URLs with an invalid
            SSL certificate. Return true and call CefRequestCallback::Continue() either
            in this method or at a later time to continue or cancel the request. Return
            false to cancel the request immediately. If
            CefSettings.ignore_certificate_errors is set all invalid certificates will
            be accepted without calling this method.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestHandler.OnSelectClientCertificate(Xilium.CefGlue.CefBrowser,System.Boolean,System.String,System.Int32,Xilium.CefGlue.CefX509Certificate[],Xilium.CefGlue.CefSelectClientCertificateCallback)">
            <summary>
            Called on the UI thread when a client certificate is being requested for
            authentication. Return false to use the default behavior and automatically
            select the first certificate available. Return true and call
            CefSelectClientCertificateCallback::Select either in this method or at a
            later time to select a certificate. Do not call Select or call it with NULL
            to continue without using any certificate. |isProxy| indicates whether the
            host is an HTTPS proxy or the origin server. |host| and |port| contains the
            hostname and port of the SSL server. |certificates| is the list of
            certificates to choose from; this list has already been pruned by Chromium
            so that it only contains certificates from issuers that the server trusts.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestHandler.OnPluginCrashed(Xilium.CefGlue.CefBrowser,System.String)">
            <summary>
            Called on the browser process UI thread when a plugin has crashed.
            |plugin_path| is the path of the plugin that crashed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestHandler.OnRenderViewReady(Xilium.CefGlue.CefBrowser)">
            <summary>
            Called on the browser process UI thread when the render view associated
            with |browser| is ready to receive/handle IPC messages in the render
            process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRequestHandler.OnRenderProcessTerminated(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefTerminationStatus)">
            <summary>
            Called on the browser process UI thread when the render process
            terminates unexpectedly. |status| indicates how the process
            terminated.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefResolveCallback">
            <summary>
            Callback interface for CefRequestContext::ResolveHost.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResolveCallback.OnResolveCompleted(Xilium.CefGlue.CefErrorCode,System.String[])">
            <summary>
            Called on the UI thread after the ResolveHost request has completed.
            |result| will be the result code. |resolved_ips| will be the list of
            resolved IP addresses or empty if the resolution failed.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefResourceBundle">
            <summary>
            Class used for retrieving resources from the resource bundle (*.pak) files
            loaded by CEF during startup or via the CefResourceBundleHandler returned
            from CefApp::GetResourceBundleHandler. See CefSettings for additional options
            related to resource bundle loading. The methods of this class may be called
            on any thread unless otherwise indicated.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceBundle.GetGlobal">
            <summary>
            Returns the global resource bundle instance.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceBundle.GetLocalizedString(System.Int32)">
            <summary>
            Returns the localized string for the specified |string_id| or an empty
            string if the value is not found. Include cef_pack_strings.h for a listing
            of valid string ID values.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceBundle.GetDataResource(System.Int32,System.Void*@,System.UIntPtr@)">
            <summary>
            Retrieves the contents of the specified scale independent |resource_id|.
            If the value is found then |data| and |data_size| will be populated and
            this method will return true. If the value is not found then this method
            will return false. The returned |data| pointer will remain resident in
            memory and should not be freed. Include cef_pack_resources.h for a listing
            of valid resource ID values.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceBundle.GetDataResourceForScale(System.Int32,Xilium.CefGlue.CefScaleFactor,System.Void*@,System.UIntPtr@)">
            <summary>
            Retrieves the contents of the specified |resource_id| nearest the scale
            factor |scale_factor|. Use a |scale_factor| value of SCALE_FACTOR_NONE for
            scale independent resources or call GetDataResource instead. If the value
            is found then |data| and |data_size| will be populated and this method will
            return true. If the value is not found then this method will return false.
            The returned |data| pointer will remain resident in memory and should not
            be freed. Include cef_pack_resources.h for a listing of valid resource ID
            values.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefResourceBundleHandler">
            <summary>
            Class used to implement a custom resource bundle interface. See CefSettings
            for additional options related to resource bundle loading. The methods of
            this class may be called on multiple threads.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceBundleHandler.GetLocalizedString(System.Int32,System.String@)">
            <summary>
            Called to retrieve a localized translation for the specified |string_id|.
            To provide the translation set |string| to the translation string and
            return true. To use the default translation return false. Include
            cef_pack_strings.h for a listing of valid string ID values.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceBundleHandler.GetDataResource(System.Int32,System.Void*@,System.UIntPtr@)">
            <summary>
            Called to retrieve data for the specified scale independent |resource_id|.
            To provide the resource data set |data| and |data_size| to the data pointer
            and size respectively and return true. To use the default resource data
            return false. The resource data will not be copied and must remain resident
            in memory. Include cef_pack_resources.h for a listing of valid resource ID
            values.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceBundleHandler.GetDataResourceForScale(System.Int32,Xilium.CefGlue.CefScaleFactor,System.Void*@,System.UIntPtr@)">
            <summary>
            Called to retrieve data for the specified |resource_id| nearest the scale
            factor |scale_factor|. To provide the resource data set |data| and
            |data_size| to the data pointer and size respectively and return true. To
            use the default resource data return false. The resource data will not be
            copied and must remain resident in memory. Include cef_pack_resources.h for
            a listing of valid resource ID values.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefResourceHandler">
            <summary>
            Class used to implement a custom request handler interface. The methods of
            this class will be called on the IO thread unless otherwise indicated.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceHandler.Open(Xilium.CefGlue.CefRequest,System.Boolean@,Xilium.CefGlue.CefCallback)">
            <summary>
            Open the response stream. To handle the request immediately set
            |handle_request| to true and return true. To decide at a later time set
            |handle_request| to false, return true, and execute |callback| to continue
            or cancel the request. To cancel the request immediately set
            |handle_request| to true and return false. This method will be called in
            sequence but not from a dedicated thread. For backwards compatibility set
            |handle_request| to false and return false and the ProcessRequest method
            will be called.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceHandler.ProcessRequest(Xilium.CefGlue.CefRequest,Xilium.CefGlue.CefCallback)">
            <summary>
            Begin processing the request. To handle the request return true and call
            CefCallback::Continue() once the response header information is available
            (CefCallback::Continue() can also be called from inside this method if
            header information is available immediately). To cancel the request return
            false.
            WARNING: This method is deprecated. Use Open instead.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceHandler.GetResponseHeaders(Xilium.CefGlue.CefResponse,System.Int64@,System.String@)">
            <summary>
            Retrieve response header information. If the response length is not known
            set |response_length| to -1 and ReadResponse() will be called until it
            returns false. If the response length is known set |response_length|
            to a positive value and ReadResponse() will be called until it returns
            false or the specified number of bytes have been read. Use the |response|
            object to set the mime type, http status code and other optional header
            values. To redirect the request to a new URL set |redirectUrl| to the new
            URL. |redirectUrl| can be either a relative or fully qualified URL.
            It is also possible to set |response| to a redirect http status code
            and pass the new URL via a Location header. Likewise with |redirectUrl| it
            is valid to set a relative or fully qualified URL as the Location header
            value. If an error occured while setting up the request you can call
            SetError() on |response| to indicate the error condition.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceHandler.Skip(System.Int64,System.Int64@,Xilium.CefGlue.CefResourceSkipCallback)">
            <summary>
            Skip response data when requested by a Range header. Skip over and discard
            |bytes_to_skip| bytes of response data. If data is available immediately
            set |bytes_skipped| to the number of bytes skipped and return true. To
            read the data at a later time set |bytes_skipped| to 0, return true and
            execute |callback| when the data is available. To indicate failure set
            |bytes_skipped| to &lt; 0 (e.g. -2 for ERR_FAILED) and return false. This
            method will be called in sequence but not from a dedicated thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceHandler.Read(System.IntPtr,System.Int32,System.Int32@,Xilium.CefGlue.CefResourceReadCallback)">
            <summary>
            Read response data. If data is available immediately copy up to
            |bytes_to_read| bytes into |data_out|, set |bytes_read| to the number of
            bytes copied, and return true. To read the data at a later time keep a
            pointer to |data_out|, set |bytes_read| to 0, return true and execute
            |callback| when the data is available (|data_out| will remain valid until
            the callback is executed). To indicate response completion set |bytes_read|
            to 0 and return false. To indicate failure set |bytes_read| to &lt; 0 (e.g. -2
            for ERR_FAILED) and return false. This method will be called in sequence
            but not from a dedicated thread. For backwards compatibility set
            |bytes_read| to -1 and return false and the ReadResponse method will be
            called.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceHandler.ReadResponse(System.IO.Stream,System.Int32,System.Int32@,Xilium.CefGlue.CefCallback)">
            <summary>
            Read response data. If data is available immediately copy up to
            |bytes_to_read| bytes into |data_out|, set |bytes_read| to the number of
            bytes copied, and return true. To read the data at a later time set
            |bytes_read| to 0, return true and call CefCallback::Continue() when the
            data is available. To indicate response completion return false.
            WARNING: This method is deprecated. Use Skip and Read instead.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceHandler.Cancel">
            <summary>
            Request processing has been canceled.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefResourceReadCallback">
            <summary>
            Callback for asynchronous continuation of CefResourceHandler::Read().
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceReadCallback.Continue(System.Int32)">
            <summary>
            Callback for asynchronous continuation of Read(). If |bytes_read| == 0
            the response will be considered complete. If |bytes_read| > 0 then Read()
            will be called again until the request is complete (based on either the
            result or the expected content length). If |bytes_read| &lt; 0 then the
            request will fail and the |bytes_read| value will be treated as the error
            code.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefResourceRequestHandler">
            <summary>
            Implement this interface to handle events related to browser requests. The
            methods of this class will be called on the IO thread unless otherwise
            indicated.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceRequestHandler.GetCookieAccessFilter(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefRequest)">
            <summary>
            Called on the IO thread before a resource request is loaded. The |browser|
            and |frame| values represent the source of the request, and may be NULL for
            requests originating from service workers or CefURLRequest. To optionally
            filter cookies for the request return a CefCookieAccessFilter object. The
            |request| object cannot not be modified in this callback.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceRequestHandler.OnBeforeResourceLoad(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefRequest,Xilium.CefGlue.CefRequestCallback)">
            <summary>
            Called on the IO thread before a resource request is loaded. The |browser|
            and |frame| values represent the source of the request, and may be NULL for
            requests originating from service workers or CefURLRequest. To redirect or
            change the resource load optionally modify |request|. Modification of the
            request URL will be treated as a redirect. Return RV_CONTINUE to continue
            the request immediately. Return RV_CONTINUE_ASYNC and call
            CefRequestCallback:: Continue() at a later time to continue or cancel the
            request asynchronously. Return RV_CANCEL to cancel the request immediately.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceRequestHandler.GetResourceHandler(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefRequest)">
            <summary>
            Called on the IO thread before a resource is loaded. The |browser| and
            |frame| values represent the source of the request, and may be NULL for
            requests originating from service workers or CefURLRequest. To allow the
            resource to load using the default network loader return NULL. To specify a
            handler for the resource return a CefResourceHandler object. The |request|
            object cannot not be modified in this callback.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceRequestHandler.OnResourceRedirect(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefRequest,Xilium.CefGlue.CefResponse,System.String@)">
            <summary>
            Called on the IO thread when a resource load is redirected. The |browser|
            and |frame| values represent the source of the request, and may be NULL for
            requests originating from service workers or CefURLRequest. The |request|
            parameter will contain the old URL and other request-related information.
            The |response| parameter will contain the response that resulted in the
            redirect. The |new_url| parameter will contain the new URL and can be
            changed if desired. The |request| and |response| objects cannot be modified
            in this callback.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceRequestHandler.OnResourceResponse(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefRequest,Xilium.CefGlue.CefResponse)">
            <summary>
            Called on the IO thread when a resource response is received. The |browser|
            and |frame| values represent the source of the request, and may be NULL for
            requests originating from service workers or CefURLRequest. To allow the
            resource load to proceed without modification return false. To redirect or
            retry the resource load optionally modify |request| and return true.
            Modification of the request URL will be treated as a redirect. Requests
            handled using the default network loader cannot be redirected in this
            callback. The |response| object cannot be modified in this callback.
            WARNING: Redirecting using this method is deprecated. Use
            OnBeforeResourceLoad or GetResourceHandler to perform redirects.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceRequestHandler.GetResourceResponseFilter(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefRequest,Xilium.CefGlue.CefResponse)">
            <summary>
            Called on the IO thread to optionally filter resource response content. The
            |browser| and |frame| values represent the source of the request, and may
            be NULL for requests originating from service workers or CefURLRequest.
            |request| and |response| represent the request and response respectively
            and cannot be modified in this callback.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceRequestHandler.OnResourceLoadComplete(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefRequest,Xilium.CefGlue.CefResponse,Xilium.CefGlue.CefUrlRequestStatus,System.Int64)">
            <summary>
            Called on the IO thread when a resource load has completed. The |browser|
            and |frame| values represent the source of the request, and may be NULL for
            requests originating from service workers or CefURLRequest. |request| and
            |response| represent the request and response respectively and cannot be
            modified in this callback. |status| indicates the load completion status.
            |received_content_length| is the number of response bytes actually read.
            This method will be called for all requests, including requests that are
            aborted due to CEF shutdown or destruction of the associated browser. In
            cases where the associated browser is destroyed this callback may arrive
            after the CefLifeSpanHandler::OnBeforeClose callback for that browser. The
            CefFrame::IsValid method can be used to test for this situation, and care
            should be taken not to call |browser| or |frame| methods that modify state
            (like LoadURL, SendProcessMessage, etc.) if the frame is invalid.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceRequestHandler.OnProtocolExecution(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefRequest,System.Boolean@)">
            <summary>
            Called on the IO thread to handle requests for URLs with an unknown
            protocol component. The |browser| and |frame| values represent the source
            of the request, and may be NULL for requests originating from service
            workers or CefURLRequest. |request| cannot be modified in this callback.
            Set |allow_os_execution| to true to attempt execution via the registered OS
            protocol handler, if any.
            SECURITY WARNING: YOU SHOULD USE THIS METHOD TO ENFORCE RESTRICTIONS BASED
            ON SCHEME, HOST OR OTHER URL ANALYSIS BEFORE ALLOWING OS EXECUTION.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefResourceSkipCallback">
            <summary>
            Callback for asynchronous continuation of CefResourceHandler::Skip().
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResourceSkipCallback.Continue(System.Int64)">
            <summary>
            Callback for asynchronous continuation of Skip(). If |bytes_skipped| > 0
            then either Skip() will be called again until the requested number of
            bytes have been skipped or the request will proceed. If |bytes_skipped|
            &lt;= 0 the request will fail with ERR_REQUEST_RANGE_NOT_SATISFIABLE.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefResponse">
            <summary>
            Class used to represent a web response. The methods of this class may be
            called on any thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResponse.Create">
            <summary>
            Create a new CefResponse object.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefResponse.IsReadOnly">
            <summary>
            Returns true if this object is read-only.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefResponse.Error">
            <summary>
            Gets or sets the response error code.
            Returns ERR_NONE if there was no error.
            This can be used by custom scheme handlers to return errors during initial request processing.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefResponse.Status">
            <summary>
            Gets or sets the response status code.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefResponse.StatusText">
            <summary>
            Get the response status text.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefResponse.MimeType">
            <summary>
            Gets or sets the response mime type.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefResponse.Charset">
            <summary>
            Gets or sets the response charset.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResponse.GetHeaderByName(System.String)">
            <summary>
            Get the value for the specified response header field.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResponse.SetHeaderByName(System.String,System.String,System.Boolean)">
            <summary>
            Set the header |name| to |value|. If |overwrite| is true any existing
            values will be replaced with the new value. If |overwrite| is false any
            existing values will not be overwritten.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResponse.GetHeaderMap">
            <summary>
            Get all response header fields.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResponse.SetHeaderMap(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Set all response header fields.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefResponse.Url">
            <summary>
            Gets or sets the resolved URL after redirects or changed as a result of HSTS.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefResponseFilter">
            <summary>
            Implement this interface to filter resource response content. The methods of
            this class will be called on the browser process IO thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResponseFilter.InitFilter">
            <summary>
            Initialize the response filter. Will only be called a single time. The
            filter will not be installed if this method returns false.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefResponseFilter.Filter(System.IO.UnmanagedMemoryStream,System.Int64,System.Int64@,System.IO.UnmanagedMemoryStream,System.Int64,System.Int64@)">
             <summary>
             Called to filter a chunk of data. Expected usage is as follows:
            
              A. Read input data from |data_in| and set |data_in_read| to the number of
                 bytes that were read up to a maximum of |data_in_size|. |data_in| will
                 be NULL if |data_in_size| is zero.
              B. Write filtered output data to |data_out| and set |data_out_written| to
                 the number of bytes that were written up to a maximum of
                 |data_out_size|. If no output data was written then all data must be
                 read from |data_in| (user must set |data_in_read| = |data_in_size|).
              C. Return RESPONSE_FILTER_DONE if all output data was written or
                 RESPONSE_FILTER_NEED_MORE_DATA if output data is still pending.
            
             This method will be called repeatedly until the input buffer has been
             fully read (user sets |data_in_read| = |data_in_size|) and there is no
             more input data to filter (the resource response is complete). This method
             may then be called an additional time with an empty input buffer if the
             user filled the output buffer (set |data_out_written| = |data_out_size|)
             and returned RESPONSE_FILTER_NEED_MORE_DATA to indicate that output data is
             still pending.
            
             Calls to this method will stop when one of the following conditions is met:
            
              A. There is no more input data to filter (the resource response is
                 complete) and the user sets |data_out_written| = 0 or returns
                 RESPONSE_FILTER_DONE to indicate that all data has been written, or;
              B. The user returns RESPONSE_FILTER_ERROR to indicate an error.
            
             Do not keep a reference to the buffers passed to this method.
             </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefRunContextMenuCallback">
            <summary>
            Callback interface used for continuation of custom context menu display.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRunContextMenuCallback.Continue(System.Int32,Xilium.CefGlue.CefEventFlags)">
            <summary>
            Complete context menu display by selecting the specified |command_id| and
            |event_flags|.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRunContextMenuCallback.Cancel">
            <summary>
            Cancel context menu display.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefRunFileDialogCallback">
            <summary>
            Callback interface for CefBrowserHost::RunFileDialog. The methods of this
            class will be called on the browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefRunFileDialogCallback.OnFileDialogDismissed(System.Int32,System.String[])">
            <summary>
            Called asynchronously after the file dialog is dismissed.
            |selected_accept_filter| is the 0-based index of the value selected from
            the accept filters array passed to CefBrowserHost::RunFileDialog.
            |file_paths| will be a single value or a list of values depending on the
            dialog mode. If the selection was cancelled |file_paths| will be empty.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefSchemeHandlerFactory">
            <summary>
            Class that creates CefResourceHandler instances for handling scheme requests.
            The methods of this class will always be called on the IO thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefSchemeHandlerFactory.Create(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,System.String,Xilium.CefGlue.CefRequest)">
            <summary>
            Return a new resource handler instance to handle the request or an empty
            reference to allow default handling of the request. |browser| and |frame|
            will be the browser window and frame respectively that originated the
            request or NULL if the request did not originate from a browser window
            (for example, if the request came from CefURLRequest). The |request| object
            passed to this method cannot be modified.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefSchemeRegistrar">
            <summary>
            Class that manages custom scheme registrations.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefSchemeRegistrar.AddCustomScheme(System.String,Xilium.CefGlue.CefSchemeOptions)">
            <summary>
            Register a custom scheme. This method should not be called for the built-in
            HTTP, HTTPS, FILE, FTP, ABOUT and DATA schemes.
            See cef_scheme_options_t for possible values for |options|.
            This function may be called on any thread. It should only be called once
            per unique |scheme_name| value. If |scheme_name| is already registered or
            if an error occurs this method will return false.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefSelectClientCertificateCallback">
            <summary>
            Callback interface used to select a client certificate for authentication.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefSelectClientCertificateCallback.Select(Xilium.CefGlue.CefX509Certificate)">
            <summary>
            Chooses the specified certificate for client certificate authentication.
            NULL value means that no client certificate should be used.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefServer">
            <summary>
            Class representing a server that supports HTTP and WebSocket requests. Server
            capacity is limited and is intended to handle only a small number of
            simultaneous connections (e.g. for communicating between applications on
            localhost). The methods of this class are safe to call from any thread in the
            brower process unless otherwise indicated.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefServer.Create(System.String,System.UInt16,System.Int32,Xilium.CefGlue.CefServerHandler)">
            <summary>
            Create a new server that binds to |address| and |port|. |address| must be a
            valid IPv4 or IPv6 address (e.g. 127.0.0.1 or ::1) and |port| must be a
            port number outside of the reserved range (e.g. between 1025 and 65535 on
            most platforms). |backlog| is the maximum number of pending connections.
            A new thread will be created for each CreateServer call (the "dedicated
            server thread"). It is therefore recommended to use a different
            CefServerHandler instance for each CreateServer call to avoid thread safety
            issues in the CefServerHandler implementation. The
            CefServerHandler::OnServerCreated method will be called on the dedicated
            server thread to report success or failure. See
            CefServerHandler::OnServerCreated documentation for a description of server
            lifespan.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefServer.GetTaskRunner">
            <summary>
            Returns the task runner for the dedicated server thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefServer.Shutdown">
            <summary>
            Stop the server and shut down the dedicated server thread. See
            CefServerHandler::OnServerCreated documentation for a description of
            server lifespan.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefServer.IsRunning">
            <summary>
            Returns true if the server is currently running and accepting incoming
            connections. See CefServerHandler::OnServerCreated documentation for a
            description of server lifespan. This method must be called on the dedicated
            server thread.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefServer.Address">
            <summary>
            Returns the server address including the port number.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefServer.HasConnection">
            <summary>
            Returns true if the server currently has a connection. This method must be
            called on the dedicated server thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefServer.IsValidConnection(System.Int32)">
            <summary>
            Returns true if |connection_id| represents a valid connection. This method
            must be called on the dedicated server thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefServer.SendHttp200Response(System.Int32,System.String,System.IntPtr,System.Int64)">
            <summary>
            Send an HTTP 200 "OK" response to the connection identified by
            |connection_id|. |content_type| is the response content type (e.g.
            "text/html"), |data| is the response content, and |data_size| is the size
            of |data| in bytes. The contents of |data| will be copied. The connection
            will be closed automatically after the response is sent.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefServer.SendHttp404Response(System.Int32)">
            <summary>
            Send an HTTP 404 "Not Found" response to the connection identified by
            |connection_id|. The connection will be closed automatically after the
            response is sent.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefServer.SendHttp500Response(System.Int32,System.String)">
            <summary>
            Send an HTTP 500 "Internal Server Error" response to the connection
            identified by |connection_id|. |error_message| is the associated error
            message. The connection will be closed automatically after the response is
            sent.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefServer.SendHttpResponse(System.Int32,System.Int32,System.String,System.Int64,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Send a custom HTTP response to the connection identified by
            |connection_id|. |response_code| is the HTTP response code sent in the
            status line (e.g. 200), |content_type| is the response content type sent
            as the "Content-Type" header (e.g. "text/html"), |content_length| is the
            expected content length, and |extra_headers| is the map of extra response
            headers. If |content_length| is >= 0 then the "Content-Length" header will
            be sent. If |content_length| is 0 then no content is expected and the
            connection will be closed automatically after the response is sent. If
            |content_length| is &lt; 0 then no "Content-Length" header will be sent and
            the client will continue reading until the connection is closed. Use the
            SendRawData method to send the content, if applicable, and call
            CloseConnection after all content has been sent.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefServer.SendRawData(System.Int32,System.IntPtr,System.Int64)">
            <summary>
            Send raw data directly to the connection identified by |connection_id|.
            |data| is the raw data and |data_size| is the size of |data| in bytes.
            The contents of |data| will be copied. No validation of |data| is
            performed internally so the client should be careful to send the amount
            indicated by the "Content-Length" header, if specified. See
            SendHttpResponse documentation for intended usage.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefServer.CloseConnection(System.Int32)">
            <summary>
            Close the connection identified by |connection_id|. See SendHttpResponse
            documentation for intended usage.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefServer.SendWebSocketMessage(System.Int32,System.IntPtr,System.Int64)">
            <summary>
            Send a WebSocket message to the connection identified by |connection_id|.
            |data| is the response content and |data_size| is the size of |data| in
            bytes. The contents of |data| will be copied. See
            CefServerHandler::OnWebSocketRequest documentation for intended usage.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefServerHandler">
            <summary>
            Implement this interface to handle HTTP server requests. A new thread will be
            created for each CefServer::CreateServer call (the "dedicated server
            thread"), and the methods of this class will be called on that thread. It is
            therefore recommended to use a different CefServerHandler instance for each
            CefServer::CreateServer call to avoid thread safety issues in the
            CefServerHandler implementation.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefServerHandler.OnServerCreated(Xilium.CefGlue.CefServer)">
            <summary>
            Called when |server| is created. If the server was started successfully
            then CefServer::IsRunning will return true. The server will continue
            running until CefServer::Shutdown is called, after which time
            OnServerDestroyed will be called. If the server failed to start then
            OnServerDestroyed will be called immediately after this method returns.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefServerHandler.OnServerDestroyed(Xilium.CefGlue.CefServer)">
            <summary>
            Called when |server| is destroyed. The server thread will be stopped after
            this method returns. The client should release any references to |server|
            when this method is called. See OnServerCreated documentation for a
            description of server lifespan.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefServerHandler.OnClientConnected(Xilium.CefGlue.CefServer,System.Int32)">
            <summary>
            Called when a client connects to |server|. |connection_id| uniquely
            identifies the connection. Each call to this method will have a matching
            call to OnClientDisconnected.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefServerHandler.OnClientDisconnected(Xilium.CefGlue.CefServer,System.Int32)">
            <summary>
            Called when a client disconnects from |server|. |connection_id| uniquely
            identifies the connection. The client should release any data associated
            with |connection_id| when this method is called and |connection_id| should
            no longer be passed to CefServer methods. Disconnects can originate from
            either the client or the server. For example, the server will disconnect
            automatically after a CefServer::SendHttpXXXResponse method is called.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefServerHandler.OnHttpRequest(Xilium.CefGlue.CefServer,System.Int32,System.String,Xilium.CefGlue.CefRequest)">
            <summary>
            Called when |server| receives an HTTP request. |connection_id| uniquely
            identifies the connection, |client_address| is the requesting IPv4 or IPv6
            client address including port number, and |request| contains the request
            contents (URL, method, headers and optional POST data). Call CefServer
            methods either synchronously or asynchronusly to send a response.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefServerHandler.OnWebSocketRequest(Xilium.CefGlue.CefServer,System.Int32,System.String,Xilium.CefGlue.CefRequest,Xilium.CefGlue.CefCallback)">
            <summary>
            Called when |server| receives a WebSocket request. |connection_id| uniquely
            identifies the connection, |client_address| is the requesting IPv4 or
            IPv6 client address including port number, and |request| contains the
            request contents (URL, method, headers and optional POST data). Execute
            |callback| either synchronously or asynchronously to accept or decline the
            WebSocket connection. If the request is accepted then OnWebSocketConnected
            will be called after the WebSocket has connected and incoming messages will
            be delivered to the OnWebSocketMessage callback. If the request is declined
            then the client will be disconnected and OnClientDisconnected will be
            called. Call the CefServer::SendWebSocketMessage method after receiving the
            OnWebSocketConnected callback to respond with WebSocket messages.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefServerHandler.OnWebSocketConnected(Xilium.CefGlue.CefServer,System.Int32)">
            <summary>
            Called after the client has accepted the WebSocket connection for |server|
            and |connection_id| via the OnWebSocketRequest callback. See
            OnWebSocketRequest documentation for intended usage.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefServerHandler.OnWebSocketMessage(Xilium.CefGlue.CefServer,System.Int32,System.IntPtr,System.Int64)">
            <summary>
            Called when |server| receives an WebSocket message. |connection_id|
            uniquely identifies the connection, |data| is the message content and
            |data_size| is the size of |data| in bytes. Do not keep a reference to
            |data| outside of this method. See OnWebSocketRequest documentation for
            intended usage.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefSetCookieCallback">
            <summary>
            Interface to implement to be notified of asynchronous completion via
            CefCookieManager::SetCookie().
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefSetCookieCallback.OnComplete(System.Boolean)">
            <summary>
            Method that will be called upon completion. |success| will be true if the
            cookie was set successfully.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefSslInfo">
            <summary>
            Class representing SSL information.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSslInfo.CertStatus">
            <summary>
            Returns a bitmask containing any and all problems verifying the server
            certificate.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefSslInfo.GetX509Certificate">
            <summary>
            Returns the X.509 certificate.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefSslStatus">
            <summary>
            Class representing the SSL information for a navigation entry.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSslStatus.IsSecureConnection">
            <summary>
            Returns true if the status is related to a secure SSL/TLS connection.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSslStatus.CertStatus">
            <summary>
            Returns a bitmask containing any and all problems verifying the server
            certificate.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSslStatus.SslVersion">
            <summary>
            Returns the SSL version used for the SSL connection.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSslStatus.ContentStatus">
            <summary>
            Returns a bitmask containing the page security content status.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefSslStatus.GetX509Certificate">
            <summary>
            Returns the X.509 certificate.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefStreamReader">
            <summary>
            Class used to read data from a stream. The methods of this class may be
            called on any thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefStreamReader.Create(System.String)">
            <summary>
            Create a new CefStreamReader object from a file.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefStreamReader.Create(System.Void*,System.Int64)">
            <summary>
            Create a new CefStreamReader object from data.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefStreamReader.Create(Xilium.CefGlue.CefReadHandler)">
            <summary>
            Create a new CefStreamReader object from a custom handler.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefStreamReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read raw binary data.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefStreamReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek to the specified offset position. |whence| may be any one of
            SEEK_CUR, SEEK_END or SEEK_SET. Returns zero on success and non-zero on
            failure.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefStreamReader.Tell">
            <summary>
            Return the current offset position.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefStreamReader.Eof">
            <summary>
            Return non-zero if at end of file.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefStreamReader.MayBlock">
            <summary>
            Returns true if this reader performs work like accessing the file system
            which may block. Used as a hint for determining the thread to access the
            reader from.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefStreamWriter">
            <summary>
            Class used to write data to a stream. The methods of this class may be called
            on any thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefStreamWriter.Create(System.String)">
            <summary>
            Create a new CefStreamWriter object for a file.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefStreamWriter.Create(Xilium.CefGlue.CefWriteHandler)">
            <summary>
            Create a new CefStreamWriter object for a custom handler.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefStreamWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write raw binary data.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefStreamWriter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek to the specified offset position. |whence| may be any one of
            SEEK_CUR, SEEK_END or SEEK_SET. Returns zero on success and non-zero on
            failure.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefStreamWriter.Tell">
            <summary>
            Return the current offset position.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefStreamWriter.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefStreamWriter.MayBlock">
            <summary>
            Returns true if this writer performs work like accessing the file system
            which may block. Used as a hint for determining the thread to access the
            writer from.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefStringVisitor">
            <summary>
            Implement this interface to receive string values asynchronously.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefStringVisitor.Visit(System.String)">
            <summary>
            Method that will be executed.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefTask">
            <summary>
            Implement this interface for asynchronous task execution. If the task is
            posted successfully and if the associated message loop is still running then
            the Execute() method will be called on the target thread. If the task fails
            to post then the task object may be destroyed on the source thread instead of
            the target thread. For this reason be cautious when performing work in the
            task object destructor.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefTask.Execute">
            <summary>
            Method that will be executed on the target thread.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefTaskRunner">
            <summary>
            Class that asynchronously executes tasks on the associated thread. It is safe
            to call the methods of this class on any thread.
            CEF maintains multiple internal threads that are used for handling different
            types of tasks in different processes. The cef_thread_id_t definitions in
            cef_types.h list the common CEF threads. Task runners are also available for
            other CEF threads as appropriate (for example, V8 WebWorker threads).
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefTaskRunner.GetForCurrentThread">
            <summary>
            Returns the task runner for the current thread. Only CEF threads will have
            task runners. An empty reference will be returned if this method is called
            on an invalid thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefTaskRunner.GetForThread(Xilium.CefGlue.CefThreadId)">
            <summary>
            Returns the task runner for the specified CEF thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefTaskRunner.IsSame(Xilium.CefGlue.CefTaskRunner)">
            <summary>
            Returns true if this object is pointing to the same task runner as |that|
            object.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefTaskRunner.BelongsToCurrentThread">
            <summary>
            Returns true if this task runner belongs to the current thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefTaskRunner.BelongsToThread(Xilium.CefGlue.CefThreadId)">
            <summary>
            Returns true if this task runner is for the specified CEF thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefTaskRunner.PostTask(Xilium.CefGlue.CefTask)">
            <summary>
            Post a task for execution on the thread associated with this task runner.
            Execution will occur asynchronously.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefTaskRunner.PostDelayedTask(Xilium.CefGlue.CefTask,System.Int64)">
            <summary>
            Post a task for delayed execution on the thread associated with this task
            runner. Execution will occur asynchronously. Delayed tasks are not
            supported on V8 WebWorker threads and will be executed without the
            specified delay.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefUrlRequest">
            <summary>
            Class used to make a URL request. URL requests are not associated with a
            browser instance so no CefClient callbacks will be executed. URL requests
            can be created on any valid CEF thread in either the browser or render
            process. Once created the methods of the URL request object must be accessed
            on the same thread that created it.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefUrlRequest.Create(Xilium.CefGlue.CefRequest,Xilium.CefGlue.CefUrlRequestClient,Xilium.CefGlue.CefRequestContext)">
            <summary>
            Create a new URL request that is not associated with a specific browser or
            frame. Use CefFrame::CreateURLRequest instead if you want the request to
            have this association, in which case it may be handled differently (see
            documentation on that method). Requests may originate from the both browser
            process and the render process.
            For requests originating from the browser process:
            - It may be intercepted by the client via CefResourceRequestHandler or
            CefSchemeHandlerFactory.
            - POST data may only contain only a single element of type PDE_TYPE_FILE
            or PDE_TYPE_BYTES.
            - If |request_context| is empty the global request context will be used.
            For requests originating from the render process:
            - It cannot be intercepted by the client so only http(s) and blob schemes
            are supported.
            - POST data may only contain a single element of type PDE_TYPE_BYTES.
            - The |request_context| parameter must be NULL.
            The |request| object will be marked as read-only after calling this method.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefUrlRequest.GetRequest">
            <summary>
            Returns the request object used to create this URL request. The returned
            object is read-only and should not be modified.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefUrlRequest.GetClient">
            <summary>
            Returns the client.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefUrlRequest.RequestStatus">
            <summary>
            Returns the request status.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefUrlRequest.RequestError">
            <summary>
            Returns the request error if status is UR_CANCELED or UR_FAILED, or 0
            otherwise.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefUrlRequest.GetResponse">
            <summary>
            Returns the response, or NULL if no response information is available.
            Response information will only be available after the upload has completed.
            The returned object is read-only and should not be modified.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefUrlRequest.ResponseWasCached">
            <summary>
            Returns true if the response body was served from the cache. This includes
            responses for which revalidation was required.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefUrlRequest.Cancel">
            <summary>
            Cancel the request.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefUrlRequestClient">
            <summary>
            Interface that should be implemented by the CefURLRequest client. The
            methods of this class will be called on the same thread that created the
            request unless otherwise documented.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefUrlRequestClient.OnRequestComplete(Xilium.CefGlue.CefUrlRequest)">
            <summary>
            Notifies the client that the request has completed. Use the
            CefURLRequest::GetRequestStatus method to determine if the request was
            successful or not.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefUrlRequestClient.OnUploadProgress(Xilium.CefGlue.CefUrlRequest,System.Int64,System.Int64)">
            <summary>
            Notifies the client of upload progress. |current| denotes the number of
            bytes sent so far and |total| is the total size of uploading data (or -1 if
            chunked upload is enabled). This method will only be called if the
            UR_FLAG_REPORT_UPLOAD_PROGRESS flag is set on the request.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefUrlRequestClient.OnDownloadProgress(Xilium.CefGlue.CefUrlRequest,System.Int64,System.Int64)">
            <summary>
            Notifies the client of download progress. |current| denotes the number of
            bytes received up to the call and |total| is the expected total size of the
            response (or -1 if not determined).
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefUrlRequestClient.OnDownloadData(Xilium.CefGlue.CefUrlRequest,System.IO.Stream)">
            <summary>
            Called when some part of the response is read. |data| contains the current
            bytes received since the last call. This method will not be called if the
            UR_FLAG_NO_DOWNLOAD_DATA flag is set on the request.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefUrlRequestClient.GetAuthCredentials(System.Boolean,System.String,System.Int32,System.String,System.String,Xilium.CefGlue.CefAuthCallback)">
            <summary>
            Called on the IO thread when the browser needs credentials from the user.
            |isProxy| indicates whether the host is a proxy server. |host| contains the
            hostname and |port| contains the port number. Return true to continue the
            request and call CefAuthCallback::Continue() when the authentication
            information is available. If the request has an associated browser/frame
            then returning false will result in a call to GetAuthCredentials on the
            CefRequestHandler associated with that browser, if any. Otherwise,
            returning false will cancel the request immediately. This method will only
            be called for requests initiated from the browser process.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefV8Accessor">
            <summary>
            Interface that should be implemented to handle V8 function calls. The methods
            of this class will be called on the thread associated with the V8 function.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Accessor.Get(System.String,Xilium.CefGlue.CefV8Value,Xilium.CefGlue.CefV8Value@,System.String@)">
            <summary>
            Handle retrieval the accessor value identified by |name|. |object| is the
            receiver ('this' object) of the accessor. If retrieval succeeds set
            |retval| to the return value. If retrieval fails set |exception| to the
            exception that will be thrown. Return true if accessor retrieval was
            handled.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Accessor.Set(System.String,Xilium.CefGlue.CefV8Value,Xilium.CefGlue.CefV8Value,System.String@)">
            <summary>
            Handle assignment of the accessor value identified by |name|. |object| is
            the receiver ('this' object) of the accessor. |value| is the new value
            being assigned to the accessor. If assignment fails set |exception| to the
            exception that will be thrown. Return true if accessor assignment was
            handled.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefV8ArrayBufferReleaseCallback">
            <summary>
            Callback interface that is passed to CefV8Value::CreateArrayBuffer.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8ArrayBufferReleaseCallback.ReleaseBuffer(System.IntPtr)">
            <summary>
            Called to release |buffer| when the ArrayBuffer JS object is garbage
            collected. |buffer| is the value that was passed to CreateArrayBuffer along
            with this object.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefV8Context">
            <summary>
            Class representing a V8 context handle. V8 handles can only be accessed from
            the thread on which they are created. Valid threads for creating a V8 handle
            include the render process main thread (TID_RENDERER) and WebWorker threads.
            A task runner for posting tasks on the associated thread can be retrieved via
            the CefV8Context::GetTaskRunner() method.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Context.GetCurrentContext">
            <summary>
            Returns the current (top) context object in the V8 context stack.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Context.GetEnteredContext">
            <summary>
            Returns the entered (bottom) context object in the V8 context stack.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Context.InContext">
            <summary>
            Returns true if V8 is currently inside a context.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Context.GetTaskRunner">
            <summary>
            Returns the task runner associated with this context. V8 handles can only
            be accessed from the thread on which they are created. This method can be
            called on any render process thread.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Context.IsValid">
            <summary>
            Returns true if the underlying handle is valid and it can be accessed on
            the current thread. Do not call any other methods if this method returns
            false.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Context.GetBrowser">
            <summary>
            Returns the browser for this context. This method will return an empty
            reference for WebWorker contexts.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Context.GetFrame">
            <summary>
            Returns the frame for this context. This method will return an empty
            reference for WebWorker contexts.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Context.GetGlobal">
            <summary>
            Returns the global object for this context. The context must be entered
            before calling this method.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Context.Enter">
            <summary>
            Enter this context. A context must be explicitly entered before creating a
            V8 Object, Array, Function or Date asynchronously. Exit() must be called
            the same number of times as Enter() before releasing this context. V8
            objects belong to the context in which they are created. Returns true if
            the scope was entered successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Context.Exit">
            <summary>
            Exit this context. Call this method only after calling Enter(). Returns
            true if the scope was exited successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Context.IsSame(Xilium.CefGlue.CefV8Context)">
            <summary>
            Returns true if this object is pointing to the same handle as |that|
            object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Context.TryEval(System.String,System.String,System.Int32,Xilium.CefGlue.CefV8Value@,Xilium.CefGlue.CefV8Exception@)">
            <summary>
            Execute a string of JavaScript code in this V8 context. The |script_url|
            parameter is the URL where the script in question can be found, if any.
            The |start_line| parameter is the base line number to use for error
            reporting. On success |retval| will be set to the return value, if any, and
            the function will return true. On failure |exception| will be set to the
            exception, if any, and the function will return false.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefV8Exception">
            <summary>
            Class representing a V8 exception. The methods of this class may be called on
            any render process thread.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Exception.Message">
            <summary>
            Returns the exception message.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Exception.SourceLine">
            <summary>
            Returns the line of source code that the exception occurred within.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Exception.ScriptResourceName">
            <summary>
            Returns the resource name for the script from where the function causing
            the error originates.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Exception.LineNumber">
            <summary>
            Returns the 1-based number of the line where the error occurred or 0 if the
            line number is unknown.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Exception.StartPosition">
            <summary>
            Returns the index within the script of the first character where the error
            occurred.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Exception.EndPosition">
            <summary>
            Returns the index within the script of the last character where the error
            occurred.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Exception.StartColumn">
            <summary>
            Returns the index within the line of the first character where the error
            occurred.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Exception.EndColumn">
            <summary>
            Returns the index within the line of the last character where the error
            occurred.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefV8Handler">
            <summary>
            Interface that should be implemented to handle V8 function calls. The methods
            of this class will always be called on the render process main thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Handler.Execute(System.String,Xilium.CefGlue.CefV8Value,Xilium.CefGlue.CefV8Value[],Xilium.CefGlue.CefV8Value@,System.String@)">
            <summary>
            Handle execution of the function identified by |name|. |object| is the
            receiver ('this' object) of the function. |arguments| is the list of
            arguments passed to the function. If execution succeeds set |retval| to the
            function return value. If execution fails set |exception| to the exception
            that will be thrown. Return true if execution was handled.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefV8Interceptor">
            <summary>
            Interface that should be implemented to handle V8 interceptor calls. The
            methods of this class will be called on the thread associated with the V8
            interceptor. Interceptor's named property handlers (with first argument of
            type CefString) are called when object is indexed by string. Indexed property
            handlers (with first argument of type int) are called when object is indexed
            by integer.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Interceptor.GetByName(System.String,Xilium.CefGlue.CefV8Value,Xilium.CefGlue.CefV8Value@,System.String@)">
            <summary>
            Handle retrieval of the interceptor value identified by |name|. |object| is
            the receiver ('this' object) of the interceptor. If retrieval succeeds, set
            |retval| to the return value. If the requested value does not exist, don't
            set either |retval| or |exception|. If retrieval fails, set |exception| to
            the exception that will be thrown. If the property has an associated
            accessor, it will be called only if you don't set |retval|.
            Return true if interceptor retrieval was handled, false otherwise.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Interceptor.GetByIndex(System.Int32,Xilium.CefGlue.CefV8Value,Xilium.CefGlue.CefV8Value@,System.String@)">
            <summary>
            Handle retrieval of the interceptor value identified by |index|. |object|
            is the receiver ('this' object) of the interceptor. If retrieval succeeds,
            set |retval| to the return value. If the requested value does not exist,
            don't set either |retval| or |exception|. If retrieval fails, set
            |exception| to the exception that will be thrown.
            Return true if interceptor retrieval was handled, false otherwise.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Interceptor.SetByName(System.String,Xilium.CefGlue.CefV8Value,Xilium.CefGlue.CefV8Value,System.String@)">
            <summary>
            Handle assignment of the interceptor value identified by |name|. |object|
            is the receiver ('this' object) of the interceptor. |value| is the new
            value being assigned to the interceptor. If assignment fails, set
            |exception| to the exception that will be thrown. This setter will always
            be called, even when the property has an associated accessor.
            Return true if interceptor assignment was handled, false otherwise.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Interceptor.SetByIndex(System.Int32,Xilium.CefGlue.CefV8Value,Xilium.CefGlue.CefV8Value,System.String@)">
            <summary>
            Handle assignment of the interceptor value identified by |index|. |object|
            is the receiver ('this' object) of the interceptor. |value| is the new
            value being assigned to the interceptor. If assignment fails, set
            |exception| to the exception that will be thrown.
            Return true if interceptor assignment was handled, false otherwise.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefV8StackFrame">
            <summary>
            Class representing a V8 stack frame handle. V8 handles can only be accessed
            from the thread on which they are created. Valid threads for creating a V8
            handle include the render process main thread (TID_RENDERER) and WebWorker
            threads. A task runner for posting tasks on the associated thread can be
            retrieved via the CefV8Context::GetTaskRunner() method.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8StackFrame.IsValid">
            <summary>
            Returns true if the underlying handle is valid and it can be accessed on
            the current thread. Do not call any other methods if this method returns
            false.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8StackFrame.ScriptName">
            <summary>
            Returns the name of the resource script that contains the function.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8StackFrame.ScriptNameOrSourceUrl">
            <summary>
            Returns the name of the resource script that contains the function or the
            sourceURL value if the script name is undefined and its source ends with
            a "//@ sourceURL=..." string.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8StackFrame.FunctionName">
            <summary>
            Returns the name of the function.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8StackFrame.LineNumber">
            <summary>
            Returns the 1-based line number for the function call or 0 if unknown.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8StackFrame.Column">
            <summary>
            Returns the 1-based column offset on the line for the function call or 0 if
            unknown.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8StackFrame.IsEval">
            <summary>
            Returns true if the function was compiled using eval().
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8StackFrame.IsConstructor">
            <summary>
            Returns true if the function was called as a constructor via "new".
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefV8StackTrace">
            <summary>
            Class representing a V8 stack trace handle. V8 handles can only be accessed
            from the thread on which they are created. Valid threads for creating a V8
            handle include the render process main thread (TID_RENDERER) and WebWorker
            threads. A task runner for posting tasks on the associated thread can be
            retrieved via the CefV8Context::GetTaskRunner() method.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8StackTrace.GetCurrent(System.Int32)">
            <summary>
            Returns the stack trace for the currently active context. |frame_limit| is
            the maximum number of frames that will be captured.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8StackTrace.IsValid">
            <summary>
            Returns true if the underlying handle is valid and it can be accessed on
            the current thread. Do not call any other methods if this method returns
            false.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8StackTrace.FrameCount">
            <summary>
            Returns the number of stack frames.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8StackTrace.GetFrame(System.Int32)">
            <summary>
            Returns the stack frame at the specified 0-based index.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefV8Value">
            <summary>
            Class representing a V8 value handle. V8 handles can only be accessed from
            the thread on which they are created. Valid threads for creating a V8 handle
            include the render process main thread (TID_RENDERER) and WebWorker threads.
            A task runner for posting tasks on the associated thread can be retrieved via
            the CefV8Context::GetTaskRunner() method.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.CreateUndefined">
            <summary>
            Create a new CefV8Value object of type undefined.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.CreateNull">
            <summary>
            Create a new CefV8Value object of type null.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.CreateBool(System.Boolean)">
            <summary>
            Create a new CefV8Value object of type bool.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.CreateInt(System.Int32)">
            <summary>
            Create a new CefV8Value object of type int.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.CreateUInt(System.UInt32)">
            <summary>
            Create a new CefV8Value object of type unsigned int.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.CreateDouble(System.Double)">
            <summary>
            Create a new CefV8Value object of type double.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.CreateDate(System.DateTime)">
            <summary>
            Create a new CefV8Value object of type Date. This method should only be
            called from within the scope of a CefRenderProcessHandler, CefV8Handler or
            CefV8Accessor callback, or in combination with calling Enter() and Exit()
            on a stored CefV8Context reference.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.CreateString(System.String)">
            <summary>
            Create a new CefV8Value object of type string.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.CreateObject(Xilium.CefGlue.CefV8Accessor,Xilium.CefGlue.CefV8Interceptor)">
            <summary>
            Create a new CefV8Value object of type object with optional accessor and/or
            interceptor. This method should only be called from within the scope of a
            CefRenderProcessHandler, CefV8Handler or CefV8Accessor callback, or in
            combination with calling Enter() and Exit() on a stored CefV8Context
            reference.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.CreateArray(System.Int32)">
            <summary>
            Create a new CefV8Value object of type array with the specified |length|.
            If |length| is negative the returned array will have length 0. This method
            should only be called from within the scope of a CefRenderProcessHandler,
            CefV8Handler or CefV8Accessor callback, or in combination with calling
            Enter() and Exit() on a stored CefV8Context reference.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.CreateArrayBuffer(System.IntPtr,System.UInt64,Xilium.CefGlue.CefV8ArrayBufferReleaseCallback)">
            <summary>
            Create a new CefV8Value object of type ArrayBuffer which wraps the provided
            |buffer| of size |length| bytes. The ArrayBuffer is externalized, meaning
            that it does not own |buffer|. The caller is responsible for freeing
            |buffer| when requested via a call to CefV8ArrayBufferReleaseCallback::
            ReleaseBuffer. This method should only be called from within the scope of a
            CefRenderProcessHandler, CefV8Handler or CefV8Accessor callback, or in
            combination with calling Enter() and Exit() on a stored CefV8Context
            reference.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.CreateFunction(System.String,Xilium.CefGlue.CefV8Handler)">
            <summary>
            Create a new CefV8Value object of type function. This method should only be
            called from within the scope of a CefRenderProcessHandler, CefV8Handler or
            CefV8Accessor callback, or in combination with calling Enter() and Exit()
            on a stored CefV8Context reference.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Value.IsValid">
            <summary>
            Returns true if the underlying handle is valid and it can be accessed on
            the current thread. Do not call any other methods if this method returns
            false.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Value.IsUndefined">
            <summary>
            True if the value type is undefined.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Value.IsNull">
            <summary>
            True if the value type is null.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Value.IsBool">
            <summary>
            True if the value type is bool.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Value.IsInt">
            <summary>
            True if the value type is int.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Value.IsUInt">
            <summary>
            True if the value type is unsigned int.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Value.IsDouble">
            <summary>
            True if the value type is double.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Value.IsDate">
            <summary>
            True if the value type is Date.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Value.IsString">
            <summary>
            True if the value type is string.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Value.IsObject">
            <summary>
            True if the value type is object.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Value.IsArray">
            <summary>
            True if the value type is array.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Value.IsArrayBuffer">
            <summary>
            True if the value type is an ArrayBuffer.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Value.IsFunction">
            <summary>
            True if the value type is function.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.IsSame(Xilium.CefGlue.CefV8Value)">
            <summary>
            Returns true if this object is pointing to the same handle as |that|
            object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.GetBoolValue">
            <summary>
            Return a bool value.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.GetIntValue">
            <summary>
            Return an int value.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.GetUIntValue">
            <summary>
            Return an unsigned int value.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.GetDoubleValue">
            <summary>
            Return a double value.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.GetDateValue">
            <summary>
            Return a Date value.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.GetStringValue">
            <summary>
            Return a string value.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Value.IsUserCreated">
            <summary>
            OBJECT METHODS - These methods are only available on objects. Arrays and
            functions are also objects. String- and integer-based keys can be used
            interchangably with the framework converting between them as necessary.
            Returns true if this is a user created object.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefV8Value.HasException">
            <summary>
            Returns true if the last method call resulted in an exception. This
            attribute exists only in the scope of the current CEF value object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.GetException">
            <summary>
            Returns the exception resulting from the last method call. This attribute
            exists only in the scope of the current CEF value object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.ClearException">
            <summary>
            Clears the last exception and returns true on success.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.WillRethrowExceptions">
            <summary>
            Returns true if this object will re-throw future exceptions. This attribute
            exists only in the scope of the current CEF value object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.SetRethrowExceptions(System.Boolean)">
            <summary>
            Set whether this object will re-throw future exceptions. By default
            exceptions are not re-thrown. If a exception is re-thrown the current
            context should not be accessed again until after the exception has been
            caught and not re-thrown. Returns true on success. This attribute exists
            only in the scope of the current CEF value object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.HasValue(System.String)">
            <summary>
            Returns true if the object has a value with the specified identifier.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.HasValue(System.Int32)">
            <summary>
            Returns true if the object has a value with the specified identifier.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.DeleteValue(System.String)">
            <summary>
            Deletes the value with the specified identifier and returns true on
            success. Returns false if this method is called incorrectly or an exception
            is thrown. For read-only and don't-delete values this method will return
            true even though deletion failed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.DeleteValue(System.Int32)">
            <summary>
            Deletes the value with the specified identifier and returns true on
            success. Returns false if this method is called incorrectly, deletion fails
            or an exception is thrown. For read-only and don't-delete values this
            method will return true even though deletion failed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.GetValue(System.String)">
            <summary>
            Returns the value with the specified identifier on success. Returns NULL
            if this method is called incorrectly or an exception is thrown.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.GetValue(System.Int32)">
            <summary>
            Returns the value with the specified identifier on success. Returns NULL
            if this method is called incorrectly or an exception is thrown.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.SetValue(System.String,Xilium.CefGlue.CefV8Value,Xilium.CefGlue.CefV8PropertyAttribute)">
            <summary>
            Associates a value with the specified identifier and returns true on
            success. Returns false if this method is called incorrectly or an exception
            is thrown. For read-only values this method will return true even though
            assignment failed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.SetValue(System.Int32,Xilium.CefGlue.CefV8Value)">
            <summary>
            Associates a value with the specified identifier and returns true on
            success. Returns false if this method is called incorrectly or an exception
            is thrown. For read-only values this method will return true even though
            assignment failed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.SetValue(System.String,Xilium.CefGlue.CefV8AccessControl,Xilium.CefGlue.CefV8PropertyAttribute)">
            <summary>
            Registers an identifier and returns true on success. Access to the
            identifier will be forwarded to the CefV8Accessor instance passed to
            CefV8Value::CreateObject(). Returns false if this method is called
            incorrectly or an exception is thrown. For read-only values this method
            will return true even though assignment failed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.TryGetKeys(System.String[]@)">
            <summary>
            Read the keys for the object's values into the specified vector. Integer-
            based keys will also be returned as strings.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.GetKeys">
            <summary>
            Read the keys for the object's values into the specified vector. Integer-
            based keys will also be returned as strings.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.SetUserData(Xilium.CefGlue.CefUserData)">
            <summary>
            Sets the user data for this object and returns true on success. Returns
            false if this method is called incorrectly. This method can only be called
            on user created objects.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.GetUserData">
            <summary>
            Returns the user data, if any, assigned to this object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.GetExternallyAllocatedMemory">
            <summary>
            Returns the amount of externally allocated memory registered for the
            object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.AdjustExternallyAllocatedMemory(System.Int32)">
            <summary>
            Adjusts the amount of registered external memory for the object. Used to
            give V8 an indication of the amount of externally allocated memory that is
            kept alive by JavaScript objects. V8 uses this information to decide when
            to perform global garbage collection. Each CefV8Value tracks the amount of
            external memory associated with it and automatically decreases the global
            total by the appropriate amount on its destruction. |change_in_bytes|
            specifies the number of bytes to adjust by. This method returns the number
            of bytes associated with the object after the adjustment. This method can
            only be called on user created objects.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.GetArrayLength">
            <summary>
            ARRAY METHODS - These methods are only available on arrays.
            Returns the number of elements in the array.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.GetArrayBufferReleaseCallback">
            <summary>
            ARRAY BUFFER METHODS - These methods are only available on ArrayBuffers.
            Returns the ReleaseCallback object associated with the ArrayBuffer or NULL
            if the ArrayBuffer was not created with CreateArrayBuffer.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.NeuterArrayBuffer">
            <summary>
            Prevent the ArrayBuffer from using it's memory block by setting the length
            to zero. This operation cannot be undone. If the ArrayBuffer was created
            with CreateArrayBuffer then CefV8ArrayBufferReleaseCallback::ReleaseBuffer
            will be called to release the underlying buffer.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.GetFunctionName">
            <summary>
            FUNCTION METHODS - These methods are only available on functions.
            Returns the function name.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.GetFunctionHandler">
            <summary>
            Returns the function handler or NULL if not a CEF-created function.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.ExecuteFunction(Xilium.CefGlue.CefV8Value,Xilium.CefGlue.CefV8Value[])">
            <summary>
            Execute the function using the current V8 context. This method should only
            be called from within the scope of a CefV8Handler or CefV8Accessor
            callback, or in combination with calling Enter() and Exit() on a stored
            CefV8Context reference. |object| is the receiver ('this' object) of the
            function. If |object| is empty the current context's global object will be
            used. |arguments| is the list of arguments that will be passed to the
            function. Returns the function return value on success. Returns NULL if
            this method is called incorrectly or an exception is thrown.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefV8Value.ExecuteFunctionWithContext(Xilium.CefGlue.CefV8Context,Xilium.CefGlue.CefV8Value,Xilium.CefGlue.CefV8Value[])">
            <summary>
            Execute the function using the specified V8 context. |object| is the
            receiver ('this' object) of the function. If |object| is empty the
            specified context's global object will be used. |arguments| is the list of
            arguments that will be passed to the function. Returns the function return
            value on success. Returns NULL if this method is called incorrectly or an
            exception is thrown.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefValue">
            <summary>
            Class that wraps other data value types. Complex types (binary, dictionary
            and list) will be referenced but not owned by this object. Can be used on any
            process and thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefValue.Create">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefValue.IsValid">
            <summary>
            Returns true if the underlying data is valid. This will always be true for
            simple types. For complex types (binary, dictionary and list) the
            underlying data may become invalid if owned by another object (e.g. list or
            dictionary) and that other object is then modified or destroyed. This value
            object can be re-used by calling Set*() even if the underlying data is
            invalid.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefValue.IsOwned">
            <summary>
            Returns true if the underlying data is owned by another object.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefValue.IsReadOnly">
            <summary>
            Returns true if the underlying data is read-only. Some APIs may expose
            read-only objects.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefValue.IsSame(Xilium.CefGlue.CefValue)">
            <summary>
            Returns true if this object and |that| object have the same underlying
            data. If true modifications to this object will also affect |that| object
            and vice-versa.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefValue.IsEqual(Xilium.CefGlue.CefValue)">
            <summary>
            Returns true if this object and |that| object have an equivalent underlying
            value but are not necessarily the same object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefValue.Copy">
            <summary>
            Returns a copy of this object. The underlying data will also be copied.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefValue.GetValueType">
            <summary>
            Returns the underlying value type.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefValue.GetBool">
            <summary>
            Returns the underlying value as type bool.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefValue.GetInt">
            <summary>
            Returns the underlying value as type int.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefValue.GetDouble">
            <summary>
            Returns the underlying value as type double.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefValue.GetString">
            <summary>
            Returns the underlying value as type string.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefValue.GetBinary">
            <summary>
            Returns the underlying value as type binary. The returned reference may
            become invalid if the value is owned by another object or if ownership is
            transferred to another object in the future. To maintain a reference to
            the value after assigning ownership to a dictionary or list pass this
            object to the SetValue() method instead of passing the returned reference
            to SetBinary().
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefValue.GetDictionary">
            <summary>
            Returns the underlying value as type dictionary. The returned reference may
            become invalid if the value is owned by another object or if ownership is
            transferred to another object in the future. To maintain a reference to
            the value after assigning ownership to a dictionary or list pass this
            object to the SetValue() method instead of passing the returned reference
            to SetDictionary().
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefValue.GetList">
            <summary>
            Returns the underlying value as type list. The returned reference may
            become invalid if the value is owned by another object or if ownership is
            transferred to another object in the future. To maintain a reference to
            the value after assigning ownership to a dictionary or list pass this
            object to the SetValue() method instead of passing the returned reference
            to SetList().
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefValue.SetNull">
            <summary>
            Sets the underlying value as type null. Returns true if the value was set
            successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefValue.SetBool(System.Boolean)">
            <summary>
            Sets the underlying value as type bool. Returns true if the value was set
            successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefValue.SetInt(System.Int32)">
            <summary>
            Sets the underlying value as type int. Returns true if the value was set
            successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefValue.SetDouble(System.Double)">
            <summary>
            Sets the underlying value as type double. Returns true if the value was set
            successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefValue.SetString(System.String)">
            <summary>
            Sets the underlying value as type string. Returns true if the value was set
            successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefValue.SetBinary(Xilium.CefGlue.CefBinaryValue)">
            <summary>
            Sets the underlying value as type binary. Returns true if the value was set
            successfully. This object keeps a reference to |value| and ownership of the
            underlying data remains unchanged.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefValue.SetDictionary(Xilium.CefGlue.CefDictionaryValue)">
            <summary>
            Sets the underlying value as type dict. Returns true if the value was set
            successfully. This object keeps a reference to |value| and ownership of the
            underlying data remains unchanged.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefValue.SetList(Xilium.CefGlue.CefListValue)">
            <summary>
            Sets the underlying value as type list. Returns true if the value was set
            successfully. This object keeps a reference to |value| and ownership of the
            underlying data remains unchanged.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefWebPluginInfo">
            <summary>
            Information about a specific web plugin.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefWebPluginInfo.Name">
            <summary>
            Returns the plugin name (i.e. Flash).
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefWebPluginInfo.Path">
            <summary>
            Returns the plugin file path (DLL/bundle/library).
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefWebPluginInfo.Version">
            <summary>
            Returns the version of the plugin (may be OS-specific).
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefWebPluginInfo.Description">
            <summary>
            Returns a description of the plugin from the version information.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefWebPluginInfoVisitor">
            <summary>
            Interface to implement for visiting web plugin information. The methods of
            this class will be called on the browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefWebPluginInfoVisitor.Visit(Xilium.CefGlue.CefWebPluginInfo,System.Int32,System.Int32)">
            <summary>
            Method that will be called once for each plugin. |count| is the 0-based
            index for the current plugin. |total| is the total number of plugins.
            Return false to stop visiting plugins. This method may never be called if
            no plugins are found.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefWebPluginUnstableCallback">
            <summary>
            Interface to implement for receiving unstable plugin information. The methods
            of this class will be called on the browser process IO thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefWebPluginUnstableCallback.IsUnstable(System.String,System.Boolean)">
            <summary>
            Method that will be called for the requested plugin. |unstable| will be
            true if the plugin has reached the crash count threshold of 3 times in 120
            seconds.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefWriteHandler">
            <summary>
            Interface the client can implement to provide a custom stream writer. The
            methods of this class may be called on any thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefWriteHandler.Write(System.IO.Stream,System.Int64)">
            <summary>
            Write raw binary data.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefWriteHandler.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek to the specified offset position. |whence| may be any one of
            SEEK_CUR, SEEK_END or SEEK_SET. Return zero on success and non-zero on
            failure.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefWriteHandler.Tell">
            <summary>
            Return the current offset position.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefWriteHandler.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefWriteHandler.MayBlock">
            <summary>
            Return true if this handler performs work like accessing the file system
            which may block. Used as a hint for determining the thread to access the
            handler from.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefX509Certificate">
            <summary>
            Class representing a X.509 certificate.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefX509Certificate.GetSubject">
            <summary>
            Returns the subject of the X.509 certificate. For HTTPS server
            certificates this represents the web server.  The common name of the
            subject should match the host name of the web server.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefX509Certificate.GetIssuer">
            <summary>
            Returns the issuer of the X.509 certificate.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefX509Certificate.GetSerialNumber">
            <summary>
            Returns the DER encoded serial number for the X.509 certificate. The value
            possibly includes a leading 00 byte.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefX509Certificate.GetValidStart">
            <summary>
            Returns the date before which the X.509 certificate is invalid.
            CefTime.GetTimeT() will return 0 if no date was specified.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefX509Certificate.GetValidExpiry">
            <summary>
            Returns the date after which the X.509 certificate is invalid.
            CefTime.GetTimeT() will return 0 if no date was specified.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefX509Certificate.GetDerEncoded">
            <summary>
            Returns the DER encoded data for the X.509 certificate.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefX509Certificate.GetPemEncoded">
            <summary>
            Returns the PEM encoded data for the X.509 certificate.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefX509Certificate.GetIssuerChainSize">
            <summary>
            Returns the number of certificates in the issuer chain.
            If 0, the certificate is self-signed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefX509Certificate.GetDerEncodedIssuerChain(System.Int64@,Xilium.CefGlue.CefBinaryValue@)">
            <summary>
            Returns the DER encoded data for the certificate issuer chain.
            If we failed to encode a certificate in the chain it is still
            present in the array but is an empty string.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefX509Certificate.GetPEMEncodedIssuerChain(System.Int64@,Xilium.CefGlue.CefBinaryValue@)">
            <summary>
            Returns the PEM encoded data for the certificate issuer chain.
            If we failed to encode a certificate in the chain it is still
            present in the array but is an empty string.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefX509CertPrincipal">
            <summary>
            Class representing the issuer or subject field of an X.509 certificate.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefX509CertPrincipal.GetDisplayName">
            <summary>
            Returns a name that can be used to represent the issuer. It tries in this
            order: Common Name (CN), Organization Name (O) and Organizational Unit
            Name (OU) and returns the first non-empty one found.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefX509CertPrincipal.GetCommonName">
            <summary>
            Returns the common name.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefX509CertPrincipal.GetLocalityName">
            <summary>
            Returns the locality name.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefX509CertPrincipal.GetStateOrProvinceName">
            <summary>
            Returns the state or province name.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefX509CertPrincipal.GetCountryName">
            <summary>
            Returns the country name.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefX509CertPrincipal.GetStreetAddresses">
            <summary>
            Retrieve the list of street addresses.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefX509CertPrincipal.GetOrganizationNames">
            <summary>
            Retrieve the list of organization names.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefX509CertPrincipal.GetOrganizationUnitNames">
            <summary>
            Retrieve the list of organization unit names.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefX509CertPrincipal.GetDomainComponents">
            <summary>
            Retrieve the list of domain components.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefXmlReader">
            <summary>
            Class that supports the reading of XML data via the libxml streaming API.
            The methods of this class should only be called on the thread that creates
            the object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefXmlReader.Create(Xilium.CefGlue.CefStreamReader,Xilium.CefGlue.CefXmlEncoding,System.String)">
            <summary>
            Create a new CefXmlReader object. The returned object's methods can only
            be called from the thread that created the object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefXmlReader.MoveToNextNode">
            <summary>
            Moves the cursor to the next node in the document. This method must be
            called at least once to set the current cursor position. Returns true if
            the cursor position was set successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefXmlReader.Close">
            <summary>
            Close the document. This should be called directly to ensure that cleanup
            occurs on the correct thread.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefXmlReader.HasError">
            <summary>
            Returns true if an error has been reported by the XML parser.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefXmlReader.Error">
            <summary>
            Returns the error string.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefXmlReader.NodeType">
            <summary>
            The below methods retrieve data for the node at the current cursor
            position.
            Returns the node type.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefXmlReader.Depth">
            <summary>
            Returns the node depth. Depth starts at 0 for the root node.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefXmlReader.LocalName">
            <summary>
            Returns the local name. See
            http://www.w3.org/TR/REC-xml-names/#NT-LocalPart for additional details.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefXmlReader.Prefix">
            <summary>
            Returns the namespace prefix. See http://www.w3.org/TR/REC-xml-names/ for
            additional details.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefXmlReader.QualifiedName">
            <summary>
            Returns the qualified name, equal to (Prefix:)LocalName. See
            http://www.w3.org/TR/REC-xml-names/#ns-qualnames for additional details.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefXmlReader.NamespaceUri">
            <summary>
            Returns the URI defining the namespace associated with the node. See
            http://www.w3.org/TR/REC-xml-names/ for additional details.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefXmlReader.BaseUri">
            <summary>
            Returns the base URI of the node. See http://www.w3.org/TR/xmlbase/ for
            additional details.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefXmlReader.XmlLang">
            <summary>
            Returns the xml:lang scope within which the node resides. See
            http://www.w3.org/TR/REC-xml/#sec-lang-tag for additional details.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefXmlReader.IsEmptyElement">
            <summary>
            Returns true if the node represents an empty element. <a/> is considered
            empty but <a></a> is not.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefXmlReader.HasValue">
            <summary>
            Returns true if the node has a text value.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefXmlReader.Value">
            <summary>
            Returns the text value.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefXmlReader.HasAttributes">
            <summary>
            Returns true if the node has attributes.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefXmlReader.AttributeCount">
            <summary>
            Returns the number of attributes.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefXmlReader.GetAttribute(System.Int32)">
            <summary>
            Returns the value of the attribute at the specified 0-based index.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefXmlReader.GetAttribute(System.String)">
            <summary>
            Returns the value of the attribute with the specified qualified name.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefXmlReader.GetAttribute(System.String,System.String)">
            <summary>
            Returns the value of the attribute with the specified local name and
            namespace URI.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefXmlReader.GetInnerXml">
            <summary>
            Returns an XML representation of the current node's children.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefXmlReader.GetOuterXml">
            <summary>
            Returns an XML representation of the current node including its children.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefXmlReader.LineNumber">
            <summary>
            Returns the line number for the current node.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefXmlReader.MoveToAttribute(System.Int32)">
            <summary>
            Attribute nodes are not traversed by default. The below methods can be
            used to move the cursor to an attribute node. MoveToCarryingElement() can
            be called afterwards to return the cursor to the carrying element. The
            depth of an attribute node will be 1 + the depth of the carrying element.
            Moves the cursor to the attribute at the specified 0-based index. Returns
            true if the cursor position was set successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefXmlReader.MoveToAttribute(System.String)">
            <summary>
            Moves the cursor to the attribute with the specified qualified name.
            Returns true if the cursor position was set successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefXmlReader.MoveToAttribute(System.String,System.String)">
            <summary>
            Moves the cursor to the attribute with the specified local name and
            namespace URI. Returns true if the cursor position was set successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefXmlReader.MoveToFirstAttribute">
            <summary>
            Moves the cursor to the first attribute in the current element. Returns
            true if the cursor position was set successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefXmlReader.MoveToNextAttribute">
            <summary>
            Moves the cursor to the next attribute in the current element. Returns
            true if the cursor position was set successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefXmlReader.MoveToCarryingElement">
            <summary>
            Moves the cursor back to the carrying element. Returns true if the cursor
            position was set successfully.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefZipReader">
            <summary>
            Class that supports the reading of zip archives via the zlib unzip API.
            The methods of this class should only be called on the thread that creates
            the object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefZipReader.Create(Xilium.CefGlue.CefStreamReader)">
            <summary>
            Create a new CefZipReader object. The returned object's methods can only
            be called from the thread that created the object.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefZipReader.MoveToFirstFile">
            <summary>
            Moves the cursor to the first file in the archive. Returns true if the
            cursor position was set successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefZipReader.MoveToNextFile">
            <summary>
            Moves the cursor to the next file in the archive. Returns true if the
            cursor position was set successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefZipReader.MoveToFile(System.String,System.Boolean)">
            <summary>
            Moves the cursor to the specified file in the archive. If |caseSensitive|
            is true then the search will be case sensitive. Returns true if the cursor
            position was set successfully.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefZipReader.Close">
            <summary>
            Closes the archive. This should be called directly to ensure that cleanup
            occurs on the correct thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefZipReader.GetFileName">
            <summary>
            The below methods act on the file at the current cursor position.
            Returns the name of the file.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefZipReader.GetFileSize">
            <summary>
            Returns the uncompressed size of the file.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefZipReader.GetFileLastModified">
            <summary>
            Returns the last modified timestamp for the file.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefZipReader.OpenFile(System.String)">
            <summary>
            Opens the file for reading of uncompressed data. A read password may
            optionally be specified.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefZipReader.CloseFile">
            <summary>
            Closes the file.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefZipReader.ReadFile(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read uncompressed file contents into the specified buffer. Returns &lt; 0 if
            an error occurred, 0 if at the end of file, or the number of bytes read.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefZipReader.Tell">
            <summary>
            Returns the current offset in the uncompressed file contents.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.CefZipReader.Eof">
            <summary>
            Returns true if at end of the file contents.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefAlphaType">
            <summary>
            Describes how to interpret the alpha component of a pixel.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefAlphaType.Opaque">
            <summary>
            No transparency. The alpha component is ignored.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefAlphaType.Premultiplied">
            <summary>
            Transparency with pre-multiplied alpha component.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefAlphaType.Postmultiplied">
            <summary>
            Transparency with post-multiplied alpha component.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefCdmRegistrationError">
            <summary>
            Error codes for CDM registration. See cef_web_plugin.h for details.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefCdmRegistrationError.None">
            <summary>
            No error. Registration completed successfully.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefCdmRegistrationError.IncorrectContents">
            <summary>
            Required files or manifest contents are missing.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefCdmRegistrationError.Incompatible">
            <summary>
            The CDM is incompatible with the current Chromium version.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefCdmRegistrationError.NotSupported">
            <summary>
            CDM registration is not supported at this time.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefCertStatus">
            <summary>
            Supported certificate status code values. See net\cert\cert_status_flags.h
            for more information. CERT_STATUS_NONE is new in CEF because we use an
            enum while cert_status_flags.h uses a typedef and static const variables.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefColorModel">
            <summary>
            Print job color mode values.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefColorType">
            <summary>
            Describes how to interpret the components of a pixel.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefColorType.Rgba8888">
            <summary>
            RGBA with 8 bits per pixel (32bits total).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefColorType.Bgra8888">
            <summary>
            BGRA with 8 bits per pixel (32bits total).
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefContextMenuEditStateFlags">
            <summary>
            Supported context menu edit state bit flags.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefContextMenuMediaStateFlags">
            <summary>
            Supported context menu media state bit flags.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefContextMenuMediaType">
            <summary>
            Supported context menu media types.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefContextMenuMediaType.None">
            <summary>
            No special node is in context.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefContextMenuMediaType.Image">
            <summary>
            An image node is selected.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefContextMenuMediaType.Video">
            <summary>
            A video node is selected.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefContextMenuMediaType.Audio">
            <summary>
            An audio node is selected.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefContextMenuMediaType.File">
            <summary>
            A file node is selected.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefContextMenuMediaType.Plugin">
            <summary>
            A plugin node is selected.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefContextMenuTypeFlags">
            <summary>
            Supported context menu type flags.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefContextMenuTypeFlags.None">
            <summary>
            No node is selected.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefContextMenuTypeFlags.Page">
            <summary>
            The top page is selected.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefContextMenuTypeFlags.Frame">
            <summary>
            A subframe page is selected.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefContextMenuTypeFlags.Link">
            <summary>
            A link is selected.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefContextMenuTypeFlags.Media">
            <summary>
            A media node is selected.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefContextMenuTypeFlags.Selection">
            <summary>
            There is a textual or mixed selection that is selected.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefContextMenuTypeFlags.Editable">
            <summary>
            An editable element is selected.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefContextSafetyImplementation">
            <summary>
            CEF offers two context safety implementations with different performance characteristics.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefContextSafetyImplementation.SafeDefault">
            <summary>
            The default implementation (value of 0) uses a map of hash values and should provide
            better performance in situations with a small number contexts.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefContextSafetyImplementation.SafeAlternate">
            <summary>
            The alternate implementation (value of 1) uses a hidden value attached to each context
            and should provide better performance in situations with a large number of contexts.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefContextSafetyImplementation.Disabled">
            <summary>
            If you need better performance in the creation of V8 references and you
            plan to manually track context lifespan you can disable context safety by
            specifying a value of -1.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefCrossAxisAlignment">
            <summary>
            Specifies where along the cross axis the CefBoxLayout child views should be
            laid out.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefCrossAxisAlignment.Stretch">
            <summary>
            Child views will be stretched to fit.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefCrossAxisAlignment.Start">
            <summary>
            Child views will be left-aligned.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefCrossAxisAlignment.Center">
            <summary>
            Child views will be center-aligned.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefCrossAxisAlignment.End">
            <summary>
            Child views will be right-aligned.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefCursorType">
            <summary>
            Cursor type values.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefDomDocumentType">
            <summary>
            DOM document types.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefDomEventCategory">
            <summary>
            DOM event category flags.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefDomEventPhase">
            <summary>
            DOM event processing phases.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefDomNodeType">
            <summary>
            DOM node types.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefDragOperationsMask">
            <summary>
            "Verb" of a drag-and-drop operation as negotiated between the source and
            destination. These constants match their equivalents in WebCore's
            DragActions.h and should not be renumbered.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefDuplexMode">
            <summary>
            Print job duplex mode values.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefErrorCode">
            <summary>
            Supported error code values.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.IO_PENDING">
            <summary>
            An asynchronous IO operation is not yet complete.  This usually does not
            indicate a fatal error.  Typically this error will be generated as a
            notification to wait for some external notification that the IO operation
            finally completed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.FAILED">
            <summary>
            A generic failure occurred.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.ABORTED">
            <summary>
            An operation was aborted (due to user action).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.INVALID_ARGUMENT">
            <summary>
            An argument to the function is incorrect.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.INVALID_HANDLE">
            <summary>
            The handle or file descriptor is invalid.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.FILE_NOT_FOUND">
            <summary>
            The file or directory cannot be found.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.TIMED_OUT">
            <summary>
            An operation timed out.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.FILE_TOO_BIG">
            <summary>
            The file is too large.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.UNEXPECTED">
            <summary>
            An unexpected error.  This may be caused by a programming mistake or an
            invalid assumption.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.ACCESS_DENIED">
            <summary>
            Permission to access a resource, other than the network, was denied.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.NOT_IMPLEMENTED">
            <summary>
            The operation failed because of unimplemented functionality.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.INSUFFICIENT_RESOURCES">
            <summary>
            There were not enough resources to complete the operation.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.OUT_OF_MEMORY">
            <summary>
            Memory allocation failed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.UPLOAD_FILE_CHANGED">
            <summary>
            The file upload failed because the file's modification time was different
            from the expectation.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SOCKET_NOT_CONNECTED">
            <summary>
            The socket is not connected.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.FILE_EXISTS">
            <summary>
            The file already exists.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.FILE_PATH_TOO_LONG">
            <summary>
            The path or file name is too long.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.FILE_NO_SPACE">
            <summary>
            Not enough room left on the disk.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.FILE_VIRUS_INFECTED">
            <summary>
            The file has a virus.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.BLOCKED_BY_CLIENT">
            <summary>
            The client chose to block the request.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.NETWORK_CHANGED">
            <summary>
            The network changed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.BLOCKED_BY_ADMINISTRATOR">
            <summary>
            The request was blocked by the URL block list configured by the domain
            administrator.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SOCKET_IS_CONNECTED">
            <summary>
            The socket is already connected.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.BLOCKED_ENROLLMENT_CHECK_PENDING">
            <summary>
            The request was blocked because the forced reenrollment check is still
            pending. This error can only occur on ChromeOS.
            The error can be emitted by code in chrome/browser/policy/policy_helpers.cc.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.UPLOAD_STREAM_REWIND_NOT_SUPPORTED">
            <summary>
            The upload failed because the upload stream needed to be re-read, due to a
            retry or a redirect, but the upload stream doesn't support that operation.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CONTEXT_SHUT_DOWN">
            <summary>
            The request failed because the URLRequestContext is shutting down, or has
            been shut down.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.BLOCKED_BY_RESPONSE">
            <summary>
            The request failed because the response was delivered along with requirements
            which are not met ('X-Frame-Options' and 'Content-Security-Policy' ancestor
            checks and 'Cross-Origin-Resource-Policy', for instance).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CLEARTEXT_NOT_PERMITTED">
            <summary>
            The request was blocked by system policy disallowing some or all cleartext
            requests. Used for NetworkSecurityPolicy on Android.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CONNECTION_CLOSED">
            <summary>
            A connection was closed (corresponding to a TCP FIN).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CONNECTION_RESET">
            <summary>
            A connection was reset (corresponding to a TCP RST).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CONNECTION_REFUSED">
            <summary>
            A connection attempt was refused.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CONNECTION_ABORTED">
            <summary>
            A connection timed out as a result of not receiving an ACK for data sent.
            This can include a FIN packet that did not get ACK'd.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CONNECTION_FAILED">
            <summary>
            A connection attempt failed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.NAME_NOT_RESOLVED">
            <summary>
            The host name could not be resolved.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.INTERNET_DISCONNECTED">
            <summary>
            The Internet connection has been lost.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_PROTOCOL_ERROR">
            <summary>
            An SSL protocol error occurred.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.ADDRESS_INVALID">
            <summary>
            The IP address or port number is invalid (e.g., cannot connect to the IP
            address 0 or the port 0).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.ADDRESS_UNREACHABLE">
            <summary>
            The IP address is unreachable.  This usually means that there is no route to
            the specified host or network.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_CLIENT_AUTH_CERT_NEEDED">
            <summary>
            The server requested a client certificate for SSL client authentication.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.TUNNEL_CONNECTION_FAILED">
            <summary>
            A tunnel connection through the proxy could not be established.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.NO_SSL_VERSIONS_ENABLED">
            <summary>
            No SSL protocol versions are enabled.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_VERSION_OR_CIPHER_MISMATCH">
            <summary>
            The client and server don't support a common SSL protocol version or
            cipher suite.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_RENEGOTIATION_REQUESTED">
            <summary>
            The server requested a renegotiation (rehandshake).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.PROXY_AUTH_UNSUPPORTED">
            <summary>
            The proxy requested authentication (for tunnel establishment) with an
            unsupported method.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CERT_ERROR_IN_SSL_RENEGOTIATION">
             <summary>
             During SSL renegotiation (rehandshake), the server sent a certificate with
             an error.
            
             Note: this error is not in the -2xx range so that it won't be handled as a
             certificate error.
             </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.BAD_SSL_CLIENT_AUTH_CERT">
            <summary>
            The SSL handshake failed because of a bad or missing client certificate.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CONNECTION_TIMED_OUT">
            <summary>
            A connection attempt timed out.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.HOST_RESOLVER_QUEUE_TOO_LARGE">
            <summary>
            There are too many pending DNS resolves, so a request in the queue was
            aborted.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SOCKS_CONNECTION_FAILED">
            <summary>
            Failed establishing a connection to the SOCKS proxy server for a target host.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SOCKS_CONNECTION_HOST_UNREACHABLE">
            <summary>
            The SOCKS proxy server failed establishing connection to the target host
            because that host is unreachable.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.ALPN_NEGOTIATION_FAILED">
            <summary>
            The request to negotiate an alternate protocol failed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_NO_RENEGOTIATION">
            <summary>
            The peer sent an SSL no_renegotiation alert message.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.WINSOCK_UNEXPECTED_WRITTEN_BYTES">
            <summary>
            Winsock sometimes reports more data written than passed.  This is probably
            due to a broken LSP.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_DECOMPRESSION_FAILURE_ALERT">
            <summary>
            An SSL peer sent us a fatal decompression_failure alert. This typically
            occurs when a peer selects DEFLATE compression in the mistaken belief that
            it supports it.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_BAD_RECORD_MAC_ALERT">
            <summary>
            An SSL peer sent us a fatal bad_record_mac alert. This has been observed
            from servers with buggy DEFLATE support.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.PROXY_AUTH_REQUESTED">
            <summary>
            The proxy requested authentication (for tunnel establishment).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_WEAK_SERVER_EPHEMERAL_DH_KEY">
            <summary>
            The SSL server attempted to use a weak ephemeral Diffie-Hellman key.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.PROXY_CONNECTION_FAILED">
            <summary>
            Could not create a connection to the proxy server. An error occurred
            either in resolving its name, or in connecting a socket to it.
            Note that this does NOT include failures during the actual "CONNECT" method
            of an HTTP proxy.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.MANDATORY_PROXY_CONFIGURATION_FAILED">
            <summary>
            A mandatory proxy configuration could not be used. Currently this means
            that a mandatory PAC script could not be fetched, parsed or executed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.PRECONNECT_MAX_SOCKET_LIMIT">
            <summary>
            We've hit the max socket limit for the socket pool while preconnecting.  We
            don't bother trying to preconnect more sockets.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_CLIENT_AUTH_PRIVATE_KEY_ACCESS_DENIED">
            <summary>
            The permission to use the SSL client certificate's private key was denied.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_CLIENT_AUTH_CERT_NO_PRIVATE_KEY">
            <summary>
            The SSL client certificate has no private key.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.PROXY_CERTIFICATE_INVALID">
            <summary>
            The certificate presented by the HTTPS Proxy was invalid.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.NAME_RESOLUTION_FAILED">
            <summary>
            An error occurred when trying to do a name resolution (DNS).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.NETWORK_ACCESS_DENIED">
            <summary>
            Permission to access the network was denied. This is used to distinguish
            errors that were most likely caused by a firewall from other access denied
            errors. See also ERR_ACCESS_DENIED.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.TEMPORARILY_THROTTLED">
            <summary>
            The request throttler module cancelled this request to avoid DDOS.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.HTTPS_PROXY_TUNNEL_RESPONSE_REDIRECT">
             <summary>
             A request to create an SSL tunnel connection through the HTTPS proxy
             received a 302 (temporary redirect) response.  The response body might
             include a description of why the request failed.
            
             TODO(https://crbug.com/928551): This is deprecated and should not be used by
             new code.
             </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_CLIENT_AUTH_SIGNATURE_FAILED">
             <summary>
             We were unable to sign the CertificateVerify data of an SSL client auth
             handshake with the client certificate's private key.
            
             Possible causes for this include the user implicitly or explicitly
             denying access to the private key, the private key may not be valid for
             signing, the key may be relying on a cached handle which is no longer
             valid, or the CSP won't allow arbitrary data to be signed.
             </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.MSG_TOO_BIG">
            <summary>
            The message was too large for the transport.  (for example a UDP message
            which exceeds size threshold).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.WS_PROTOCOL_ERROR">
            <summary>
            Websocket protocol error. Indicates that we are terminating the connection
            due to a malformed frame or other protocol violation.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.ADDRESS_IN_USE">
            <summary>
            Returned when attempting to bind an address that is already in use.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_HANDSHAKE_NOT_COMPLETED">
            <summary>
            An operation failed because the SSL handshake has not completed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_BAD_PEER_PUBLIC_KEY">
            <summary>
            SSL peer's public key is invalid.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_PINNED_KEY_NOT_IN_CERT_CHAIN">
            <summary>
            The certificate didn't match the built-in public key pins for the host name.
            The pins are set in net/http/transport_security_state.cc and require that
            one of a set of public keys exist on the path from the leaf to the root.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CLIENT_AUTH_CERT_TYPE_UNSUPPORTED">
            <summary>
            Server request for client certificate did not contain any types we support.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_DECRYPT_ERROR_ALERT">
            <summary>
            An SSL peer sent us a fatal decrypt_error alert. This typically occurs when
            a peer could not correctly verify a signature (in CertificateVerify or
            ServerKeyExchange) or validate a Finished message.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.WS_THROTTLE_QUEUE_TOO_LARGE">
            <summary>
            There are too many pending WebSocketJob instances, so the new job was not
            pushed to the queue.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_SERVER_CERT_CHANGED">
            <summary>
            The SSL server certificate changed in a renegotiation.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_UNRECOGNIZED_NAME_ALERT">
            <summary>
            The SSL server sent us a fatal unrecognized_name alert.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SOCKET_SET_RECEIVE_BUFFER_SIZE_ERROR">
            <summary>
            Failed to set the socket's receive buffer size as requested.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SOCKET_SET_SEND_BUFFER_SIZE_ERROR">
            <summary>
            Failed to set the socket's send buffer size as requested.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SOCKET_RECEIVE_BUFFER_SIZE_UNCHANGEABLE">
            <summary>
            Failed to set the socket's receive buffer size as requested, despite success
            return code from setsockopt.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SOCKET_SEND_BUFFER_SIZE_UNCHANGEABLE">
            <summary>
            Failed to set the socket's send buffer size as requested, despite success
            return code from setsockopt.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_CLIENT_AUTH_CERT_BAD_FORMAT">
            <summary>
            Failed to import a client certificate from the platform store into the SSL
            library.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.ICANN_NAME_COLLISION">
            <summary>
            Resolving a hostname to an IP address list included the IPv4 address
            "127.0.53.53". This is a special IP address which ICANN has recommended to
            indicate there was a name collision, and alert admins to a potential
            problem.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_SERVER_CERT_BAD_FORMAT">
            <summary>
            The SSL server presented a certificate which could not be decoded. This is
            not a certificate error code as no X509Certificate object is available. This
            error is fatal.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CT_STH_PARSING_FAILED">
            <summary>
            Certificate Transparency: Received a signed tree head that failed to parse.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CT_STH_INCOMPLETE">
            <summary>
            Certificate Transparency: Received a signed tree head whose JSON parsing was
            OK but was missing some of the fields.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.UNABLE_TO_REUSE_CONNECTION_FOR_PROXY_AUTH">
            <summary>
            The attempt to reuse a connection to send proxy auth credentials failed
            before the AuthController was used to generate credentials. The caller should
            reuse the controller with a new connection. This error is only used
            internally by the network stack.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CT_CONSISTENCY_PROOF_PARSING_FAILED">
            <summary>
            Certificate Transparency: Failed to parse the received consistency proof.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_OBSOLETE_CIPHER">
            <summary>
            The SSL server required an unsupported cipher suite that has since been
            removed. This error will temporarily be signaled on a fallback for one or two
            releases immediately following a cipher suite's removal, after which the
            fallback will be removed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.WS_UPGRADE">
            <summary>
            When a WebSocket handshake is done successfully and the connection has been
            upgraded, the URLRequest is cancelled with this error code.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.READ_IF_READY_NOT_IMPLEMENTED">
            <summary>
            Socket ReadIfReady support is not implemented. This error should not be user
            visible, because the normal Read() method is used as a fallback.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.NO_BUFFER_SPACE">
            <summary>
            No socket buffer space is available.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_CLIENT_AUTH_NO_COMMON_ALGORITHMS">
            <summary>
            There were no common signature algorithms between our client certificate
            private key and the server's preferences.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.EARLY_DATA_REJECTED">
            <summary>
            TLS 1.3 early data was rejected by the server. This will be received before
            any data is returned from the socket. The request should be retried with
            early data disabled.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.WRONG_VERSION_ON_EARLY_DATA">
             <summary>
             TLS 1.3 early data was offered, but the server responded with TLS 1.2 or
             earlier. This is an internal error code to account for a
             backwards-compatibility issue with early data and TLS 1.2. It will be
             received before any data is returned from the socket. The request should be
             retried with early data disabled.
            
             See https://tools.ietf.org/html/rfc8446#appendix-D.3 for details.
             </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.TLS13_DOWNGRADE_DETECTED">
            <summary>
            TLS 1.3 was enabled, but a lower version was negotiated and the server
            returned a value indicating it supported TLS 1.3. This is part of a security
            check in TLS 1.3, but it may also indicate the user is behind a buggy
            TLS-terminating proxy which implemented TLS 1.2 incorrectly. (See
            https://crbug.com/boringssl/226.)
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SSL_KEY_USAGE_INCOMPATIBLE">
            <summary>
            The server's certificate has a keyUsage extension incompatible with the
            negotiated TLS key exchange method.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CERT_COMMON_NAME_INVALID">
             <summary>
             The server responded with a certificate whose common name did not match
             the host name.  This could mean:
            
             1. An attacker has redirected our traffic to their server and is
                presenting a certificate for which they know the private key.
            
             2. The server is misconfigured and responding with the wrong cert.
            
             3. The user is on a wireless network and is being redirected to the
                network's login page.
            
             4. The OS has used a DNS search suffix and the server doesn't have
                a certificate for the abbreviated name in the address bar.
             </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CERT_DATE_INVALID">
             <summary>
             The server responded with a certificate that, by our clock, appears to
             either not yet be valid or to have expired.  This could mean:
            
             1. An attacker is presenting an old certificate for which they have
                managed to obtain the private key.
            
             2. The server is misconfigured and is not presenting a valid cert.
            
             3. Our clock is wrong.
             </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CERT_AUTHORITY_INVALID">
             <summary>
             The server responded with a certificate that is signed by an authority
             we don't trust.  The could mean:
            
             1. An attacker has substituted the real certificate for a cert that
                contains their public key and is signed by their cousin.
            
             2. The server operator has a legitimate certificate from a CA we don't
                know about, but should trust.
            
             3. The server is presenting a self-signed certificate, providing no
                defense against active attackers (but foiling passive attackers).
             </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CERT_CONTAINS_ERRORS">
             <summary>
             The server responded with a certificate that contains errors.
             This error is not recoverable.
            
             MSDN describes this error as follows:
               "The SSL certificate contains errors."
             NOTE: It's unclear how this differs from ERR_CERT_INVALID. For consistency,
             use that code instead of this one from now on.
             </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CERT_NO_REVOCATION_MECHANISM">
            <summary>
            The certificate has no mechanism for determining if it is revoked.  In
            effect, this certificate cannot be revoked.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CERT_UNABLE_TO_CHECK_REVOCATION">
             <summary>
             Revocation information for the security certificate for this site is not
             available.  This could mean:
            
             1. An attacker has compromised the private key in the certificate and is
                blocking our attempt to find out that the cert was revoked.
            
             2. The certificate is unrevoked, but the revocation server is busy or
                unavailable.
             </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CERT_REVOKED">
            <summary>
            The server responded with a certificate has been revoked.
            We have the capability to ignore this error, but it is probably not the
            thing to do.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CERT_INVALID">
             <summary>
             The server responded with a certificate that is invalid.
             This error is not recoverable.
            
             MSDN describes this error as follows:
               "The SSL certificate is invalid."
             </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CERT_WEAK_SIGNATURE_ALGORITHM">
            <summary>
            The server responded with a certificate that is signed using a weak
            signature algorithm.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CERT_NON_UNIQUE_NAME">
            <summary>
            The host name specified in the certificate is not unique.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CERT_WEAK_KEY">
            <summary>
            The server responded with a certificate that contains a weak key (e.g.
            a too-small RSA key).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CERT_NAME_CONSTRAINT_VIOLATION">
            <summary>
            The certificate claimed DNS names that are in violation of name constraints.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CERT_VALIDITY_TOO_LONG">
            <summary>
            The certificate's validity period is too long.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CERTIFICATE_TRANSPARENCY_REQUIRED">
            <summary>
            Certificate Transparency was required for this connection, but the server
            did not provide CT information that complied with the policy.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CERT_SYMANTEC_LEGACY">
            <summary>
            The certificate chained to a legacy Symantec root that is no longer trusted.
            https://g.co/chrome/symantecpkicerts
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CERT_KNOWN_INTERCEPTION_BLOCKED">
            <summary>
            The certificate is known to be used for interception by an entity other
            the device owner.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.INVALID_URL">
            <summary>
            The URL is invalid.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.DISALLOWED_URL_SCHEME">
            <summary>
            The scheme of the URL is disallowed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.UNKNOWN_URL_SCHEME">
            <summary>
            The scheme of the URL is unknown.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.INVALID_REDIRECT">
            <summary>
            Attempting to load an URL resulted in a redirect to an invalid URL.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.TOO_MANY_REDIRECTS">
            <summary>
            Attempting to load an URL resulted in too many redirects.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.UNSAFE_REDIRECT">
            <summary>
            Attempting to load an URL resulted in an unsafe redirect (e.g., a redirect
            to file:// is considered unsafe).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.UNSAFE_PORT">
            <summary>
            Attempting to load an URL with an unsafe port number.  These are port
            numbers that correspond to services, which are not robust to spurious input
            that may be constructed as a result of an allowed web construct (e.g., HTTP
            looks a lot like SMTP, so form submission to port 25 is denied).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.INVALID_RESPONSE">
            <summary>
            The server's response was invalid.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.INVALID_CHUNKED_ENCODING">
            <summary>
            Error in chunked transfer encoding.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.METHOD_NOT_SUPPORTED">
            <summary>
            The server did not support the request method.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.UNEXPECTED_PROXY_AUTH">
            <summary>
            The response was 407 (Proxy Authentication Required), yet we did not send
            the request to a proxy.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.EMPTY_RESPONSE">
            <summary>
            The server closed the connection without sending any data.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.RESPONSE_HEADERS_TOO_BIG">
            <summary>
            The headers section of the response is too large.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.PAC_SCRIPT_FAILED">
            <summary>
            The evaluation of the PAC script failed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.REQUEST_RANGE_NOT_SATISFIABLE">
            <summary>
            The response was 416 (Requested range not satisfiable) and the server cannot
            satisfy the range requested.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.MALFORMED_IDENTITY">
            <summary>
            The identity used for authentication is invalid.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CONTENT_DECODING_FAILED">
            <summary>
            Content decoding of the response body failed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.NETWORK_IO_SUSPENDED">
            <summary>
            An operation could not be completed because all network IO
            is suspended.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SYN_REPLY_NOT_RECEIVED">
            <summary>
            FLIP data received without receiving a SYN_REPLY on the stream.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.ENCODING_CONVERSION_FAILED">
            <summary>
            Converting the response to target encoding failed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.UNRECOGNIZED_FTP_DIRECTORY_LISTING_FORMAT">
            <summary>
            The server sent an FTP directory listing in a format we do not understand.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.NO_SUPPORTED_PROXIES">
            <summary>
            There are no supported proxies in the provided list.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.HTTP2_PROTOCOL_ERROR">
            <summary>
            There is an HTTP/2 protocol error.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.INVALID_AUTH_CREDENTIALS">
            <summary>
            Credentials could not be established during HTTP Authentication.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.UNSUPPORTED_AUTH_SCHEME">
            <summary>
            An HTTP Authentication scheme was tried which is not supported on this
            machine.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.ENCODING_DETECTION_FAILED">
            <summary>
            Detecting the encoding of the response failed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.MISSING_AUTH_CREDENTIALS">
            <summary>
            (GSSAPI) No Kerberos credentials were available during HTTP Authentication.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.UNEXPECTED_SECURITY_LIBRARY_STATUS">
            <summary>
            An unexpected, but documented, SSPI or GSSAPI status code was returned.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.MISCONFIGURED_AUTH_ENVIRONMENT">
            <summary>
            The environment was not set up correctly for authentication (for
            example, no KDC could be found or the principal is unknown.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.UNDOCUMENTED_SECURITY_LIBRARY_STATUS">
            <summary>
            An undocumented SSPI or GSSAPI status code was returned.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.RESPONSE_BODY_TOO_BIG_TO_DRAIN">
            <summary>
            The HTTP response was too big to drain.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.RESPONSE_HEADERS_MULTIPLE_CONTENT_LENGTH">
            <summary>
            The HTTP response contained multiple distinct Content-Length headers.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.INCOMPLETE_HTTP2_HEADERS">
            <summary>
            HTTP/2 headers have been received, but not all of them - status or version
            headers are missing, so we're expecting additional frames to complete them.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.PAC_NOT_IN_DHCP">
            <summary>
            No PAC URL configuration could be retrieved from DHCP. This can indicate
            either a failure to retrieve the DHCP configuration, or that there was no
            PAC URL configured in DHCP.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.RESPONSE_HEADERS_MULTIPLE_CONTENT_DISPOSITION">
            <summary>
            The HTTP response contained multiple Content-Disposition headers.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.RESPONSE_HEADERS_MULTIPLE_LOCATION">
            <summary>
            The HTTP response contained multiple Location headers.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.HTTP2_SERVER_REFUSED_STREAM">
            <summary>
            HTTP/2 server refused the request without processing, and sent either a
            GOAWAY frame with error code NO_ERROR and Last-Stream-ID lower than the
            stream id corresponding to the request indicating that this request has not
            been processed yet, or a RST_STREAM frame with error code REFUSED_STREAM.
            Client MAY retry (on a different connection).  See RFC7540 Section 8.1.4.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.HTTP2_PING_FAILED">
            <summary>
            HTTP/2 server didn't respond to the PING message.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CONTENT_LENGTH_MISMATCH">
            <summary>
            The HTTP response body transferred fewer bytes than were advertised by the
            Content-Length header when the connection is closed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.INCOMPLETE_CHUNKED_ENCODING">
            <summary>
            The HTTP response body is transferred with Chunked-Encoding, but the
            terminating zero-length chunk was never sent when the connection is closed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.QUIC_PROTOCOL_ERROR">
            <summary>
            There is a QUIC protocol error.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.RESPONSE_HEADERS_TRUNCATED">
            <summary>
            The HTTP headers were truncated by an EOF.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.QUIC_HANDSHAKE_FAILED">
            <summary>
            The QUIC crytpo handshake failed.  This means that the server was unable
            to read any requests sent, so they may be resent.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.HTTP2_INADEQUATE_TRANSPORT_SECURITY">
            <summary>
            Transport security is inadequate for the HTTP/2 version.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.HTTP2_FLOW_CONTROL_ERROR">
            <summary>
            The peer violated HTTP/2 flow control.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.HTTP2_FRAME_SIZE_ERROR">
            <summary>
            The peer sent an improperly sized HTTP/2 frame.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.HTTP2_COMPRESSION_ERROR">
            <summary>
            Decoding or encoding of compressed HTTP/2 headers failed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.PROXY_AUTH_REQUESTED_WITH_NO_CONNECTION">
            <summary>
            Proxy Auth Requested without a valid Client Socket Handle.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.HTTP_1_1_REQUIRED">
            <summary>
            HTTP_1_1_REQUIRED error code received on HTTP/2 session.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.PROXY_HTTP_1_1_REQUIRED">
            <summary>
            HTTP_1_1_REQUIRED error code received on HTTP/2 session to proxy.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.PAC_SCRIPT_TERMINATED">
            <summary>
            The PAC script terminated fatally and must be reloaded.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.INVALID_HTTP_RESPONSE">
            <summary>
            The server was expected to return an HTTP/1.x response, but did not. Rather
            than treat it as HTTP/0.9, this error is returned.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CONTENT_DECODING_INIT_FAILED">
            <summary>
            Initializing content decoding failed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.HTTP2_RST_STREAM_NO_ERROR_RECEIVED">
            <summary>
            Received HTTP/2 RST_STREAM frame with NO_ERROR error code.  This error should
            be handled internally by HTTP/2 code, and should not make it above the
            SpdyStream layer.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.HTTP2_PUSHED_STREAM_NOT_AVAILABLE">
            <summary>
            The pushed stream claimed by the request is no longer available.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.HTTP2_CLAIMED_PUSHED_STREAM_RESET_BY_SERVER">
            <summary>
            A pushed stream was claimed and later reset by the server. When this happens,
            the request should be retried.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.TOO_MANY_RETRIES">
            <summary>
            An HTTP transaction was retried too many times due for authentication or
            invalid certificates. This may be due to a bug in the net stack that would
            otherwise infinite loop, or if the server or proxy continually requests fresh
            credentials or presents a fresh invalid certificate.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.HTTP2_STREAM_CLOSED">
            <summary>
            Received an HTTP/2 frame on a closed stream.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.HTTP2_CLIENT_REFUSED_STREAM">
            <summary>
            Client is refusing an HTTP/2 stream.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.HTTP2_PUSHED_RESPONSE_DOES_NOT_MATCH">
            <summary>
            A pushed HTTP/2 stream was claimed by a request based on matching URL and
            request headers, but the pushed response headers do not match the request.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.HTTP_RESPONSE_CODE_FAILURE">
             <summary>
             The server returned a non-2xx HTTP response code.
            
             Not that this error is only used by certain APIs that interpret the HTTP
             response itself. URLRequest for instance just passes most non-2xx
             response back as success.
             </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.QUIC_CERT_ROOT_NOT_KNOWN">
            <summary>
            The certificate presented on a QUIC connection does not chain to a known root
            and the origin connected to is not on a list of domains where unknown roots
            are allowed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CACHE_MISS">
            <summary>
            The cache does not have the requested entry.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CACHE_READ_FAILURE">
            <summary>
            Unable to read from the disk cache.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CACHE_WRITE_FAILURE">
            <summary>
            Unable to write to the disk cache.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CACHE_OPERATION_NOT_SUPPORTED">
            <summary>
            The operation is not supported for this entry.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CACHE_OPEN_FAILURE">
            <summary>
            The disk cache is unable to open this entry.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CACHE_CREATE_FAILURE">
            <summary>
            The disk cache is unable to create this entry.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CACHE_RACE">
            <summary>
            Multiple transactions are racing to create disk cache entries. This is an
            internal error returned from the HttpCache to the HttpCacheTransaction that
            tells the transaction to restart the entry-creation logic because the state
            of the cache has changed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CACHE_CHECKSUM_READ_FAILURE">
            <summary>
            The cache was unable to read a checksum record on an entry. This can be
            returned from attempts to read from the cache. It is an internal error,
            returned by the SimpleCache backend, but not by any URLRequest methods
            or members.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CACHE_CHECKSUM_MISMATCH">
            <summary>
            The cache found an entry with an invalid checksum. This can be returned from
            attempts to read from the cache. It is an internal error, returned by the
            SimpleCache backend, but not by any URLRequest methods or members.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CACHE_LOCK_TIMEOUT">
            <summary>
            Internal error code for the HTTP cache. The cache lock timeout has fired.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CACHE_AUTH_FAILURE_AFTER_READ">
            <summary>
            Received a challenge after the transaction has read some data, and the
            credentials aren't available.  There isn't a way to get them at that point.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CACHE_ENTRY_NOT_SUITABLE">
            <summary>
            Internal not-quite error code for the HTTP cache. In-memory hints suggest
            that the cache entry would not have been useable with the transaction's
            current configuration (e.g. load flags, mode, etc.)
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CACHE_DOOM_FAILURE">
            <summary>
            The disk cache is unable to doom this entry.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CACHE_OPEN_OR_CREATE_FAILURE">
            <summary>
            The disk cache is unable to open or create this entry.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.INSECURE_RESPONSE">
            <summary>
            The server's response was insecure (e.g. there was a cert error).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.NO_PRIVATE_KEY_FOR_CERT">
            <summary>
            An attempt to import a client certificate failed, as the user's key
            database lacked a corresponding private key.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.ADD_USER_CERT_FAILED">
            <summary>
            An error adding a certificate to the OS certificate database.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.INVALID_SIGNED_EXCHANGE">
            <summary>
            An error occurred while handling a signed exchange.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.INVALID_WEB_BUNDLE">
            <summary>
            An error occurred while handling a Web Bundle source.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.FTP_FAILED">
            <summary>
            A generic error for failed FTP control connection command.
            If possible, please use or add a more specific error code.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.FTP_SERVICE_UNAVAILABLE">
            <summary>
            The server cannot fulfill the request at this point. This is a temporary
            error.
            FTP response code 421.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.FTP_TRANSFER_ABORTED">
            <summary>
            The server has aborted the transfer.
            FTP response code 426.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.FTP_FILE_BUSY">
            <summary>
            The file is busy, or some other temporary error condition on opening
            the file.
            FTP response code 450.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.FTP_SYNTAX_ERROR">
            <summary>
            Server rejected our command because of syntax errors.
            FTP response codes 500, 501.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.FTP_COMMAND_NOT_SUPPORTED">
            <summary>
            Server does not support the command we issued.
            FTP response codes 502, 504.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.FTP_BAD_COMMAND_SEQUENCE">
            <summary>
            Server rejected our command because we didn't issue the commands in right
            order.
            FTP response code 503.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.PKCS12_IMPORT_BAD_PASSWORD">
            <summary>
            PKCS #12 import failed due to incorrect password.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.PKCS12_IMPORT_FAILED">
            <summary>
            PKCS #12 import failed due to other error.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.IMPORT_CA_CERT_NOT_CA">
            <summary>
            CA import failed - not a CA cert.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.IMPORT_CERT_ALREADY_EXISTS">
            <summary>
            Import failed - certificate already exists in database.
            Note it's a little weird this is an error but reimporting a PKCS12 is ok
            (no-op).  That's how Mozilla does it, though.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.IMPORT_CA_CERT_FAILED">
            <summary>
            CA import failed due to some other error.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.IMPORT_SERVER_CERT_FAILED">
            <summary>
            Server certificate import failed due to some internal error.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.PKCS12_IMPORT_INVALID_MAC">
            <summary>
            PKCS #12 import failed due to invalid MAC.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.PKCS12_IMPORT_INVALID_FILE">
            <summary>
            PKCS #12 import failed due to invalid/corrupt file.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.PKCS12_IMPORT_UNSUPPORTED">
            <summary>
            PKCS #12 import failed due to unsupported features.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.KEY_GENERATION_FAILED">
            <summary>
            Key generation failed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.PRIVATE_KEY_EXPORT_FAILED">
            <summary>
            Failure to export private key.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.SELF_SIGNED_CERT_GENERATION_FAILED">
            <summary>
            Self-signed certificate generation failed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.CERT_DATABASE_CHANGED">
            <summary>
            The certificate database changed in some way.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.DNS_MALFORMED_RESPONSE">
            <summary>
            DNS resolver received a malformed response.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.DNS_SERVER_REQUIRES_TCP">
            <summary>
            DNS server requires TCP
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.DNS_SERVER_FAILED">
            <summary>
            DNS server failed.  This error is returned for all of the following
            error conditions:
            1 - Format error - The name server was unable to interpret the query.
            2 - Server failure - The name server was unable to process this query
                due to a problem with the name server.
            4 - Not Implemented - The name server does not support the requested
                kind of query.
            5 - Refused - The name server refuses to perform the specified
                operation for policy reasons.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.DNS_TIMED_OUT">
            <summary>
            DNS transaction timed out.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.DNS_CACHE_MISS">
            <summary>
            The entry was not found in cache or other local sources, for lookups where
            only local sources were queried.
            TODO(ericorth): Consider renaming to DNS_LOCAL_MISS or something like that as
            the cache is not necessarily queried either.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.DNS_SEARCH_EMPTY">
            <summary>
            Suffix search list rules prevent resolution of the given host name.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.DNS_SORT_ERROR">
            <summary>
            Failed to sort addresses according to RFC3484.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefErrorCode.DNS_SECURE_RESOLVER_HOSTNAME_RESOLUTION_FAILED">
            <summary>
            Failed to resolve the hostname of a DNS-over-HTTPS server.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefEventFlags">
            <summary>
            Supported event bit flags.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefEventFlags.CommandDown">
            <summary>
            Mac OS-X command key.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefFileDialogMode">
            <summary>
            Supported file dialog modes.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefFileDialogMode.Open">
            <summary>
            Requires that the file exists before allowing the user to pick it.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefFileDialogMode.OpenMultiple">
            <summary>
            Like Open, but allows picking multiple files to open.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefFileDialogMode.OpenFolder">
            <summary>
            Like Open, but selects a folder to open.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefFileDialogMode.Save">
            <summary>
            Allows picking a nonexistent file, and prompts to overwrite if the file
            already exists.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefFileDialogMode.TypeMask">
            <summary>
            General mask defining the bits used for the type values.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefFileDialogMode.OverwritePromptFlag">
            <summary>
            Prompt to overwrite if the user selects an existing file with the Save
            dialog.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefFileDialogMode.HideReadOnlyFlag">
            <summary>
            Do not display read-only files.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefFocusSource">
            <summary>
            Focus sources.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefFocusSource.Navigation">
            <summary>
            The source is explicit navigation via the API (LoadURL(), etc).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefFocusSource.System">
            <summary>
            The source is a system-generated focus event.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefJSDialogType">
            <summary>
            Supported JavaScript dialog types.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefJsonParserError">
            <summary>
            Error codes that can be returned from CefParseJSONAndReturnError.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefJsonParserOptions">
            <summary>
            Options that can be passed to CefParseJSON.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefJsonParserOptions.Rfc">
            <summary>
            Parses the input strictly according to RFC 4627. See comments in Chromium's
            base/json/json_reader.h file for known limitations/deviations from the RFC.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefJsonParserOptions.AllowTrailingCommas">
            <summary>
            Allows commas to exist after the last element in structures.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefJsonWriterOptions">
            <summary>
            Options that can be passed to CefWriteJSON.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefJsonWriterOptions.Default">
            <summary>
            Default behavior.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefJsonWriterOptions.OmitBinaryValues">
            <summary>
            This option instructs the writer that if a Binary value is encountered,
            the value (and key if within a dictionary) will be omitted from the
            output, and success will be returned. Otherwise, if a binary value is
            encountered, failure will be returned.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefJsonWriterOptions.OmitDoubleTypePreservation">
            <summary>
            This option instructs the writer to write doubles that have no fractional
            part as a normal integer (i.e., without using exponential notation
            or appending a '.0') as long as the value is within the range of a
            64-bit int.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefJsonWriterOptions.PrettyPrint">
            <summary>
            Return a slightly nicer formatted json string (pads with whitespace to
            help with readability).
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefKeyEventType">
            <summary>
            Key event types.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefKeyEventType.RawKeyDown">
            <summary>
            Notification that a key transitioned from "up" to "down".
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefKeyEventType.KeyDown">
            <summary>
            Notification that a key was pressed. This does not necessarily correspond
            to a character depending on the key and language. Use KEYEVENT_CHAR for
            character input.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefKeyEventType.KeyUp">
            <summary>
            Notification that a key was released.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefKeyEventType.Char">
            <summary>
            Notification that a character was typed. Use this for text input. Key
            down events may generate 0, 1, or more than one character event depending
            on the key, locale, and operating system.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefLogSeverity">
            <summary>
            Log severity levels.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefLogSeverity.Default">
            <summary>
            Default logging (currently INFO logging).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefLogSeverity.Verbose">
            <summary>
            Verbose logging.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefLogSeverity.Debug">
            <summary>
            DEBUG logging.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefLogSeverity.Info">
            <summary>
            INFO logging.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefLogSeverity.Warning">
            <summary>
            WARNING logging.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefLogSeverity.Error">
            <summary>
            ERROR logging.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefLogSeverity.Fatal">
            <summary>
            FATAL logging.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefLogSeverity.Disable">
            <summary>
            Disable logging to file for all messages, and to stderr for messages with
            severity less than FATAL.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefMainAxisAlignment">
            <summary>
            Specifies where along the main axis the CefBoxLayout child views should be
            laid out.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefMainAxisAlignment.Start">
            <summary>
            Child views will be left-aligned.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefMainAxisAlignment.Center">
            <summary>
            Child views will be center-aligned.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefMainAxisAlignment.End">
            <summary>
            Child views will be right-aligned.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefMediaRouteConnectionState">
            <summary>
            Connection state for a MediaRoute object.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefMediaRouteCreateResult">
            <summary>
            Result codes for CefMediaRouter::CreateRoute. These constants match
            their equivalents in Chromium's route_request_result.h and should not be
            renumbered.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefMenuColorType">
            <summary>
            Supported color types for menu items.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefMenuId">
            <summary>
            Supported menu IDs. Non-English translations can be provided for the
            IDS_MENU_* strings in CefResourceBundleHandler::GetLocalizedString().
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefMenuItemType">
            <summary>
            Supported menu item types.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefMouseButtonType">
            <summary>
            Mouse button types.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefPaintElementType">
            <summary>
            Paint element types.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefPathKey">
            <summary>
            Path key values.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefPathKey.Current">
            <summary>
            Current directory.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefPathKey.DirExe">
            <summary>
            Directory containing PK_FILE_EXE.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefPathKey.DirModule">
            <summary>
            Directory containing PK_FILE_MODULE.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefPathKey.DirTemp">
            <summary>
            Temporary directory.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefPathKey.FileExe">
            <summary>
            Path and filename of the current executable.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefPathKey.FileModule">
            <summary>
            Path and filename of the module containing the CEF code (usually the libcef
            module).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefPathKey.LocalAppData">
            <summary>
            "Local Settings\Application Data" directory under the user profile
            directory on Windows.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefPathKey.UserData">
            <summary>
            "Application Data" directory under the user profile directory on Windows
            and "~/Library/Application Support" directory on Mac OS X.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefPathKey.Resources">
            <summary>
            Directory containing application resources. Can be configured via
            CefSettings.resources_dir_path.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefPdfPrintMarginType">
            <summary>
            Margin type for PDF printing.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefPdfPrintMarginType.Default">
            <summary>
            Default margins.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefPdfPrintMarginType.None">
            <summary>
            No margins.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefPdfPrintMarginType.Minimum">
            <summary>
            Minimum margins.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefPdfPrintMarginType.Custom">
            <summary>
            Custom margins using the |margin_*| values from cef_pdf_print_settings_t.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefPluginPolicy">
            <summary>
            Plugin policies supported by CefRequestContextHandler::OnBeforePluginLoad.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefPluginPolicy.Allow">
            <summary>
            Allow the content.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefPluginPolicy.DetectImportant">
            <summary>
            Allow important content and block unimportant content based on heuristics.
            The user can manually load blocked content.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefPluginPolicy.Block">
            <summary>
            Block the content. The user can manually load blocked content.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefPluginPolicy.Disable">
            <summary>
            Disable the content. The user cannot load disabled content.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefPointerType">
            <summary>
            The device type that caused the event.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefPostDataElementType">
            <summary>
            Post data elements may represent either bytes or files.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefProcessId">
            <summary>
            Existing process IDs.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefReferrerPolicy">
            <summary>
            Policy for how the Referrer HTTP header value will be sent during navigation.
            If the `--no-referrers` command-line flag is specified then the policy value
            will be ignored and the Referrer value will never be sent.
            Must be kept synchronized with net::URLRequest::ReferrerPolicy from Chromium.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefReferrerPolicy.ClearReferrerOnTransitionFromSecureToInsecure">
            <summary>
            Clear the referrer header if the header value is HTTPS but the request
            destination is HTTP. This is the default behavior.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefReferrerPolicy.Default">
            <summary>
            Default policy (same as CLEAR_REFERRER_ON_TRANSITION_FROM_SECURE_TO_INSECURE).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefReferrerPolicy.ReduceReferrerGranularityOnTransitionCrossOrigin">
            <summary>
            A slight variant on CLEAR_REFERRER_ON_TRANSITION_FROM_SECURE_TO_INSECURE:
            If the request destination is HTTP, an HTTPS referrer will be cleared. If
            the request's destination is cross-origin with the referrer (but does not
            downgrade), the referrer's granularity will be stripped down to an origin
            rather than a full URL. Same-origin requests will send the full referrer.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefReferrerPolicy.OriginOnlyOnTransitionCrossOrigin">
            <summary>
            Strip the referrer down to an origin when the origin of the referrer is
            different from the destination's origin.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefReferrerPolicy.NeverClearReferrer">
            <summary>
            Never change the referrer.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefReferrerPolicy.Origin">
            <summary>
            Strip the referrer down to the origin regardless of the redirect location.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefReferrerPolicy.ClearReferrerOnTransitionCrossOrigin">
            <summary>
            Clear the referrer when the request's referrer is cross-origin with the
            request's destination.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefReferrerPolicy.OriginClearOnTransitionFromSecureToInsecure">
            <summary>
            Strip the referrer down to the origin, but clear it entirely if the
            referrer value is HTTPS and the destination is HTTP.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefReferrerPolicy.NoReferrer">
            <summary>
            Always clear the referrer regardless of the request destination.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefResourceType">
            <summary>
            Resource type for a request.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResourceType.MainFrame">
            <summary>
            Top level page.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResourceType.SubFrame">
            <summary>
            Frame or iframe.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResourceType.Stylesheet">
            <summary>
            CSS stylesheet.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResourceType.Script">
            <summary>
            External script.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResourceType.Image">
            <summary>
            Image (jpg/gif/png/etc).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResourceType.FontResource">
            <summary>
            Font.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResourceType.SubResource">
            <summary>
            Some other subresource. This is the default type if the actual type is
            unknown.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResourceType.Object">
            <summary>
            Object (or embed) tag for a plugin, or a resource that a plugin requested.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResourceType.Media">
            <summary>
            Media resource.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResourceType.Worker">
            <summary>
            Main resource of a dedicated worker.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResourceType.SharedWorker">
            <summary>
            Main resource of a shared worker.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResourceType.Prefetch">
            <summary>
            Explicitly requested prefetch.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResourceType.Favicon">
            <summary>
            Favicon.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResourceType.Xhr">
            <summary>
            XMLHttpRequest.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResourceType.Ping">
            <summary>
            A request for a &lt;ping&gt;.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResourceType.ServiceWorker">
            <summary>
            Main resource of a service worker.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResourceType.CspReport">
            <summary>
            A report of Content Security Policy violations.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResourceType.PluginResource">
            <summary>
            A resource that a plugin requested.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefResponseFilterStatus">
            <summary>
            Return values for CefResponseFilter::Filter().
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResponseFilterStatus.NeedMoreData">
            <summary>
            Some or all of the pre-filter data was read successfully but more data is
            needed in order to continue filtering (filtered output is pending).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResponseFilterStatus.Done">
            <summary>
            Some or all of the pre-filter data was read successfully and all available
            filtered output has been written.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefResponseFilterStatus.Error">
            <summary>
            An error occurred during filtering.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefReturnValue">
            <summary>
            Return value types.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefReturnValue.Cancel">
            <summary>
            Cancel immediately.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefReturnValue.Continue">
            <summary>
            Continue immediately.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefReturnValue.ContinueAsync">
            <summary>
            Continue asynchronously (usually via a callback).
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefScaleFactor">
            <summary>
            Supported UI scale factors for the platform. SCALE_FACTOR_NONE is used for
            density independent resources such as string, html/js files or an image that
            can be used for any scale factors (such as wallpapers).
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefSchemeOptions">
            <summary>
            Configuration options for registering a custom scheme.
            These values are used when calling AddCustomScheme.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefSchemeOptions.Standard">
             <summary>
             If CEF_SCHEME_OPTION_STANDARD is set the scheme will be treated as a
             standard scheme. Standard schemes are subject to URL canonicalization and
             parsing rules as defined in the Common Internet Scheme Syntax RFC 1738
             Section 3.1 available at http://www.ietf.org/rfc/rfc1738.txt
            
             In particular, the syntax for standard scheme URLs must be of the form:
             <pre>
              [scheme]://[username]:[password]@[host]:[port]/[url-path]
             </pre> Standard scheme URLs must have a host component that is a fully
             qualified domain name as defined in Section 3.5 of RFC 1034 [13] and
             Section 2.1 of RFC 1123. These URLs will be canonicalized to
             "scheme://host/path" in the simplest case and
             "scheme://username:password@host:port/path" in the most explicit case. For
             example, "scheme:host/path" and "scheme:///host/path" will both be
             canonicalized to "scheme://host/path". The origin of a standard scheme URL
             is the combination of scheme, host and port (i.e., "scheme://host:port" in
             the most explicit case).
            
             For non-standard scheme URLs only the "scheme:" component is parsed and
             canonicalized. The remainder of the URL will be passed to the handler as-
             is. For example, "scheme:///some%20text" will remain the same. Non-standard
             scheme URLs cannot be used as a target for form submission.
             </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefSchemeOptions.Local">
            <summary>
            If CEF_SCHEME_OPTION_LOCAL is set the scheme will be treated with the same
            security rules as those applied to "file" URLs. Normal pages cannot link to
            or access local URLs. Also, by default, local URLs can only perform
            XMLHttpRequest calls to the same URL (origin + path) that originated the
            request. To allow XMLHttpRequest calls from a local URL to other URLs with
            the same origin set the CefSettings.file_access_from_file_urls_allowed
            value to true (1). To allow XMLHttpRequest calls from a local URL to all
            origins set the CefSettings.universal_access_from_file_urls_allowed value
            to true (1).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefSchemeOptions.DisplayIsolated">
            <summary>
            If CEF_SCHEME_OPTION_DISPLAY_ISOLATED is set the scheme can only be
            displayed from other content hosted with the same scheme. For example,
            pages in other origins cannot create iframes or hyperlinks to URLs with the
            scheme. For schemes that must be accessible from other schemes don't set
            this, set CEF_SCHEME_OPTION_CORS_ENABLED, and use CORS
            "Access-Control-Allow-Origin" headers to further restrict access.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefSchemeOptions.Secure">
            <summary>
            If CEF_SCHEME_OPTION_SECURE is set the scheme will be treated with the same
            security rules as those applied to "https" URLs. For example, loading this
            scheme from other secure schemes will not trigger mixed content warnings.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefSchemeOptions.CorsEnabled">
            <summary>
            If CEF_SCHEME_OPTION_CORS_ENABLED is set the scheme can be sent CORS
            requests. This value should be set in most cases where
            CEF_SCHEME_OPTION_STANDARD is set.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefSchemeOptions.CspBypassing">
            <summary>
            If CEF_SCHEME_OPTION_CSP_BYPASSING is set the scheme can bypass Content-
            Security-Policy (CSP) checks. This value should not be set in most cases
            where CEF_SCHEME_OPTION_STANDARD is set.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefSchemeOptions.FetchEnabled">
            <summary>
            If CEF_SCHEME_OPTION_FETCH_ENABLED is set the scheme can perform Fetch API
            requests.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefSslContentStatus">
            <summary>
            Supported SSL content status flags. See content/public/common/ssl_status.h
            for more information.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefSslVersion">
            <summary>
            Supported SSL version values. See net/ssl/ssl_connection_status_flags.h
            for more information.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefSslVersion.Unknown">
            <summary>
            Unknown SSL version.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefState">
            <summary>
            Represents the state of a setting.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefState.Default">
            <summary>
            Use the default state for the setting.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefState.Enabled">
            <summary>
            Enable or allow the setting.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefState.Disabled">
            <summary>
            Disable or disallow the setting.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefStorageType">
            <summary>
            Storage types.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefTerminationStatus">
            <summary>
            Process termination status values.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefTerminationStatus.Termination">
            <summary>
            Non-zero exit status.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefTerminationStatus.WasKilled">
            <summary>
            SIGKILL or task manager kill.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefTerminationStatus.ProcessCrashed">
            <summary>
            Segmentation fault.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefTerminationStatus.OutOfMemory">
            <summary>
            Out of memory. Some platforms may use TS_PROCESS_CRASHED instead.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefTextInputMode">
            <summary>
            Input mode of a virtual keyboard. These constants match their equivalents
            in Chromium's text_input_mode.h and should not be renumbered.
            See https://html.spec.whatwg.org/#input-modalities:-the-inputmode-attribute
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefTextStyle">
            <summary>
            Text style types. Should be kepy in sync with gfx::TextStyle.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefThreadId">
            <summary>
            Existing thread IDs.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefThreadId.UI">
            <summary>
            The main thread in the browser. This will be the same as the main
            application thread if CefInitialize() is called with a
            CefSettings.multi_threaded_message_loop value of false. Do not perform
            blocking tasks on this thread. All tasks posted after
            CefBrowserProcessHandler::OnContextInitialized() and before CefShutdown()
            are guaranteed to run. This thread will outlive all other CEF threads.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefThreadId.FileBackground">
            <summary>
            Used for blocking tasks (e.g. file system access) where the user won't
            notice if the task takes an arbitrarily long time to complete. All tasks
            posted after CefBrowserProcessHandler::OnContextInitialized() and before
            CefShutdown() are guaranteed to run.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefThreadId.FileUserVisible">
            <summary>
            Used for blocking tasks (e.g. file system access) that affect UI or
            responsiveness of future user interactions. Do not use if an immediate
            response to a user interaction is expected. All tasks posted after
            CefBrowserProcessHandler::OnContextInitialized() and before CefShutdown()
            are guaranteed to run.
            Examples:
            - Updating the UI to reflect progress on a long task.
            - Loading data that might be shown in the UI after a future user
              interaction.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefThreadId.FileUserBlocking">
            <summary>
            Used for blocking tasks (e.g. file system access) that affect UI
            immediately after a user interaction. All tasks posted after
            CefBrowserProcessHandler::OnContextInitialized() and before CefShutdown()
            are guaranteed to run.
            Example: Generating data shown in the UI immediately after a click.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefThreadId.ProcessLauncher">
            <summary>
            Used to launch and terminate browser processes.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefThreadId.IO">
            <summary>
            Used to process IPC and network messages. Do not perform blocking tasks on
            this thread. All tasks posted after
            CefBrowserProcessHandler::OnContextInitialized() and before CefShutdown()
            are guaranteed to run.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefThreadId.Renderer">
            <summary>
            The main thread in the renderer. Used for all WebKit and V8 interaction.
            Tasks may be posted to this thread after
            CefRenderProcessHandler::OnRenderThreadCreated but are not guaranteed to
            run before sub-process termination (sub-processes may be killed at any time
            without warning).
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefTouchEventType">
            <summary>
            Touch points states types.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefTransitionType">
            <summary>
            Transition type for a request. Made up of one source value and 0 or more
            qualifiers.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefTransitionType.Link">
            <summary>
            Source is a link click or the JavaScript window.open function. This is
            also the default value for requests like sub-resource loads that are not
            navigations.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefTransitionType.Explicit">
            <summary>
            Source is some other "explicit" navigation. This is the default value for
            navigations where the actual type is unknown. See also TT_DIRECT_LOAD_FLAG.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefTransitionType.AutoSubframe">
            <summary>
            Source is a subframe navigation. This is any content that is automatically
            loaded in a non-toplevel frame. For example, if a page consists of several
            frames containing ads, those ad URLs will have this transition type.
            The user may not even realize the content in these pages is a separate
            frame, so may not care about the URL.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefTransitionType.ManualSubframe">
            <summary>
            Source is a subframe navigation explicitly requested by the user that will
            generate new navigation entries in the back/forward list. These are
            probably more important than frames that were automatically loaded in
            the background because the user probably cares about the fact that this
            link was loaded.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefTransitionType.FormSubmit">
            <summary>
            Source is a form submission by the user. NOTE: In some situations
            submitting a form does not result in this transition type. This can happen
            if the form uses a script to submit the contents.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefTransitionType.Reload">
            <summary>
            Source is a "reload" of the page via the Reload function or by re-visiting
            the same URL. NOTE: This is distinct from the concept of whether a
            particular load uses "reload semantics" (i.e. bypasses cached data).
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefTransitionType.SourceMask">
            <summary>
            General mask defining the bits used for the source values.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefTransitionType.BlockedFlag">
            <summary>
            Attempted to visit a URL but was blocked.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefTransitionType.ForwardBackFlag">
            <summary>
            Used the Forward or Back function to navigate among browsing history.
            Will be ORed to the transition type for the original load.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefTransitionType.DirectLoadFlag">
            <summary>
            Loaded a URL directly via CreateBrowser, LoadURL or LoadRequest.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefTransitionType.ChainStartFlag">
            <summary>
            The beginning of a navigation chain.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefTransitionType.ChainEndFlag">
            <summary>
            The last transition in a redirect chain.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefTransitionType.ClientRedirectFlag">
            <summary>
            Redirects caused by JavaScript or a meta refresh tag on the page.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefTransitionType.ServerRedirectFlag">
            <summary>
            Redirects sent from the server by HTTP headers.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefTransitionType.IsRedirectMask">
            <summary>
            Used to test whether a transition involves a redirect.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefTransitionType.QualifierMask">
            <summary>
            General mask defining the bits used for the qualifiers.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefUriUnescapeRules">
            <summary>
            URI unescape rules passed to CefURIDecode().
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefUriUnescapeRules.None">
            <summary>
            Don't unescape anything at all.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefUriUnescapeRules.Normal">
            <summary>
            Don't unescape anything special, but all normal unescaping will happen.
            This is a placeholder and can't be combined with other flags (since it's
            just the absence of them). All other unescape rules imply "normal" in
            addition to their special meaning. Things like escaped letters, digits,
            and most symbols will get unescaped with this mode.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefUriUnescapeRules.Spaces">
            <summary>
            Convert %20 to spaces. In some places where we're showing URLs, we may
            want this. In places where the URL may be copied and pasted out, then
            you wouldn't want this since it might not be interpreted in one piece
            by other applications.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefUriUnescapeRules.PathSeparators">
            <summary>
            Unescapes '/' and '\\'. If these characters were unescaped, the resulting
            URL won't be the same as the source one. Moreover, they are dangerous to
            unescape in strings that will be used as file paths or names. This value
            should only be used when slashes don't have special meaning, like data
            URLs.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefUriUnescapeRules.UrlSpecialCharsExceptPathSeparators">
            <summary>
            Unescapes various characters that will change the meaning of URLs,
            including '%', '+', '&amp;', '#'. Does not unescape path separators.
            If these characters were unescaped, the resulting URL won't be the same
            as the source one. This flag is used when generating final output like
            filenames for URLs where we won't be interpreting as a URL and want to do
            as much unescaping as possible.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefUriUnescapeRules.ReplacePlusWithSpace">
            <summary>
            URL queries use "+" for space. This flag controls that replacement.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefUrlRequestOptions">
            <summary>
            Flags used to customize the behavior of CefURLRequest.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefUrlRequestOptions.None">
            <summary>
            Default behavior.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefUrlRequestOptions.SkipCache">
            <summary>
            If set the cache will be skipped when handling the request. Setting this
            value is equivalent to specifying the "Cache-Control: no-cache" request
            header. Setting this value in combination with UR_FLAG_ONLY_FROM_CACHE will
            cause the request to fail.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefUrlRequestOptions.OnlyFromCache">
            <summary>
            If set the request will fail if it cannot be served from the cache (or some
            equivalent local store). Setting this value is equivalent to specifying the
            "Cache-Control: only-if-cached" request header. Setting this value in
            combination with UR_FLAG_SKIP_CACHE or UR_FLAG_DISABLE_CACHE will cause the
            request to fail.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefUrlRequestOptions.DisableCache">
            <summary>
            If set the cache will not be used at all. Setting this value is equivalent
            to specifying the "Cache-Control: no-store" request header. Setting this
            value in combination with UR_FLAG_ONLY_FROM_CACHE will cause the request to
            fail.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefUrlRequestOptions.AllowStoredCredentials">
            <summary>
            If set user name, password, and cookies may be sent with the request, and
            cookies may be saved from the response.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefUrlRequestOptions.ReportUploadProgress">
            <summary>
            If set upload progress events will be generated when a request has a body.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefUrlRequestOptions.NoDownloadData">
            <summary>
            If set the <c>CefUrlRequestClient.OnDownloadData</c> method will not be called.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefUrlRequestOptions.NoRetryOn5XX">
            <summary>
            If set 5XX redirect errors will be propagated to the observer instead of
            automatically re-tried. This currently only applies for requests
            originated in the browser process.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefUrlRequestOptions.StopOnRedirect">
            <summary>
            If set 3XX responses will cause the fetch to halt immediately rather than
            continue through the redirect.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefUrlRequestStatus.Unknown">
            <summary>
            Unknown status.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefUrlRequestStatus.Success">
            <summary>
            Request succeeded.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefUrlRequestStatus.IOPending">
            <summary>
            An IO request is pending, and the caller will be informed when it is
            completed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefUrlRequestStatus.Canceled">
            <summary>
            Request was canceled programatically.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefUrlRequestStatus.Failed">
            <summary>
            Request failed for some reason.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefV8AccessControl">
            <summary>
            V8 access control values.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefV8PropertyAttribute">
            <summary>
            V8 property attribute values.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefValueType">
            <summary>
            Supported value types.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefWindowOpenDisposition">
            <summary>
            The manner in which a link click should be opened. These constants match
            their equivalents in Chromium's window_open_disposition.h and should not be
            renumbered.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefXmlEncoding">
            <summary>
            Supported XML encoding types. The parser supports ASCII, ISO-8859-1, and
            UTF16 (LE and BE) by default. All other types must be translated to UTF8
            before being passed to the parser. If a BOM is detected and the correct
            decoder is available then that decoder will be used automatically.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefXmlNodeType">
            <summary>
            XML node types.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.Interop.cef_string_userfree">
            <summary>
            It is sometimes necessary for the system to allocate string structures with
            the expectation that the user will free them. The userfree types act as a
            hint that the user is responsible for freeing the structure.
            </summary>
            <remarks>
            <c>cef_string_userfree*</c> === <c>cef_string_userfree_t</c>.
            </remarks>
        </member>
        <member name="T:Xilium.CefGlue.Platform.Windows.WindowStyle">
            <summary>
            Window Styles.
            The following styles can be specified wherever a window style is required.
            After the control has been created, these styles cannot be modified, except as noted.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_BORDER">
            <summary>The window has a thin-line border.</summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_CAPTION">
            <summary>The window has a title bar (includes the WS_BORDER style).</summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_CHILD">
            <summary>The window is a child window. A window with this style cannot have a menu bar. This style cannot be used with the WS_POPUP style.</summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_CLIPCHILDREN">
            <summary>Excludes the area occupied by child windows when drawing occurs within the parent window. This style is used when creating the parent window.</summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, when a particular child window receives a WM_PAINT message, the WS_CLIPSIBLINGS style clips all other overlapping child windows out of the region of the child window to be updated.
            If WS_CLIPSIBLINGS is not specified and child windows overlap, it is possible, when drawing within the client area of a child window, to draw within the client area of a neighboring child window.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_DISABLED">
            <summary>The window is initially disabled. A disabled window cannot receive input from the user. To change this after a window has been created, use the EnableWindow function.</summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_DLGFRAME">
            <summary>The window has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar.</summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_GROUP">
            <summary>
            The window is the first control of a group of controls. The group consists of this first control and all controls defined after it, up to the next control with the WS_GROUP style.
            The first control in each group usually has the WS_TABSTOP style so that the user can move from group to group. The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys.
            You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_HSCROLL">
            <summary>The window has a horizontal scroll bar.</summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_MAXIMIZE">
            <summary>The window is initially maximized.</summary> 
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_MAXIMIZEBOX">
            <summary>The window has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary> 
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_MINIMIZE">
            <summary>The window is initially minimized.</summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_MINIMIZEBOX">
            <summary>The window has a minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_OVERLAPPED">
            <summary>The window is an overlapped window. An overlapped window has a title bar and a border.</summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_OVERLAPPEDWINDOW">
            <summary>The window is an overlapped window.</summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_POPUP">
            <summary>The window is a pop-up window. This style cannot be used with the WS_CHILD style.</summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_POPUPWINDOW">
            <summary>The window is a pop-up window. The WS_CAPTION and WS_POPUPWINDOW styles must be combined to make the window menu visible.</summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_SIZEFRAME">
            <summary>The window has a sizing border.</summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_SYSMENU">
            <summary>The window has a window menu on its title bar. The WS_CAPTION style must also be specified.</summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_TABSTOP">
            <summary>
            The window is a control that can receive the keyboard focus when the user presses the TAB key.
            Pressing the TAB key changes the keyboard focus to the next control with the WS_TABSTOP style.  
            You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
            For user-created windows and modeless dialogs to work with tab stops, alter the message loop to call the IsDialogMessage function.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_VISIBLE">
            <summary>The window is initially visible. This style can be turned on and off by using the ShowWindow or SetWindowPos function.</summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyle.WS_VSCROLL">
            <summary>The window has a vertical scroll bar.</summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_ACCEPTFILES">
            <summary>
            Specifies that a window created with this style accepts drag-drop files.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_APPWINDOW">
            <summary>
            Forces a top-level window onto the taskbar when the window is visible.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_CLIENTEDGE">
            <summary>
            Specifies that a window has a border with a sunken edge.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_COMPOSITED">
            <summary>
            Windows XP: Paints all descendants of a window in bottom-to-top painting order using double-buffering. For more information, see Remarks. This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. 
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_CONTEXTHELP">
            <summary>
            Includes a question mark in the title bar of the window. When the user clicks the question mark, the cursor changes to a question mark with a pointer. If the user then clicks a child window, the child receives a WM_HELP message. The child window should pass the message to the parent window procedure, which should call the WinHelp function using the HELP_WM_HELP command. The Help application displays a pop-up window that typically contains help for the child window.
            WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_CONTROLPARENT">
            <summary>
            The window itself contains child windows that should take part in dialog box navigation. If this style is specified, the dialog manager recurses into children of this window when performing navigation operations such as handling the TAB key, an arrow key, or a keyboard mnemonic.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_DLGMODALFRAME">
            <summary>
            Creates a window that has a double border; the window can, optionally, be created with a title bar by specifying the WS_CAPTION style in the dwStyle parameter.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_LAYERED">
            <summary>
            Windows 2000/XP: Creates a layered window. Note that this cannot be used for child windows. Also, this cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. 
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_LAYOUTRTL">
            <summary>
            Arabic and Hebrew versions of Windows 98/Me, Windows 2000/XP: Creates a window whose horizontal origin is on the right edge. Increasing horizontal values advance to the left. 
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_LEFT">
            <summary>
            Creates a window that has generic left-aligned properties. This is the default.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_LEFTSCROLLBAR">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the vertical scroll bar (if present) is to the left of the client area. For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_LTRREADING">
            <summary>
            The window text is displayed using left-to-right reading-order properties. This is the default.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_MDICHILD">
            <summary>
            Creates a multiple-document interface (MDI) child window.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_NOACTIVATE">
            <summary>
            Windows 2000/XP: A top-level window created with this style does not become the foreground window when the user clicks it. The system does not bring this window to the foreground when the user minimizes or closes the foreground window. 
            To activate the window, use the SetActiveWindow or SetForegroundWindow function.
            The window does not appear on the taskbar by default. To force the window to appear on the taskbar, use the WS_EX_APPWINDOW style.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_NOINHERITLAYOUT">
            <summary>
            Windows 2000/XP: A window created with this style does not pass its window layout to its child windows.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_NOPARENTNOTIFY">
            <summary>
            Specifies that a child window created with this style does not send the WM_PARENTNOTIFY message to its parent window when it is created or destroyed.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_OVERLAPPEDWINDOW">
            <summary>
            Combines the WS_EX_CLIENTEDGE and WS_EX_WINDOWEDGE styles.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_PALETTEWINDOW">
            <summary>
            Combines the WS_EX_WINDOWEDGE, WS_EX_TOOLWINDOW, and WS_EX_TOPMOST styles.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_RIGHT">
            <summary>
            The window has generic "right-aligned" properties. This depends on the window class. This style has an effect only if the shell language is Hebrew, Arabic, or another language that supports reading-order alignment; otherwise, the style is ignored.
            Using the WS_EX_RIGHT style for static or edit controls has the same effect as using the SS_RIGHT or ES_RIGHT style, respectively. Using this style with button controls has the same effect as using BS_RIGHT and BS_RIGHTBUTTON styles.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_RIGHTSCROLLBAR">
            <summary>
            Vertical scroll bar (if present) is to the right of the client area. This is the default.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_RTLREADING">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading-order alignment, the window text is displayed using right-to-left reading-order properties. For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_STATICEDGE">
            <summary>
            Creates a window with a three-dimensional border style intended to be used for items that do not accept user input.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_TOOLWINDOW">
            <summary>
            Creates a tool window; that is, a window intended to be used as a floating toolbar. A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font. A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB. If a tool window has a system menu, its icon is not displayed on the title bar. However, you can display the system menu by right-clicking or by typing ALT+SPACE. 
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_TOPMOST">
            <summary>
            Specifies that a window created with this style should be placed above all non-topmost windows and should stay above them, even when the window is deactivated. To add or remove this style, use the SetWindowPos function.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_TRANSPARENT">
            <summary>
            Specifies that a window created with this style should not be painted until siblings beneath the window (that were created by the same thread) have been painted. The window appears transparent because the bits of underlying sibling windows have already been painted.
            To achieve transparency without these restrictions, use the SetWindowRgn function.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.Platform.Windows.WindowStyleEx.WS_EX_WINDOWEDGE">
            <summary>
            Specifies that a window has a border with a raised edge.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefBrowserSettings">
            <summary>
            Browser initialization settings. Specify <c>null</c> or 0 to get the recommended
            default values. The consequences of using custom values may not be well
            tested. Many of these and other settings can also configured using command-
            line switches.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.WindowlessFrameRate">
            <summary>
            The maximum rate in frames per second (fps) that CefRenderHandler::OnPaint
            will be called for a windowless browser. The actual fps may be lower if
            the browser cannot generate frames at the requested rate. The minimum
            value is 1 and the maximum value is 60 (default 30). This value can also be
            changed dynamically via CefBrowserHost::SetWindowlessFrameRate.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.DefaultEncoding">
            <summary>
            Default encoding for Web content. If empty "ISO-8859-1" will be used. Also
            configurable using the "default-encoding" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.RemoteFonts">
            <summary>
            Controls the loading of fonts from remote sources. Also configurable using
            the "disable-remote-fonts" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.JavaScript">
            <summary>
            Controls whether JavaScript can be executed. Also configurable using the
            "disable-javascript" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.JavaScriptCloseWindows">
            <summary>
            Controls whether JavaScript can be used to close windows that were not
            opened via JavaScript. JavaScript can still be used to close windows that
            were opened via JavaScript or that have no back/forward history. Also
            configurable using the "disable-javascript-close-windows" command-line
            switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.JavaScriptAccessClipboard">
            <summary>
            Controls whether JavaScript can access the clipboard. Also configurable
            using the "disable-javascript-access-clipboard" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.JavaScriptDomPaste">
            <summary>
            Controls whether DOM pasting is supported in the editor via
            execCommand("paste"). The |javascript_access_clipboard| setting must also
            be enabled. Also configurable using the "disable-javascript-dom-paste"
            command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.Plugins">
            <summary>
            Controls whether any plugins will be loaded. Also configurable using the
            "disable-plugins" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.UniversalAccessFromFileUrls">
            <summary>
            Controls whether file URLs will have access to all URLs. Also configurable
            using the "allow-universal-access-from-files" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.FileAccessFromFileUrls">
            <summary>
            Controls whether file URLs will have access to other file URLs. Also
            configurable using the "allow-access-from-files" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.WebSecurity">
            <summary>
            Controls whether web security restrictions (same-origin policy) will be
            enforced. Disabling this setting is not recommend as it will allow risky
            security behavior such as cross-site scripting (XSS). Also configurable
            using the "disable-web-security" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.ImageLoading">
            <summary>
            Controls whether image URLs will be loaded from the network. A cached image
            will still be rendered if requested. Also configurable using the
            "disable-image-loading" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.ImageShrinkStandaloneToFit">
            <summary>
            Controls whether standalone images will be shrunk to fit the page. Also
            configurable using the "image-shrink-standalone-to-fit" command-line
            switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.TextAreaResize">
            <summary>
            Controls whether text areas can be resized. Also configurable using the
            "disable-text-area-resize" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.TabToLinks">
            <summary>
            Controls whether the tab key can advance focus to links. Also configurable
            using the "disable-tab-to-links" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.LocalStorage">
            <summary>
            Controls whether local storage can be used. Also configurable using the
            "disable-local-storage" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.Databases">
            <summary>
            Controls whether databases can be used. Also configurable using the
            "disable-databases" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.ApplicationCache">
            <summary>
            Controls whether the application cache can be used. Also configurable using
            the "disable-application-cache" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.WebGL">
            <summary>
            Controls whether WebGL can be used. Note that WebGL requires hardware
            support and may not work on all systems even when enabled. Also
            configurable using the "disable-webgl" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.BackgroundColor">
            <summary>
            Background color used for the browser before a document is loaded and when
            no document color is specified. The alpha component must be either fully
            opaque (0xFF) or fully transparent (0x00). If the alpha component is fully
            opaque then the RGB components will be used as the background color. If the
            alpha component is fully transparent for a windowed browser then the
            CefSettings.background_color value will be used. If the alpha component is
            fully transparent for a windowless (off-screen) browser then transparent
            painting will be enabled.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefBrowserSettings.AcceptLanguageList">
            <summary>
            Comma delimited ordered list of language codes without any whitespace that
            will be used in the "Accept-Language" HTTP header. May be set globally
            using the CefBrowserSettings.accept_language_list value. If both values are
            empty then "en-US,en" will be used.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefCompositionUnderline">
            <summary>
            Structure representing IME composition underline information. This is a thin
            wrapper around Blink's WebCompositionUnderline class and should be kept in
            sync with that.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefCompositionUnderline.Range">
            <summary>
            Underline character range.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefCompositionUnderline.Color">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="F:Xilium.CefGlue.CefCompositionUnderline.BackgroundColor">
            <summary>
            Background color.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefCompositionUnderline.Thick">
            <summary>
            Set to true (1) for thick underline.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefCursorInfo">
            <summary>
            Structure representing cursor information. |buffer| will be
            |size.width|*|size.height|*4 bytes in size and represents a BGRA image with
            an upper-left origin.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefKeyEvent.EventType">
            <summary>
            The type of keyboard event.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefKeyEvent.Modifiers">
            <summary>
            Bit flags describing any pressed modifier keys. See
            cef_event_flags_t for values.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefKeyEvent.WindowsKeyCode">
            <summary>
            The Windows key code for the key event. This value is used by the DOM
            specification. Sometimes it comes directly from the event (i.e. on
            Windows) and sometimes it's determined using a mapping function. See
            WebCore/platform/chromium/KeyboardCodes.h for the list of values.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefKeyEvent.NativeKeyCode">
            <summary>
            The actual key code genenerated by the platform.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefKeyEvent.IsSystemKey">
            <summary>
            Indicates whether the event is considered a "system key" event (see
            http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx for details).
            This value will always be false on non-Windows platforms.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefKeyEvent.Character">
            <summary>
            The character generated by the keystroke.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefKeyEvent.UnmodifiedCharacter">
            <summary>
            Same as |character| but unmodified by any concurrently-held modifiers
            (except shift). This is useful for working out shortcut keys.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefKeyEvent.FocusOnEditableField">
            <summary>
            True if the focus is currently on an editable field on the page. This is
            useful for determining if standard key events should be intercepted.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefMouseEvent">
            <summary>
            Structure representing mouse event information.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPdfPrintSettings.HeaderFooterTitle">
            <summary>
            Page title to display in the header. Only used if |header_footer_enabled|
            is set to true (1).
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPdfPrintSettings.HeaderFooterUrl">
            <summary>
            URL to display in the footer. Only used if |header_footer_enabled| is set
            to true (1).
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPdfPrintSettings.PageWidth">
            <summary>
            Output page size in microns. If either of these values is less than or
            equal to zero then the default paper size (A4) will be used.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPdfPrintSettings.ScaleFactor">
            <summary>
            The percentage to scale the PDF by before printing (e.g. 50 is 50%).
            If this value is less than or equal to zero the default value of 100
            will be used.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPdfPrintSettings.MarginTop">
            <summary>
            Margins in millimeters. Only used if |margin_type| is set to
            PDF_PRINT_MARGIN_CUSTOM.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPdfPrintSettings.MarginType">
            <summary>
            Margin type.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPdfPrintSettings.HeaderFooterEnabled">
            <summary>
            Set to true (1) to print headers and footers or false (0) to not print
            headers and footers.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPdfPrintSettings.SelectionOnly">
            <summary>
            Set to true (1) to print the selection only or false (0) to print all.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPdfPrintSettings.Landscape">
            <summary>
            Set to true (1) for landscape mode or false (0) for portrait mode.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefPdfPrintSettings.BackgroundsEnabled">
            <summary>
            Set to true (1) to print background graphics or false (0) to not print
            background graphics.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefRequestContextSettings">
            <summary>
            Request context initialization settings. Specify NULL or 0 to get the
            recommended default values.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefRequestContextSettings.CachePath">
            <summary>
            The location where cache data for this request context will be stored on
            disk. If non-empty this must be either equal to or a child directory of
            CefSettings.root_cache_path. If empty then browsers will be created in
            "incognito mode" where in-memory caches are used for storage and no data is
            persisted to disk. HTML5 databases such as localStorage will only persist
            across sessions if a cache path is specified. To share the global browser
            cache and related configuration set this value to match the
            CefSettings.cache_path value.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefRequestContextSettings.PersistSessionCookies">
            <summary>
            To persist session cookies (cookies without an expiry date or validity
            interval) by default when using the global cookie manager set this value to
            true. Session cookies are generally intended to be transient and most
            Web browsers do not persist them. Can be set globally using the
            CefSettings.persist_session_cookies value. This value will be ignored if
            |cache_path| is empty or if it matches the CefSettings.cache_path value.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefRequestContextSettings.PersistUserPreferences">
            <summary>
            To persist user preferences as a JSON file in the cache path directory set
            this value to true (1). Can be set globally using the
            CefSettings.persist_user_preferences value. This value will be ignored if
            |cache_path| is empty or if it matches the CefSettings.cache_path value.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefRequestContextSettings.IgnoreCertificateErrors">
            <summary>
            Set to true (1) to ignore errors related to invalid SSL certificates.
            Enabling this setting can lead to potential security vulnerabilities like
            "man in the middle" attacks. Applications that load content from the
            internet should not enable this setting. Can be set globally using the
            CefSettings.ignore_certificate_errors value. This value will be ignored if
            |cache_path| matches the CefSettings.cache_path value.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefRequestContextSettings.AcceptLanguageList">
            <summary>
            Comma delimited ordered list of language codes without any whitespace that
            will be used in the "Accept-Language" HTTP header. Can be set globally
            using the CefSettings.accept_language_list value or overridden on a per-
            browser basis using the CefBrowserSettings.accept_language_list value. If
            all values are empty then "en-US,en" will be used. This value will be
            ignored if |cache_path| matches the CefSettings.cache_path value.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefScreenInfo">
            <summary>
            Screen information used when window rendering is disabled. This structure is
            passed as a parameter to CefRenderHandler::GetScreenInfo and should be filled
            in by the client.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefScreenInfo.DeviceScaleFactor">
            <summary>
            Device scale factor. Specifies the ratio between physical and logical
            pixels.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefScreenInfo.Depth">
            <summary>
            The screen depth in bits per pixel.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefScreenInfo.DepthPerComponent">
            <summary>
            The bits per color component. This assumes that the colors are balanced
            equally.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefScreenInfo.IsMonochrome">
            <summary>
            This can be true for black and white printers.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefScreenInfo.Rectangle">
             <summary>
             This is set from the rcMonitor member of MONITORINFOEX, to whit:
               "A RECT structure that specifies the display monitor rectangle,
               expressed in virtual-screen coordinates. Note that if the monitor
               is not the primary display monitor, some of the rectangle's
               coordinates may be negative values."
            
             The |rect| and |available_rect| properties are used to determine the
             available surface for rendering popup views.
             </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefScreenInfo.AvailableRectangle">
             <summary>
             This is set from the rcWork member of MONITORINFOEX, to whit:
               "A RECT structure that specifies the work area rectangle of the
               display monitor that can be used by applications, expressed in
               virtual-screen coordinates. Windows uses this rectangle to
               maximize an application on the monitor. The rest of the area in
               rcMonitor contains system windows such as the task bar and side
               bars. Note that if the monitor is not the primary display monitor,
               some of the rectangle's coordinates may be negative values".
            
             The |rect| and |available_rect| properties are used to determine the
             available surface for rendering popup views.
             </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefSettings">
            <summary>
            Initialization settings. Specify <c>null</c> or 0 to get the recommended default
            values. Many of these and other settings can also configured using command-line
            switches.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.NoSandbox">
            <summary>
            Set to <c>true</c> to disable the sandbox for sub-processes. See
            cef_sandbox_win.h for requirements to enable the sandbox on Windows. Also
            configurable using the "no-sandbox" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.BrowserSubprocessPath">
            <summary>
            The path to a separate executable that will be launched for sub-processes.
            If this value is empty on Windows or Linux then the main process executable
            will be used. If this value is empty on macOS then a helper executable must
            exist at "Contents/Frameworks/&lt;app&gt; Helper.app/Contents/MacOS/&lt;app&gt; Helper"
            in the top-level app bundle. See the comments on CefExecuteProcess() for
            details. Also configurable using the "browser-subprocess-path" command-line
            switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.FrameworkDirPath">
            <summary>
            The path to the CEF framework directory on macOS. If this value is empty
            then the framework must exist at "Contents/Frameworks/Chromium Embedded
            Framework.framework" in the top-level app bundle. Also configurable using
            the "framework-dir-path" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.MainBundlePath">
            <summary>
            The path to the main bundle on macOS. If this value is empty then it
            defaults to the top-level app bundle. Also configurable using
            the "main-bundle-path" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.MultiThreadedMessageLoop">
            <summary>
            Set to <c>true</c> to have the browser process message loop run in a separate
            thread. If <c>false</c> than the CefDoMessageLoopWork() function must be
            called from your application message loop. This option is only supported on
            Windows and Linux.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.ExternalMessagePump">
            <summary>
            Set to <c>true</c> to control browser process main (UI) thread message pump
            scheduling via the CefBrowserProcessHandler::OnScheduleMessagePumpWork()
            callback. This option is recommended for use in combination with the
            CefDoMessageLoopWork() function in cases where the CEF message loop must be
            integrated into an existing application message loop (see additional
            comments and warnings on CefDoMessageLoopWork). Enabling this option is not
            recommended for most users; leave this option disabled and use either the
            CefRunMessageLoop() function or multi_threaded_message_loop if possible.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.WindowlessRenderingEnabled">
            <summary>
            Set to true (1) to enable windowless (off-screen) rendering support. Do not
            enable this value if the application does not use windowless rendering as
            it may reduce rendering performance on some systems.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.CommandLineArgsDisabled">
            <summary>
            Set to <c>true</c> to disable configuration of browser process features using
            standard CEF and Chromium command-line arguments. Configuration can still
            be specified using CEF data structures or via the
            CefApp::OnBeforeCommandLineProcessing() method.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.CachePath">
            <summary>
            The location where data for the global browser cache will be stored on
            disk. If non-empty this must be either equal to or a child directory of
            CefSettings.root_cache_path. If empty then browsers will be created in
            "incognito mode" where in-memory caches are used for storage and no data is
            persisted to disk. HTML5 databases such as localStorage will only persist
            across sessions if a cache path is specified. Can be overridden for
            individual CefRequestContext instances via the
            CefRequestContextSettings.cache_path value.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.RootCachePath">
            <summary>
            The root directory that all CefSettings.cache_path and
            CefRequestContextSettings.cache_path values must have in common. If this
            value is empty and CefSettings.cache_path is non-empty then this value will
            default to the CefSettings.cache_path value. Failure to set this value
            correctly may result in the sandbox blocking read/write access to the
            cache_path directory.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.UserDataPath">
            <summary>
            The location where user data such as spell checking dictionary files will
            be stored on disk. If empty then the default platform-specific user data
            directory will be used ("~/.cef_user_data" directory on Linux,
            "~/Library/Application Support/CEF/User Data" directory on Mac OS X,
            "Local Settings\Application Data\CEF\User Data" directory under the user
            profile directory on Windows).
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.PersistSessionCookies">
            <summary>
            To persist session cookies (cookies without an expiry date or validity
            interval) by default when using the global cookie manager set this value to
            true. Session cookies are generally intended to be transient and most
            Web browsers do not persist them. A |cache_path| value must also be
            specified to enable this feature. Also configurable using the
            "persist-session-cookies" command-line switch. Can be overridden for
            individual CefRequestContext instances via the
            CefRequestContextSettings.persist_session_cookies value.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.PersistUserPreferences">
            <summary>
            To persist user preferences as a JSON file in the cache path directory set
            this value to true. A |cache_path| value must also be specified
            to enable this feature. Also configurable using the
            "persist-user-preferences" command-line switch. Can be overridden for
            individual CefRequestContext instances via the
            CefRequestContextSettings.persist_user_preferences value.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.UserAgent">
            <summary>
            Value that will be returned as the User-Agent HTTP header. If empty the
            default User-Agent string will be used. Also configurable using the
            "user-agent" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.ProductVersion">
            <summary>
            Value that will be inserted as the product portion of the default
            User-Agent string. If empty the Chromium product version will be used. If
            |userAgent| is specified this value will be ignored. Also configurable
            using the "product-version" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.Locale">
            <summary>
            The locale string that will be passed to WebKit. If empty the default
            locale of "en-US" will be used. This value is ignored on Linux where locale
            is determined using environment variable parsing with the precedence order:
            LANGUAGE, LC_ALL, LC_MESSAGES and LANG. Also configurable using the "lang"
            command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.LogFile">
            <summary>
            The directory and file name to use for the debug log. If empty a default
            log file name and location will be used. On Windows and Linux a "debug.log"
            file will be written in the main executable directory. On Mac OS X a
            "~/Library/Logs/[app name]_debug.log" file will be written where [app name]
            is the name of the main app executable. Also configurable using the
            "log-file" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.LogSeverity">
            <summary>
            The log severity. Only messages of this severity level or higher will be
            logged. When set to DISABLE no messages will be written to the log file,
            but FATAL messages will still be output to stderr. Also configurable using
            the "log-severity" command-line switch with a value of "verbose", "info",
            "warning", "error", "fatal" or "disable".
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.JavaScriptFlags">
            <summary>
            Custom flags that will be used when initializing the V8 JavaScript engine.
            The consequences of using custom flags may not be well tested. Also
            configurable using the "js-flags" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.ResourcesDirPath">
            <summary>
            The fully qualified path for the resources directory. If this value is
            empty the cef.pak and/or devtools_resources.pak files must be located in
            the module directory on Windows/Linux or the app bundle Resources directory
            on Mac OS X. Also configurable using the "resources-dir-path" command-line
            switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.LocalesDirPath">
            <summary>
            The fully qualified path for the locales directory. If this value is empty
            the locales directory must be located in the module directory. This value
            is ignored on Mac OS X where pack files are always loaded from the app
            bundle resource directory. Also configurable using the "locales-dir-path"
            command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.PackLoadingDisabled">
            <summary>
            Set to <c>true</c> to disable loading of pack files for resources and locales.
            A resource bundle handler must be provided for the browser and render
            processes via CefApp::GetResourceBundleHandler() if loading of pack files
            is disabled. Also configurable using the "disable-pack-loading" command-
            line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.RemoteDebuggingPort">
            <summary>
            Set to a value between 1024 and 65535 to enable remote debugging on the
            specified port. For example, if 8080 is specified the remote debugging URL
            will be http://localhost:8080. CEF can be remotely debugged from any CEF or
            Chrome browser window. Also configurable using the "remote-debugging-port"
            command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.UncaughtExceptionStackSize">
            <summary>
            The number of stack trace frames to capture for uncaught exceptions.
            Specify a positive value to enable the CefV8ContextHandler::
            OnUncaughtException() callback. Specify 0 (default value) and
            OnUncaughtException() will not be called. Also configurable using the
            "uncaught-exception-stack-size" command-line switch.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.IgnoreCertificateErrors">
            <summary>
            Set to true (1) to ignore errors related to invalid SSL certificates.
            Enabling this setting can lead to potential security vulnerabilities like
            "man in the middle" attacks. Applications that load content from the
            internet should not enable this setting. Also configurable using the
            "ignore-certificate-errors" command-line switch. Can be overridden for
            individual CefRequestContext instances via the
            CefRequestContextSettings.ignore_certificate_errors value.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.BackgroundColor">
            <summary>
            Background color used for the browser before a document is loaded and when
            no document color is specified. The alpha component must be either fully
            opaque (0xFF) or fully transparent (0x00). If the alpha component is fully
            opaque then the RGB components will be used as the background color. If the
            alpha component is fully transparent for a windowed browser then the
            default value of opaque white be used. If the alpha component is fully
            transparent for a windowless (off-screen) browser then transparent painting
            will be enabled.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.AcceptLanguageList">
            <summary>
            Comma delimited ordered list of language codes without any whitespace that
            will be used in the "Accept-Language" HTTP header. May be overridden on a
            per-browser basis using the CefBrowserSettings.accept_language_list value.
            If both values are empty then "en-US,en" will be used. Can be overridden
            for individual CefRequestContext instances via the
            CefRequestContextSettings.accept_language_list value.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefSettings.ApplicationClientIdForFileScanning">
            <summary>
            GUID string used for identifying the application. This is passed to the
            system AV function for scanning downloaded files. By default, the GUID
            will be an empty string and the file will be treated as an untrusted
            file when the GUID is empty.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefTouchEvent">
            <summary>
            Structure representing touch event information.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefTouchEvent.Id">
            <summary>
            Id of a touch point. Must be unique per touch, can be any number except -1.
            Note that a maximum of 16 concurrent touches will be tracked; touches
            beyond that will be ignored.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefTouchEvent.X">
            <summary>
            X coordinate relative to the left side of the view.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefTouchEvent.Y">
            <summary>
            Y coordinate relative to the top side of the view.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefTouchEvent.RadiusX">
            <summary>
            X radius in pixels. Set to 0 if not applicable.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefTouchEvent.RadiusY">
            <summary>
            Y radius in pixels. Set to 0 if not applicable.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefTouchEvent.RotationAngle">
            <summary>
            Rotation angle in radians. Set to 0 if not applicable.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefTouchEvent.Pressure">
            <summary>
            The normalized pressure of the pointer input in the range of [0,1].
            Set to 0 if not applicable.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefTouchEvent.Type">
            <summary>
            The state of the touch point. Touches begin with one CEF_TET_PRESSED event
            followed by zero or more CEF_TET_MOVED events and finally one
            CEF_TET_RELEASED or CEF_TET_CANCELLED event. Events not respecting this
            order will be ignored.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefTouchEvent.Modifiers">
            <summary>
            Bit flags describing any pressed modifier keys. See
            cef_event_flags_t for values.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefTouchEvent.PointerType">
            <summary>
            The device type that caused the event.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefUrlParts">
            <summary>
            URL component parts.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefUrlParts.Spec">
            <summary>
            The complete URL specification.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefUrlParts.Scheme">
            <summary>
            Scheme component not including the colon (e.g., "http").
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefUrlParts.UserName">
            <summary>
            User name component.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefUrlParts.Password">
            <summary>
            Password component.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefUrlParts.Host">
            <summary>
            Host component. This may be a hostname, an IPv4 address or an IPv6 literal
            surrounded by square brackets (e.g., "[2001:db8::1]").
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefUrlParts.Port">
            <summary>
            Port number component.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefUrlParts.Origin">
            <summary>
            Origin contains just the scheme, host, and port from a URL. Equivalent to
            clearing any username and password, replacing the path with a slash, and
            clearing everything after that. This value will be empty for non-standard
            URLs.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefUrlParts.Path">
            <summary>
            Path component including the first slash following the host.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefUrlParts.Query">
            <summary>
            Query string component (i.e., everything following the '?').
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.CefWindowInfo">
            <summary>
            Class representing window information.
            </summary>
            <remarks>
            Meanings for handles:
            <list type="table">
                <listheader>
                    <item>Platform</item>
                    <description>Description</description>
                </listheader>
                <item>
                    <item>Windows</item>
                    <description>Window handle (HWND)</description>
                </item>
                <item>
                    <item>Mac OS X</item>
                    <description>NSView pointer for the parent view (NSView*)</description>
                </item>
                <item>
                    <item>Linux</item>
                    <description>Pointer for the new browser widget (GtkWidget*)</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Xilium.CefGlue.CefWindowInfo.ParentHandle">
            <summary>
            Handle for the parent window.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefWindowInfo.Handle">
            <summary>
            Handle for the new browser window.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefWindowInfo.WindowlessRenderingEnabled">
            <summary>
            Set to true (1) to create the browser using windowless (off-screen)
            rendering. No window will be created for the browser and all rendering will
            occur via the CefRenderHandler interface. The |parent_window| value will be
            used to identify monitor info and to act as the parent window for dialogs,
            context menus, etc. If |parent_window| is not provided then the main screen
            monitor will be used and some functionality that requires a parent window
            may not function correctly. In order to create windowless browsers the
            CefSettings.windowless_rendering_enabled value must be set to true.
            Transparent painting is enabled by default but can be disabled by setting
            CefBrowserSettings.background_color to an opaque value.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefWindowInfo.SharedTextureEnabled">
            <summary>
            Set to <c>true</c> to enable shared textures for windowless rendering. Only
            valid if windowless_rendering_enabled above is also set to true. Currently
            only supported on Windows (D3D11).
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.CefWindowInfo.ExternalBeginFrameEnabled">
            <summary>
            Set to <c>true</c> to enable the ability to issue BeginFrame requests from the
            client application by calling CefBrowserHost::SendExternalBeginFrame.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide">
            <summary>
            Implements the browser side of query routing. The methods of this class may
            be called on any browser process thread unless otherwise indicated.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.Callback">
            <summary>
            Callback associated with a single pending asynchronous query. Execute the
            Success or Failure method to send an asynchronous response to the
            associated JavaScript handler. It is a runtime error to destroy a Callback
            object associated with an uncanceled query without first executing one of
            the callback methods. The methods of this class may be called on any
            browser process thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.Callback.Success(System.String)">
            <summary>
            Notify the associated JavaScript onSuccess callback that the query has
            completed successfully with the specified |response|.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.Callback.Failure(System.Int32,System.String)">
            <summary>
            Notify the associated JavaScript onFailure callback that the query has
            failed with the specified |error_code| and |error_message|.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.Handler">
            <summary>
            Implement this interface to handle queries. All methods will be executed on
            the browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.Handler.OnQuery(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,System.Int64,System.String,System.Boolean,Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.Callback)">
            <summary>
            Executed when a new query is received. |query_id| uniquely identifies the
            query for the life span of the router. Return true to handle the query
            or false to propagate the query to other registered handlers, if any. If
            no handlers return true from this method then the query will be
            automatically canceled with an error code of -1 delivered to the
            JavaScript onFailure callback. If this method returns true then a
            Callback method must be executed either in this method or asynchronously
            to complete the query.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.Handler.OnQueryCanceled(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,System.Int64)">
            <summary>
            Executed when a query has been canceled either explicitly using the
            JavaScript cancel function or implicitly due to browser destruction,
            navigation or renderer process termination. It will only be called for
            the single handler that returned true from OnQuery for the same
            |query_id|. No references to the associated Callback object should be
            kept after this method is called, nor should any Callback methods be
            executed.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.#ctor(Xilium.CefGlue.Wrapper.CefMessageRouterConfig)">
            <summary>
            Create a new router with the specified configuration.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.Create(Xilium.CefGlue.Wrapper.CefMessageRouterConfig)">
            <summary>
            Create a new router with the specified configuration.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.AddHandler(Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.Handler,System.Boolean)">
            <summary>
            Add a new query handler. If |first| is true it will be added as the first
            handler, otherwise it will be added as the last handler. Returns true if
            the handler is added successfully or false if the handler has already been
            added. Must be called on the browser process UI thread. The Handler object
            must either outlive the router or be removed before deletion.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.RemoveHandler(Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.Handler)">
            <summary>
            Remove an existing query handler. Any pending queries associated with the
            handler will be canceled. Handler::OnQueryCanceled will be called and the
            associated JavaScript onFailure callback will be executed with an error
            code of -1. Returns true if the handler is removed successfully or false
            if the handler is not found. Must be called on the browser process UI
            thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.CancelPending(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.Handler)">
            <summary>
            Cancel all pending queries associated with either |browser| or |handler|.
            If both |browser| and |handler| are NULL all pending queries will be
            canceled. Handler::OnQueryCanceled will be called and the associated
            JavaScript onFailure callback will be executed in all cases with an error
            code of -1.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.GetPendingCount(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.Handler)">
            <summary>
            Returns the number of queries currently pending for the specified |browser|
            and/or |handler|. Either or both values may be empty. Must be called on the
            browser process UI thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.OnBeforeClose(Xilium.CefGlue.CefBrowser)">
            <summary>
            Call from CefLifeSpanHandler::OnBeforeClose. Any pending queries associated
            with |browser| will be canceled and Handler::OnQueryCanceled will be called.
            No JavaScript callbacks will be executed since this indicates destruction
            of the browser.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.OnRenderProcessTerminated(Xilium.CefGlue.CefBrowser)">
            <summary>
            Call from CefRequestHandler::OnRenderProcessTerminated. Any pending queries
            associated with |browser| will be canceled and Handler::OnQueryCanceled
            will be called. No JavaScript callbacks will be executed since this
            indicates destruction of the context.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.OnBeforeBrowse(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame)">
            <summary>
            Call from CefRequestHandler::OnBeforeBrowse only if the navigation is
            allowed to proceed. If |frame| is the main frame then any pending queries
            associated with |browser| will be canceled and Handler::OnQueryCanceled
            will be called. No JavaScript callbacks will be executed since this
            indicates destruction of the context.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.Wrapper.CefMessageRouterBrowserSide.OnProcessMessageReceived(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefProcessId,Xilium.CefGlue.CefProcessMessage)">
            <summary>
            Call from CefClient::OnProcessMessageReceived. Returns true if the message
            is handled by this router or false otherwise.
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.Wrapper.CefMessageRouterConfig">
            <summary>
            Used to configure the query router. The same values must be passed to both
            CefMessageRouterBrowserSide and CefMessageRouterRendererSide. If using multiple
            router pairs make sure to choose values that do not conflict.
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.Wrapper.CefMessageRouterConfig.JSQueryFunction">
            <summary>
            Name of the JavaScript function that will be added to the 'window' object
            for sending a query. The default value is "cefQuery".
            </summary>
        </member>
        <member name="P:Xilium.CefGlue.Wrapper.CefMessageRouterConfig.JSCancelFunction">
            <summary>
            Name of the JavaScript function that will be added to the 'window' object
            for canceling a pending query. The default value is "cefQueryCancel".
            </summary>
        </member>
        <member name="T:Xilium.CefGlue.Wrapper.CefMessageRouterRendererSide">
            <summary>
            Implements the renderer side of query routing. The methods of this class must
            be called on the render process main thread.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.Wrapper.CefMessageRouterRendererSide.#ctor(Xilium.CefGlue.Wrapper.CefMessageRouterConfig)">
            <summary>
            Create a new router with the specified configuration.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.Wrapper.CefMessageRouterRendererSide.Create(Xilium.CefGlue.Wrapper.CefMessageRouterConfig)">
            <summary>
            Create a new router with the specified configuration.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.Wrapper.CefMessageRouterRendererSide.GetPendingCount(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefV8Context)">
            <summary>
            Returns the number of queries currently pending for the specified |browser|
            and/or |context|. Either or both values may be empty.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.Wrapper.CefMessageRouterRendererSide.OnContextCreated(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefV8Context)">
            <summary>
            Call from CefRenderProcessHandler::OnContextCreated. Registers the
            JavaScripts functions with the new context.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.Wrapper.CefMessageRouterRendererSide.OnContextReleased(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefFrame,Xilium.CefGlue.CefV8Context)">
            <summary>
            Call from CefRenderProcessHandler::OnContextReleased. Any pending queries
            associated with the released context will be canceled and
            Handler::OnQueryCanceled will be called in the browser process.
            </summary>
        </member>
        <member name="M:Xilium.CefGlue.Wrapper.CefMessageRouterRendererSide.OnProcessMessageReceived(Xilium.CefGlue.CefBrowser,Xilium.CefGlue.CefProcessId,Xilium.CefGlue.CefProcessMessage)">
            <summary>
            Call from CefRenderProcessHandler::OnProcessMessageReceived. Returns true
            if the message is handled by this router or false otherwise.
            </summary>
        </member>
        <member name="T:ColoredConsole.ColorTokenExtensions">
            <summary>
            Convenience extension methods for re-coloring instances of <see cref="T:ColoredConsole.ColorToken"/>.
            </summary>
        </member>
        <member name="T:ColoredConsole.Guard">
            <summary>
            Provides guard clauses.
            </summary>
        </member>
        <member name="M:ColoredConsole.Guard.AgainstNullArgument``1(System.String,``0)">
            <summary>
            Guards against a null argument.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="argument">The argument.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="argument" /> is <c>null</c>.</exception>
            <remarks><typeparamref name="TArgument"/> is restricted to reference types to avoid boxing of value type objects.</remarks>
        </member>
        <member name="M:ColoredConsole.Guard.AgainstNullArgumentIfNullable``1(System.String,``0)">
            <summary>
            Guards against a null argument if <typeparamref name="TArgument" /> can be <c>null</c>.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="argument">The argument.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="argument" /> is <c>null</c>.</exception>
            <remarks>
            Performs a type check to avoid boxing of value type objects.
            </remarks>
        </member>
        <member name="M:ColoredConsole.Guard.AgainstNullArgumentProperty``1(System.String,System.String,``0)">
            <summary>
            Guards against a null argument property value.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="argumentProperty">The argument property.</param>
            <exception cref="T:System.ArgumentException"><paramref name="argumentProperty" /> is <c>null</c>.</exception>
            <remarks><typeparamref name="TProperty"/> is restricted to reference types to avoid boxing of value type objects.</remarks>
        </member>
        <member name="M:ColoredConsole.Guard.AgainstNullArgumentPropertyIfNullable``1(System.String,System.String,``0)">
            <summary>
            Guards against a null argument property value if <typeparamref name="TProperty"/> can be <c>null</c>.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="argumentProperty">The argument property.</param>
            <exception cref="T:System.ArgumentException"><paramref name="argumentProperty" /> is <c>null</c>.</exception>
            <remarks>
            Performs a type check to avoid boxing of value type objects.
            </remarks>
        </member>
        <member name="M:ColoredConsole.Guard.IsNullableType(System.Type)">
            <summary>
            Determines whether the specified type is a nullable type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is a nullable type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ColoredConsole.Guard.ValidatedNotNullAttribute">
            <summary>
            When applied to a parameter, this attribute provides an indication to code analysis that the argument has been null checked.
            </summary>
        </member>
        <member name="T:ColoredConsole.StringExtensions">
            <summary>
            Convenience extension methods for coloring instances of <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:ColoredConsole.StringExtensions.ParseColor(System.String,System.Nullable{System.ConsoleColor},System.Char)">
            <summary>
            Parses the text changing the colors based on color tokens @COLOR@ in the string.
            Example:
            "@BLUE@This is Blue @RED@This is Red @GREEN@This is Green @WHITE@Etc.".
            </summary>
            <param name="text">The text.</param>
            <param name="initialColor">The initial color.</param>
            <param name="tokenDelimiter">The color token delimiter (defaults to '@').</param>
            <returns>Parsed ColorTokens array (always non-null).</returns>
        </member>
        <member name="M:ApiHelper.IsApiAvailable(System.String,System.String)">
            <summary>
            Checks if requested API is available in the give library that exist on the machine
            </summary>
            <param name="libName"> library name</param>
            <param name="procName">function name</param>
            <returns>return 'true' if given procName available in the installed libName(dll) </returns>
        </member>
        <member name="F:DpiHelper.deviceDpi">
            <summary>
            The primary screen's (device) current DPI
            </summary>
        </member>
        <member name="M:DpiHelper.LogicalToDeviceUnits(System.Int32,System.Int32)">
            <summary>
            Transforms a horizontal or vertical integer coordinate from logical to device units
            by scaling it up  for current DPI and rounding to nearest integer value
            </summary>
            <param name="value">value in logical units</param>
            <param name="devicePixels">value in logical units</param>
            <returns>value in device units</returns>
        </member>
        <member name="M:DpiHelper.DpiMethods.TryFindDpiAwarenessContextsEqual(System.Nullable{DpiAwarenessContext},System.Nullable{DpiAwarenessContext})">
            <summary>
            Tries to compare two DPIawareness context values. Return true if they were equal. 
            Return false when they are not equal or underlying OS does not support this API.
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:DpiHelper.DpiMethods.TryGetThreadDpiAwarenessContext">
            <summary>
            Tries to get thread dpi awareness context
            </summary>
            <returns> returns thread dpi awareness context if API is available in this version of OS. otherwise, return IntPtr.Zero.</returns>
        </member>
        <member name="M:DpiHelper.DpiMethods.TrySetThreadDpiAwarenessContext(System.Nullable{DpiAwarenessContext})">
            <summary>
            Tries to set thread dpi awareness context
            </summary>
            <returns> returns old thread dpi awareness context if API is available in this version of OS. otherwise, return IntPtr.Zero.</returns>
        </member>
        <member name="M:DpiHelper.DpiMethods.TryGetWindowDpiAwarenessContext(System.IntPtr)">
            <summary>
            Tries to get window dpi awareness context
            </summary>
            <returns> returns window dpi awareness context if API is available in this version of OS. otherwise, return DpiAwarenessContext.DPI_AWARENESS_CONTEXT_UNSPECIFIED.</returns>
        </member>
        <member name="M:LockBitmap.LockBits">
            <summary>
            Lock bitmap data
            </summary>
        </member>
        <member name="M:LockBitmap.UnlockBits">
            <summary>
            Unlock bitmap data
            </summary>
        </member>
        <member name="M:LockBitmap.GetPixel(System.Int32,System.Int32)">
            <summary>
            Get the color of the specified pixel
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:LockBitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Set the color of the specified pixel
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="color"></param>
        </member>
        <member name="M:User32.ShowWindow(System.Int32,System.Int32)">
            <summary>
            ShowWindow function of USER32
            </summary>
        </member>
        <member name="M:User32.ShowWindow(System.IntPtr,System.Int32)">
            <summary>
            ShowWindow function of USER32
            </summary>
        </member>
        <member name="M:User32.ShowWindow(System.IntPtr,System.Int16)">
            <summary>
            ShowWindow function of USER32
            </summary>
        </member>
        <member name="T:TMEFlags">
            <summary>
            The services requested. This member can be a combination of the following values.
            </summary>
        </member>
        <member name="F:TMEFlags.TME_CANCEL">
            <summary>
            The caller wants to cancel a prior tracking request. The caller should also specify the type of tracking that it wants to cancel. For example, to cancel hover tracking, the caller must pass the TME_CANCEL and TME_HOVER flags.
            </summary>
        </member>
        <member name="F:TMEFlags.TME_HOVER">
            <summary>
            The caller wants hover notification. Notification is delivered as a WM_MOUSEHOVER message.
            If the caller requests hover tracking while hover tracking is already active, the hover timer will be reset.
            This flag is ignored if the mouse pointer is not over the specified window or area.
            </summary>
        </member>
        <member name="F:TMEFlags.TME_LEAVE">
            <summary>
            The caller wants leave notification. Notification is delivered as a WM_MOUSELEAVE message. If the mouse is not over the specified window or area, a leave notification is generated immediately and no further tracking is performed.
            </summary>
        </member>
        <member name="F:TMEFlags.TME_NONCLIENT">
            <summary>
            The caller wants hover and leave notification for the nonclient areas. Notification is delivered as WM_NCMOUSEHOVER and WM_NCMOUSELEAVE messages.
            </summary>
        </member>
        <member name="F:TMEFlags.TME_QUERY">
            <summary>
            The function fills in the structure instead of treating it as a tracking request. The structure is filled such that had that structure been passed to TrackMouseEvent, it would generate the current tracking. The only anomaly is that the hover time-out returned is always the actual time-out and not HOVER_DEFAULT, if HOVER_DEFAULT was specified during the original TrackMouseEvent request.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_ARRANGE">
            <summary>
            The flags that specify how the system arranged minimized windows. For more information, see the Remarks section in this topic.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CLEANBOOT">
            <summary>
            The value that specifies how the system is started: 
            0 Normal boot
            1 Fail-safe boot
            2 Fail-safe with network boot
            A fail-safe boot (also called SafeBoot, Safe Mode, or Clean Boot) bypasses the user startup files.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CMONITORS">
            <summary>
            The number of display monitors on a desktop. For more information, see the Remarks section in this topic.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CMOUSEBUTTONS">
            <summary>
            The number of buttons on a mouse, or zero if no mouse is installed.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXBORDER">
            <summary>
            The width of a window border, in pixels. This is equivalent to the SM_CXEDGE value for windows with the 3-D look.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXCURSOR">
            <summary>
            The width of a cursor, in pixels. The system cannot create cursors of other sizes.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXDLGFRAME">
            <summary>
            This value is the same as SM_CXFIXEDFRAME.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXDOUBLECLK">
            <summary>
            The width of the rectangle around the location of a first click in a double-click sequence, in pixels. ,
            The second click must occur within the rectangle that is defined by SM_CXDOUBLECLK and SM_CYDOUBLECLK for the system
            to consider the two clicks a double-click. The two clicks must also occur within a specified time.
            To set the width of the double-click rectangle, call SystemParametersInfo with SPI_SETDOUBLECLKWIDTH.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXDRAG">
            <summary>
            The number of pixels on either side of a mouse-down point that the mouse pointer can move before a drag operation begins. 
            This allows the user to click and release the mouse button easily without unintentionally starting a drag operation. 
            If this value is negative, it is subtracted from the left of the mouse-down point and added to the right of it.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXEDGE">
            <summary>
            The width of a 3-D border, in pixels. This metric is the 3-D counterpart of SM_CXBORDER.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXFIXEDFRAME">
            <summary>
            The thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels.
            SM_CXFIXEDFRAME is the height of the horizontal border, and SM_CYFIXEDFRAME is the width of the vertical border.
            This value is the same as SM_CXDLGFRAME.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXFOCUSBORDER">
            <summary>
            The width of the left and right edges of the focus rectangle that the DrawFocusRectdraws. 
            This value is in pixels. 
            Windows 2000:  This value is not supported.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXFRAME">
            <summary>
            This value is the same as SM_CXSIZEFRAME.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXFULLSCREEN">
            <summary>
            The width of the client area for a full-screen window on the primary display monitor, in pixels. 
            To get the coordinates of the portion of the screen that is not obscured by the system taskbar or by application desktop toolbars, 
            call the SystemParametersInfofunction with the SPI_GETWORKAREA value.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXHSCROLL">
            <summary>
            The width of the arrow bitmap on a horizontal scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXHTHUMB">
            <summary>
            The width of the thumb box in a horizontal scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXICON">
            <summary>
            The default width of an icon, in pixels. The LoadIcon function can load only icons with the dimensions 
            that SM_CXICON and SM_CYICON specifies.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXICONSPACING">
            <summary>
            The width of a grid cell for items in large icon view, in pixels. Each item fits into a rectangle of size 
            SM_CXICONSPACING by SM_CYICONSPACING when arranged. This value is always greater than or equal to SM_CXICON.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXMAXIMIZED">
            <summary>
            The default width, in pixels, of a maximized top-level window on the primary display monitor.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXMAXTRACK">
            <summary>
            The default maximum width of a window that has a caption and sizing borders, in pixels. 
            This metric refers to the entire desktop. The user cannot drag the window frame to a size larger than these dimensions. 
            A window can override this value by processing the WM_GETMINMAXINFO message.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXMENUCHECK">
            <summary>
            The width of the default menu check-mark bitmap, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXMENUSIZE">
            <summary>
            The width of menu bar buttons, such as the child window close button that is used in the multiple document interface, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXMIN">
            <summary>
            The minimum width of a window, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXMINIMIZED">
            <summary>
            The width of a minimized window, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXMINSPACING">
            <summary>
            The width of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle this size when arranged. 
            This value is always greater than or equal to SM_CXMINIMIZED.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXMINTRACK">
            <summary>
            The minimum tracking width of a window, in pixels. The user cannot drag the window frame to a size smaller than these dimensions. 
            A window can override this value by processing the WM_GETMINMAXINFO message.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXPADDEDBORDER">
            <summary>
            The amount of border padding for captioned windows, in pixels. Windows XP/2000:  This value is not supported.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXSCREEN">
            <summary>
            The width of the screen of the primary display monitor, in pixels. This is the same value obtained by calling 
            GetDeviceCaps as follows: GetDeviceCaps( hdcPrimaryMonitor, HORZRES).
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXSIZE">
            <summary>
            The width of a button in a window caption or title bar, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXSIZEFRAME">
            <summary>
            The thickness of the sizing border around the perimeter of a window that can be resized, in pixels. 
            SM_CXSIZEFRAME is the width of the horizontal border, and SM_CYSIZEFRAME is the height of the vertical border. 
            This value is the same as SM_CXFRAME.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXSMICON">
            <summary>
            The recommended width of a small icon, in pixels. Small icons typically appear in window captions and in small icon view.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXSMSIZE">
            <summary>
            The width of small caption buttons, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXVIRTUALSCREEN">
            <summary>
            The width of the virtual screen, in pixels. The virtual screen is the bounding rectangle of all display monitors. 
            The SM_XVIRTUALSCREEN metric is the coordinates for the left side of the virtual screen.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CXVSCROLL">
            <summary>
            The width of a vertical scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYBORDER">
            <summary>
            The height of a window border, in pixels. This is equivalent to the SM_CYEDGE value for windows with the 3-D look.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYCAPTION">
            <summary>
            The height of a caption area, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYCURSOR">
            <summary>
            The height of a cursor, in pixels. The system cannot create cursors of other sizes.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYDLGFRAME">
            <summary>
            This value is the same as SM_CYFIXEDFRAME.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYDOUBLECLK">
            <summary>
            The height of the rectangle around the location of a first click in a double-click sequence, in pixels. 
            The second click must occur within the rectangle defined by SM_CXDOUBLECLK and SM_CYDOUBLECLK for the system to consider 
            the two clicks a double-click. The two clicks must also occur within a specified time. To set the height of the double-click 
            rectangle, call SystemParametersInfo with SPI_SETDOUBLECLKHEIGHT.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYDRAG">
            <summary>
            The number of pixels above and below a mouse-down point that the mouse pointer can move before a drag operation begins. 
            This allows the user to click and release the mouse button easily without unintentionally starting a drag operation. 
            If this value is negative, it is subtracted from above the mouse-down point and added below it.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYEDGE">
            <summary>
            The height of a 3-D border, in pixels. This is the 3-D counterpart of SM_CYBORDER.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYFIXEDFRAME">
            <summary>
            The thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels. 
            SM_CXFIXEDFRAME is the height of the horizontal border, and SM_CYFIXEDFRAME is the width of the vertical border. 
            This value is the same as SM_CYDLGFRAME.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYFOCUSBORDER">
            <summary>
            The height of the top and bottom edges of the focus rectangle drawn byDrawFocusRect. 
            This value is in pixels. 
            Windows 2000:  This value is not supported.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYFRAME">
            <summary>
            This value is the same as SM_CYSIZEFRAME.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYFULLSCREEN">
            <summary>
            The height of the client area for a full-screen window on the primary display monitor, in pixels. 
            To get the coordinates of the portion of the screen not obscured by the system taskbar or by application desktop toolbars,
            call the SystemParametersInfo function with the SPI_GETWORKAREA value.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYHSCROLL">
            <summary>
            The height of a horizontal scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYICON">
            <summary>
            The default height of an icon, in pixels. The LoadIcon function can load only icons with the dimensions SM_CXICON and SM_CYICON.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYICONSPACING">
            <summary>
            The height of a grid cell for items in large icon view, in pixels. Each item fits into a rectangle of size 
            SM_CXICONSPACING by SM_CYICONSPACING when arranged. This value is always greater than or equal to SM_CYICON.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYKANJIWINDOW">
            <summary>
            For double byte character set versions of the system, this is the height of the Kanji window at the bottom of the screen, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYMAXIMIZED">
            <summary>
            The default height, in pixels, of a maximized top-level window on the primary display monitor.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYMAXTRACK">
            <summary>
            The default maximum height of a window that has a caption and sizing borders, in pixels. This metric refers to the entire desktop. 
            The user cannot drag the window frame to a size larger than these dimensions. A window can override this value by processing 
            the WM_GETMINMAXINFO message.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYMENU">
            <summary>
            The height of a single-line menu bar, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYMENUCHECK">
            <summary>
            The height of the default menu check-mark bitmap, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYMENUSIZE">
            <summary>
            The height of menu bar buttons, such as the child window close button that is used in the multiple document interface, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYMIN">
            <summary>
            The minimum height of a window, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYMINIMIZED">
            <summary>
            The height of a minimized window, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYMINSPACING">
            <summary>
            The height of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle this size when arranged. 
            This value is always greater than or equal to SM_CYMINIMIZED.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYMINTRACK">
            <summary>
            The minimum tracking height of a window, in pixels. The user cannot drag the window frame to a size smaller than these dimensions. 
            A window can override this value by processing the WM_GETMINMAXINFO message.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYSCREEN">
            <summary>
            The height of the screen of the primary display monitor, in pixels. This is the same value obtained by calling 
            GetDeviceCaps as follows: GetDeviceCaps( hdcPrimaryMonitor, VERTRES).
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYSIZE">
            <summary>
            The height of a button in a window caption or title bar, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYSIZEFRAME">
            <summary>
            The thickness of the sizing border around the perimeter of a window that can be resized, in pixels. 
            SM_CXSIZEFRAME is the width of the horizontal border, and SM_CYSIZEFRAME is the height of the vertical border. 
            This value is the same as SM_CYFRAME.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYSMCAPTION">
            <summary>
            The height of a small caption, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYSMICON">
            <summary>
            The recommended height of a small icon, in pixels. Small icons typically appear in window captions and in small icon view.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYSMSIZE">
            <summary>
            The height of small caption buttons, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYVIRTUALSCREEN">
            <summary>
            The height of the virtual screen, in pixels. The virtual screen is the bounding rectangle of all display monitors. 
            The SM_YVIRTUALSCREEN metric is the coordinates for the top of the virtual screen.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYVSCROLL">
            <summary>
            The height of the arrow bitmap on a vertical scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_CYVTHUMB">
            <summary>
            The height of the thumb box in a vertical scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_DBCSENABLED">
            <summary>
            Nonzero if User32.dll supports DBCS; otherwise, 0.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_DEBUG">
            <summary>
            Nonzero if the debug version of User.exe is installed; otherwise, 0.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_DIGITIZER">
            <summary>
            Nonzero if the current operating system is Windows 7 or Windows Server 2008 R2 and the Tablet PC Input 
            service is started; otherwise, 0. The return value is a bitmask that specifies the type of digitizer input supported by the device. 
            For more information, see Remarks. 
            Windows Server 2008, Windows Vista, and Windows XP/2000:  This value is not supported.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_IMMENABLED">
            <summary>
            Nonzero if Input Method Manager/Input Method Editor features are enabled; otherwise, 0. 
            SM_IMMENABLED indicates whether the system is ready to use a Unicode-based IME on a Unicode application. 
            To ensure that a language-dependent IME works, check SM_DBCSENABLED and the system ANSI code page.
            Otherwise the ANSI-to-Unicode conversion may not be performed correctly, or some components like fonts
            or registry settings may not be present.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_MAXIMUMTOUCHES">
            <summary>
            Nonzero if there are digitizers in the system; otherwise, 0. SM_MAXIMUMTOUCHES returns the aggregate maximum of the 
            maximum number of contacts supported by every digitizer in the system. If the system has only single-touch digitizers, 
            the return value is 1. If the system has multi-touch digitizers, the return value is the number of simultaneous contacts 
            the hardware can provide. Windows Server 2008, Windows Vista, and Windows XP/2000:  This value is not supported.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_MEDIACENTER">
            <summary>
            Nonzero if the current operating system is the Windows XP, Media Center Edition, 0 if not.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_MENUDROPALIGNMENT">
            <summary>
            Nonzero if drop-down menus are right-aligned with the corresponding menu-bar item; 0 if the menus are left-aligned.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_MIDEASTENABLED">
            <summary>
            Nonzero if the system is enabled for Hebrew and Arabic languages, 0 if not.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_MOUSEPRESENT">
            <summary>
            Nonzero if a mouse is installed; otherwise, 0. This value is rarely zero, because of support for virtual mice and because 
            some systems detect the presence of the port instead of the presence of a mouse.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_MOUSEHORIZONTALWHEELPRESENT">
            <summary>
            Nonzero if a mouse with a horizontal scroll wheel is installed; otherwise 0.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_MOUSEWHEELPRESENT">
            <summary>
            Nonzero if a mouse with a vertical scroll wheel is installed; otherwise 0.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_NETWORK">
            <summary>
            The least significant bit is set if a network is present; otherwise, it is cleared. The other bits are reserved for future use.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_PENWINDOWS">
            <summary>
            Nonzero if the Microsoft Windows for Pen computing extensions are installed; zero otherwise.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_REMOTECONTROL">
            <summary>
            This system metric is used in a Terminal Services environment to determine if the current Terminal Server session is 
            being remotely controlled. Its value is nonzero if the current session is remotely controlled; otherwise, 0. 
            You can use terminal services management tools such as Terminal Services Manager (tsadmin.msc) and shadow.exe to 
            control a remote session. When a session is being remotely controlled, another user can view the contents of that session 
            and potentially interact with it.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_REMOTESESSION">
            <summary>
            This system metric is used in a Terminal Services environment. If the calling process is associated with a Terminal Services 
            client session, the return value is nonzero. If the calling process is associated with the Terminal Services console session, 
            the return value is 0. 
            Windows Server 2003 and Windows XP:  The console session is not necessarily the physical console. 
            For more information, seeWTSGetActiveConsoleSessionId.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_SAMEDISPLAYFORMAT">
            <summary>
            Nonzero if all the display monitors have the same color format, otherwise, 0. Two displays can have the same bit depth, 
            but different color formats. For example, the red, green, and blue pixels can be encoded with different numbers of bits, 
            or those bits can be located in different places in a pixel color value.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_SECURE">
            <summary>
            This system metric should be ignored; it always returns 0.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_SERVERR2">
            <summary>
            The build number if the system is Windows Server 2003 R2; otherwise, 0.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_SHOWSOUNDS">
            <summary>
            Nonzero if the user requires an application to present information visually in situations where it would otherwise present 
            the information only in audible form; otherwise, 0.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_SHUTTINGDOWN">
            <summary>
            Nonzero if the current session is shutting down; otherwise, 0. Windows 2000:  This value is not supported.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_SLOWMACHINE">
            <summary>
            Nonzero if the computer has a low-end (slow) processor; otherwise, 0.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_STARTER">
            <summary>
            Nonzero if the current operating system is Windows 7 Starter Edition, Windows Vista Starter, or Windows XP Starter Edition; otherwise, 0.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_SWAPBUTTON">
            <summary>
            Nonzero if the meanings of the left and right mouse buttons are swapped; otherwise, 0.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_TABLETPC">
            <summary>
            Nonzero if the current operating system is the Windows XP Tablet PC edition or if the current operating system is Windows Vista
            or Windows 7 and the Tablet PC Input service is started; otherwise, 0. The SM_DIGITIZER setting indicates the type of digitizer 
            input supported by a device running Windows 7 or Windows Server 2008 R2. For more information, see Remarks.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_XVIRTUALSCREEN">
            <summary>
            The coordinates for the left side of the virtual screen. The virtual screen is the bounding rectangle of all display monitors. 
            The SM_CXVIRTUALSCREEN metric is the width of the virtual screen.
            </summary>
        </member>
        <member name="F:SystemMetricFlags.SM_YVIRTUALSCREEN">
            <summary>
            The coordinates for the top of the virtual screen. The virtual screen is the bounding rectangle of all display monitors. 
            The SM_CYVIRTUALSCREEN metric is the height of the virtual screen.
            </summary>
        </member>
        <member name="F:BLENDFUNCTION.BlendOp">
            <summary>
            BlendOp field of structure
            </summary>
        </member>
        <member name="F:BLENDFUNCTION.BlendFlags">
            <summary>
            BlendFlags field of structure
            </summary>
        </member>
        <member name="F:BLENDFUNCTION.SourceConstantAlpha">
            <summary>
            SourceConstantAlpha field of structure
            </summary>
        </member>
        <member name="F:BLENDFUNCTION.AlphaFormat">
            <summary>
            AlphaFormat field of structure
            </summary>
        </member>
        <member name="F:POINT.x">
            <summary>
            x field of structure
            </summary>
        </member>
        <member name="F:POINT.y">
            <summary>
            y field of structure
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_DLGMODALFRAME">
            <summary>
            Specified WS_EX_DLGMODALFRAME enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_NOPARENTNOTIFY">
            <summary>
            Specified WS_EX_NOPARENTNOTIFY enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_NOACTIVATE">
            <summary>
            Specified WS_EX_NOACTIVATE enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_TOPMOST">
            <summary>
            Specified WS_EX_TOPMOST enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_ACCEPTFILES">
            <summary>
            Specified WS_EX_ACCEPTFILES enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_TRANSPARENT">
            <summary>
            Specified WS_EX_TRANSPARENT enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_MDICHILD">
            <summary>
            Specified WS_EX_MDICHILD enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_TOOLWINDOW">
            <summary>
            Specified WS_EX_TOOLWINDOW enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_WINDOWEDGE">
            <summary>
            Specified WS_EX_WINDOWEDGE enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_CLIENTEDGE">
            <summary>
            Specified WS_EX_CLIENTEDGE enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_CONTEXTHELP">
            <summary>
            Specified WS_EX_CONTEXTHELP enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_RIGHT">
            <summary>
            Specified WS_EX_RIGHT enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_LEFT">
            <summary>
            Specified WS_EX_LEFT enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_RTLREADING">
            <summary>
            Specified WS_EX_RTLREADING enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_LTRREADING">
            <summary>
            Specified WS_EX_LTRREADING enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_LEFTSCROLLBAR">
            <summary>
            Specified WS_EX_LEFTSCROLLBAR enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_RIGHTSCROLLBAR">
            <summary>
            Specified WS_EX_RIGHTSCROLLBAR enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_CONTROLPARENT">
            <summary>
            Specified WS_EX_CONTROLPARENT enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_STATICEDGE">
            <summary>
            Specified WS_EX_STATICEDGE enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_APPWINDOW">
            <summary>
            Specified WS_EX_APPWINDOW enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_OVERLAPPEDWINDOW">
            <summary>
            Specified WS_EX_OVERLAPPEDWINDOW enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_PALETTEWINDOW">
            <summary>
            Specified WS_EX_PALETTEWINDOW enumeration value.
            </summary>
        </member>
        <member name="F:WindowExStyles.WS_EX_LAYERED">
            <summary>
            Specified WS_EX_LAYERED enumeration value.
            </summary>
        </member>
        <member name="F:WindowLongFlags.GWL_WNDPROC">
            <summary>
            Specified GWL_WNDPROC enumeration value.
            </summary>
        </member>
        <member name="F:WindowLongFlags.GWL_HINSTANCE">
            <summary>
            Specified GWL_HINSTANCE enumeration value.
            </summary>
        </member>
        <member name="F:WindowLongFlags.GWL_HWNDPARENT">
            <summary>
            Specified GWL_HWNDPARENT enumeration value.
            </summary>
        </member>
        <member name="F:WindowLongFlags.GWL_STYLE">
            <summary>
            Specified GWL_STYLE enumeration value.
            </summary>
        </member>
        <member name="F:WindowLongFlags.GWL_EXSTYLE">
            <summary>
            Specified GWL_EXSTYLE enumeration value.
            </summary>
        </member>
        <member name="F:WindowLongFlags.GWL_USERDATA">
            <summary>
            Specified GWL_USERDATA enumeration value.
            </summary>
        </member>
        <member name="F:WindowLongFlags.GWL_ID">
            <summary>
            Specified GWL_ID enumeration value.
            </summary>
        </member>
        <member name="F:RECT.left">
            <summary>
            left field of structure
            </summary>
        </member>
        <member name="F:RECT.top">
            <summary>
            top field of structure
            </summary>
        </member>
        <member name="F:RECT.right">
            <summary>
            right field of structure
            </summary>
        </member>
        <member name="F:RECT.bottom">
            <summary>
            bottom field of structure
            </summary>
        </member>
        <member name="F:SIZE.cx">
            <summary>
            cx field of structure
            </summary>
        </member>
        <member name="F:SIZE.cy">
            <summary>
            cy field of structure
            </summary>
        </member>
        <member name="F:ShowWindowStyles.SW_HIDE">
            <summary>
            Specified SW_HIDE enumeration value.
            </summary>
        </member>
        <member name="F:ShowWindowStyles.SW_SHOWNORMAL">
            <summary>
            Specified SW_SHOWNORMAL enumeration value.
            </summary>
        </member>
        <member name="F:ShowWindowStyles.SW_NORMAL">
            <summary>
            Specified SW_NORMAL enumeration value.
            </summary>
        </member>
        <member name="F:ShowWindowStyles.SW_SHOWMINIMIZED">
            <summary>
            Specified SW_SHOWMINIMIZED enumeration value.
            </summary>
        </member>
        <member name="F:ShowWindowStyles.SW_SHOWMAXIMIZED">
            <summary>
            Specified SW_SHOWMAXIMIZED enumeration value.
            </summary>
        </member>
        <member name="F:ShowWindowStyles.SW_MAXIMIZE">
            <summary>
            Specified SW_MAXIMIZE enumeration value.
            </summary>
        </member>
        <member name="F:ShowWindowStyles.SW_SHOWNOACTIVATE">
            <summary>
            Specified SW_SHOWNOACTIVATE enumeration value.
            </summary>
        </member>
        <member name="F:ShowWindowStyles.SW_SHOW">
            <summary>
            Specified SW_SHOW enumeration value.
            </summary>
        </member>
        <member name="F:ShowWindowStyles.SW_MINIMIZE">
            <summary>
            Specified SW_MINIMIZE enumeration value.
            </summary>
        </member>
        <member name="F:ShowWindowStyles.SW_SHOWMINNOACTIVE">
            <summary>
            Specified SW_SHOWMINNOACTIVE enumeration value.
            </summary>
        </member>
        <member name="F:ShowWindowStyles.SW_SHOWNA">
            <summary>
            Specified SW_SHOWNA enumeration value.
            </summary>
        </member>
        <member name="F:ShowWindowStyles.SW_RESTORE">
            <summary>
            Specified SW_RESTORE enumeration value.
            </summary>
        </member>
        <member name="F:ShowWindowStyles.SW_SHOWDEFAULT">
            <summary>
            Specified SW_SHOWDEFAULT enumeration value.
            </summary>
        </member>
        <member name="F:ShowWindowStyles.SW_FORCEMINIMIZE">
            <summary>
            Specified SW_FORCEMINIMIZE enumeration value.
            </summary>
        </member>
        <member name="F:ShowWindowStyles.SW_MAX">
            <summary>
            Specified SW_MAX enumeration value.
            </summary>
        </member>
        <member name="F:NCCALCSIZE_PARAMS.rectProposed">
            <summary>
            Contains the new coordinates of a window that has been moved or resized, that is, it is the proposed new window coordinates.
            </summary>
        </member>
        <member name="F:NCCALCSIZE_PARAMS.rectBeforeMove">
            <summary>
            Contains the coordinates of the window before it was moved or resized.
            </summary>
        </member>
        <member name="F:NCCALCSIZE_PARAMS.rectClientBeforeMove">
            <summary>
            Contains the coordinates of the window's client area before the window was moved or resized.
            </summary>
        </member>
        <member name="F:NCCALCSIZE_PARAMS.lppos">
            <summary>
            Pointer to a WINDOWPOS structure that contains the size and position values specified in the operation that moved or resized the window.
            </summary>
        </member>
        <member name="F:DeviceCap.DRIVERVERSION">
            <summary>
            Device driver version
            </summary>
        </member>
        <member name="F:DeviceCap.TECHNOLOGY">
            <summary>
            Device classification
            </summary>
        </member>
        <member name="F:DeviceCap.HORZSIZE">
            <summary>
            Horizontal size in millimeters
            </summary>
        </member>
        <member name="F:DeviceCap.VERTSIZE">
            <summary>
            Vertical size in millimeters
            </summary>
        </member>
        <member name="F:DeviceCap.HORZRES">
            <summary>
            Horizontal width in pixels
            </summary>
        </member>
        <member name="F:DeviceCap.VERTRES">
            <summary>
            Vertical height in pixels
            </summary>
        </member>
        <member name="F:DeviceCap.BITSPIXEL">
            <summary>
            Number of bits per pixel
            </summary>
        </member>
        <member name="F:DeviceCap.PLANES">
            <summary>
            Number of planes
            </summary>
        </member>
        <member name="F:DeviceCap.NUMBRUSHES">
            <summary>
            Number of brushes the device has
            </summary>
        </member>
        <member name="F:DeviceCap.NUMPENS">
            <summary>
            Number of pens the device has
            </summary>
        </member>
        <member name="F:DeviceCap.NUMMARKERS">
            <summary>
            Number of markers the device has
            </summary>
        </member>
        <member name="F:DeviceCap.NUMFONTS">
            <summary>
            Number of fonts the device has
            </summary>
        </member>
        <member name="F:DeviceCap.NUMCOLORS">
            <summary>
            Number of colors the device supports
            </summary>
        </member>
        <member name="F:DeviceCap.PDEVICESIZE">
            <summary>
            Size required for device descriptor
            </summary>
        </member>
        <member name="F:DeviceCap.CURVECAPS">
            <summary>
            Curve capabilities
            </summary>
        </member>
        <member name="F:DeviceCap.LINECAPS">
            <summary>
            Line capabilities
            </summary>
        </member>
        <member name="F:DeviceCap.POLYGONALCAPS">
            <summary>
            Polygonal capabilities
            </summary>
        </member>
        <member name="F:DeviceCap.TEXTCAPS">
            <summary>
            Text capabilities
            </summary>
        </member>
        <member name="F:DeviceCap.CLIPCAPS">
            <summary>
            Clipping capabilities
            </summary>
        </member>
        <member name="F:DeviceCap.RASTERCAPS">
            <summary>
            Bitblt capabilities
            </summary>
        </member>
        <member name="F:DeviceCap.ASPECTX">
            <summary>
            Length of the X leg
            </summary>
        </member>
        <member name="F:DeviceCap.ASPECTY">
            <summary>
            Length of the Y leg
            </summary>
        </member>
        <member name="F:DeviceCap.ASPECTXY">
            <summary>
            Length of the hypotenuse
            </summary>
        </member>
        <member name="F:DeviceCap.SHADEBLENDCAPS">
            <summary>
            Shading and Blending caps
            </summary>
        </member>
        <member name="F:DeviceCap.LOGPIXELSX">
            <summary>
            Logical pixels inch in X
            </summary>
        </member>
        <member name="F:DeviceCap.LOGPIXELSY">
            <summary>
            Logical pixels inch in Y
            </summary>
        </member>
        <member name="F:DeviceCap.SIZEPALETTE">
            <summary>
            Number of entries in physical palette
            </summary>
        </member>
        <member name="F:DeviceCap.NUMRESERVED">
            <summary>
            Number of reserved entries in palette
            </summary>
        </member>
        <member name="F:DeviceCap.COLORRES">
            <summary>
            Actual color resolution
            </summary>
        </member>
        <member name="F:DeviceCap.PHYSICALWIDTH">
            <summary>
            Physical Width in device units
            </summary>
        </member>
        <member name="F:DeviceCap.PHYSICALHEIGHT">
            <summary>
            Physical Height in device units
            </summary>
        </member>
        <member name="F:DeviceCap.PHYSICALOFFSETX">
            <summary>
            Physical Printable Area x margin
            </summary>
        </member>
        <member name="F:DeviceCap.PHYSICALOFFSETY">
            <summary>
            Physical Printable Area y margin
            </summary>
        </member>
        <member name="F:DeviceCap.SCALINGFACTORX">
            <summary>
            Scaling factor x
            </summary>
        </member>
        <member name="F:DeviceCap.SCALINGFACTORY">
            <summary>
            Scaling factor y
            </summary>
        </member>
        <member name="F:DeviceCap.VREFRESH">
            <summary>
            Current vertical refresh rate of the display device (for displays only) in Hz
            </summary>
        </member>
        <member name="F:DeviceCap.DESKTOPVERTRES">
            <summary>
            Vertical height of entire desktop in pixels
            </summary>
        </member>
        <member name="F:DeviceCap.DESKTOPHORZRES">
            <summary>
            Horizontal width of entire desktop in pixels
            </summary>
        </member>
        <member name="F:DeviceCap.BLTALIGNMENT">
            <summary>
            Preferred blt alignment
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NULL">
            <summary>
            Specified WM_NULL enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_CREATE">
            <summary>
            Specified WM_CREATE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_DESTROY">
            <summary>
            Specified WM_DESTROY enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MOVE">
            <summary>
            Specified WM_MOVE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_SIZE">
            <summary>
            Specified WM_SIZE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_ACTIVATE">
            <summary>
            Specified WM_ACTIVATE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_SETFOCUS">
            <summary>
            Specified WM_SETFOCUS enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_KILLFOCUS">
            <summary>
            Specified WM_KILLFOCUS enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_ENABLE">
            <summary>
            Specified WM_ENABLE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_SETREDRAW">
            <summary>
            Specified WM_SETREDRAW enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_SETTEXT">
            <summary>
            Specified WM_SETTEXT enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_GETTEXT">
            <summary>
            Specified WM_GETTEXT enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_GETTEXTLENGTH">
            <summary>
            Specified WM_GETTEXTLENGTH enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_PAINT">
            <summary>
            Specified WM_PAINT enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_CLOSE">
            <summary>
            Specified WM_CLOSE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_QUERYENDSESSION">
            <summary>
            Specified WM_QUERYENDSESSION enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_QUIT">
            <summary>
            Specified WM_QUIT enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_QUERYOPEN">
            <summary>
            Specified WM_QUERYOPEN enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_ERASEBKGND">
            <summary>
            Specified WM_ERASEBKGND enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_SYSCOLORCHANGE">
            <summary>
            Specified WM_SYSCOLORCHANGE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_ENDSESSION">
            <summary>
            Specified WM_ENDSESSION enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_SHOWWINDOW">
            <summary>
            Specified WM_SHOWWINDOW enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_WININICHANGE">
            <summary>
            Specified WM_WININICHANGE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_SETTINGCHANGE">
            <summary>
            Specified WM_SETTINGCHANGE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_DEVMODECHANGE">
            <summary>
            Specified WM_DEVMODECHANGE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_ACTIVATEAPP">
            <summary>
            Specified WM_ACTIVATEAPP enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_FONTCHANGE">
            <summary>
            Specified WM_FONTCHANGE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_TIMECHANGE">
            <summary>
            Specified WM_TIMECHANGE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_CANCELMODE">
            <summary>
            Specified WM_CANCELMODE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_SETCURSOR">
            <summary>
            Specified WM_SETCURSOR enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MOUSEACTIVATE">
            <summary>
            Specified WM_MOUSEACTIVATE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_CHILDACTIVATE">
            <summary>
            Specified WM_CHILDACTIVATE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_QUEUESYNC">
            <summary>
            Specified WM_QUEUESYNC enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_GETMINMAXINFO">
            <summary>
            Specified WM_GETMINMAXINFO enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_PAINTICON">
            <summary>
            Specified WM_PAINTICON enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_ICONERASEBKGND">
            <summary>
            Specified WM_ICONERASEBKGND enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NEXTDLGCTL">
            <summary>
            Specified WM_NEXTDLGCTL enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_SPOOLERSTATUS">
            <summary>
            Specified WM_SPOOLERSTATUS enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_DRAWITEM">
            <summary>
            Specified WM_DRAWITEM enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MEASUREITEM">
            <summary>
            Specified WM_MEASUREITEM enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_DELETEITEM">
            <summary>
            Specified WM_DELETEITEM enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_VKEYTOITEM">
            <summary>
            Specified WM_VKEYTOITEM enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_CHARTOITEM">
            <summary>
            Specified WM_CHARTOITEM enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_SETFONT">
            <summary>
            Specified WM_SETFONT enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_GETFONT">
            <summary>
            Specified WM_GETFONT enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_SETHOTKEY">
            <summary>
            Specified WM_SETHOTKEY enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_GETHOTKEY">
            <summary>
            Specified WM_GETHOTKEY enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_QUERYDRAGICON">
            <summary>
            Specified WM_QUERYDRAGICON enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_COMPAREITEM">
            <summary>
            Specified WM_COMPAREITEM enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_GETOBJECT">
            <summary>
            Specified WM_GETOBJECT enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_COMPACTING">
            <summary>
            Specified WM_COMPACTING enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_COMMNOTIFY">
            <summary>
            Specified WM_COMMNOTIFY enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_WINDOWPOSCHANGING">
            <summary>
            Specified WM_WINDOWPOSCHANGING enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_WINDOWPOSCHANGED">
            <summary>
            Specified WM_WINDOWPOSCHANGED enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_POWER">
            <summary>
            Specified WM_POWER enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_COPYDATA">
            <summary>
            Specified WM_COPYDATA enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_CANCELJOURNAL">
            <summary>
            Specified WM_CANCELJOURNAL enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NOTIFY">
            <summary>
            Specified WM_NOTIFY enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_INPUTLANGCHANGEREQUEST">
            <summary>
            Specified WM_INPUTLANGCHANGEREQUEST enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_INPUTLANGCHANGE">
            <summary>
            Specified WM_INPUTLANGCHANGE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_TCARD">
            <summary>
            Specified WM_TCARD enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_HELP">
            <summary>
            Specified WM_HELP enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_USERCHANGED">
            <summary>
            Specified WM_USERCHANGED enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NOTIFYFORMAT">
            <summary>
            Specified WM_NOTIFYFORMAT enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_CONTEXTMENU">
            <summary>
            Specified WM_CONTEXTMENU enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_STYLECHANGING">
            <summary>
            Specified WM_STYLECHANGING enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_STYLECHANGED">
            <summary>
            Specified WM_STYLECHANGED enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_DISPLAYCHANGE">
            <summary>
            Specified WM_DISPLAYCHANGE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_GETICON">
            <summary>
            Specified WM_GETICON enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_SETICON">
            <summary>
            Specified WM_SETICON enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NCCREATE">
            <summary>
            Specified WM_NCCREATE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NCDESTROY">
            <summary>
            Specified VK_RMENU enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NCCALCSIZE">
            <summary>
            Specified WM_NCCALCSIZE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NCHITTEST">
            <summary>
            Specified WM_NCHITTEST enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NCPAINT">
            <summary>
            Specified WM_NCPAINT enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NCACTIVATE">
            <summary>
            Specified WM_NCACTIVATE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_GETDLGCODE">
            <summary>
            Specified WM_GETDLGCODE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_SYNCPAINT">
            <summary>
            Specified WM_SYNCPAINT enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NCMOUSEMOVE">
            <summary>
            Specified WM_NCMOUSEMOVE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NCLBUTTONDOWN">
            <summary>
            Specified WM_NCLBUTTONDOWN enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NCLBUTTONUP">
            <summary>
            Specified WM_NCLBUTTONUP enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NCLBUTTONDBLCLK">
            <summary>
            Specified WM_NCLBUTTONDBLCLK enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NCRBUTTONDOWN">
            <summary>
            Specified WM_NCRBUTTONDOWN enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NCRBUTTONUP">
            <summary>
            Specified WM_NCRBUTTONUP enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NCRBUTTONDBLCLK">
            <summary>
            Specified WM_NCRBUTTONDBLCLK enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NCMBUTTONDOWN">
            <summary>
            Specified WM_NCMBUTTONDOWN enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NCMBUTTONUP">
            <summary>
            Specified WM_NCMBUTTONUP enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NCMBUTTONDBLCLK">
            <summary>
            Specified WM_NCMBUTTONDBLCLK enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NCXBUTTONDOWN">
            <summary>
            Specified WM_NCXBUTTONDOWN enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NCXBUTTONUP">
            <summary>
            Specified WM_NCXBUTTONUP enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_KEYDOWN">
            <summary>
            Specified WM_KEYDOWN enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_KEYUP">
            <summary>
            Specified WM_KEYUP enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_CHAR">
            <summary>
            Specified WM_CHAR enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_DEADCHAR">
            <summary>
            Specified WM_DEADCHAR enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_SYSKEYDOWN">
            <summary>
            Specified WM_SYSKEYDOWN enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_SYSKEYUP">
            <summary>
            Specified WM_SYSKEYUP enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_SYSCHAR">
            <summary>
            Specified WM_SYSCHAR enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_SYSDEADCHAR">
            <summary>
            Specified WM_SYSDEADCHAR enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_KEYLAST">
            <summary>
            Specified WM_KEYLAST enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_IME_STARTCOMPOSITION">
            <summary>
            Specified WM_IME_STARTCOMPOSITION enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_IME_ENDCOMPOSITION">
            <summary>
            Specified WM_IME_ENDCOMPOSITION enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_IME_COMPOSITION">
            <summary>
            Specified WM_IME_COMPOSITION enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_IME_KEYLAST">
            <summary>
            Specified WM_IME_KEYLAST enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_INITDIALOG">
            <summary>
            Specified WM_INITDIALOG enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_COMMAND">
            <summary>
            Specified WM_COMMAND enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_SYSCOMMAND">
            <summary>
            Specified WM_SYSCOMMAND enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_TIMER">
            <summary>
            Specified WM_TIMER enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_HSCROLL">
            <summary>
            Specified WM_HSCROLL enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_VSCROLL">
            <summary>
            Specified WM_VSCROLL enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_INITMENU">
            <summary>
            Specified WM_INITMENU enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_INITMENUPOPUP">
            <summary>
            Specified WM_INITMENUPOPUP enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MENUSELECT">
            <summary>
            Specified WM_MENUSELECT enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MENUCHAR">
            <summary>
            Specified WM_MENUCHAR enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_ENTERIDLE">
            <summary>
            Specified WM_ENTERIDLE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MENURBUTTONUP">
            <summary>
            Specified WM_MENURBUTTONUP enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MENUDRAG">
            <summary>
            Specified WM_MENUDRAG enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MENUGETOBJECT">
            <summary>
            Specified WM_MENUGETOBJECT enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_UNINITMENUPOPUP">
            <summary>
            Specified WM_UNINITMENUPOPUP enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MENUCOMMAND">
            <summary>
            Specified WM_MENUCOMMAND enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_CTLCOLORMSGBOX">
            <summary>
            Specified WM_CTLCOLORMSGBOX enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_CTLCOLOREDIT">
            <summary>
            Specified WM_CTLCOLOREDIT enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_CTLCOLORLISTBOX">
            <summary>
            Specified WM_CTLCOLORLISTBOX enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_CTLCOLORBTN">
            <summary>
            Specified WM_CTLCOLORBTN enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_CTLCOLORDLG">
            <summary>
            Specified WM_CTLCOLORDLG enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_CTLCOLORSCROLLBAR">
            <summary>
            Specified WM_CTLCOLORSCROLLBAR enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_CTLCOLORSTATIC">
            <summary>
            Specified WM_CTLCOLORSTATIC enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MOUSEMOVE">
            <summary>
            Specified WM_MOUSEMOVE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_LBUTTONDOWN">
            <summary>
            Specified WM_LBUTTONDOWN enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_LBUTTONUP">
            <summary>
            Specified WM_LBUTTONUP enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_LBUTTONDBLCLK">
            <summary>
            Specified WM_LBUTTONDBLCLK enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_RBUTTONDOWN">
            <summary>
            Specified WM_RBUTTONDOWN enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_RBUTTONUP">
            <summary>
            Specified WM_RBUTTONUP enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_RBUTTONDBLCLK">
            <summary>
            Specified WM_RBUTTONDBLCLK enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MBUTTONDOWN">
            <summary>
            Specified WM_MBUTTONDOWN enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MBUTTONUP">
            <summary>
            Specified WM_MBUTTONUP enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MBUTTONDBLCLK">
            <summary>
            Specified WM_MBUTTONDBLCLK enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MOUSEWHEEL">
            <summary>
            Specified WM_MOUSEWHEEL enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_XBUTTONDOWN">
            <summary>
            Specified WM_XBUTTONDOWN enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_XBUTTONUP">
            <summary>
            Specified WM_XBUTTONUP enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_XBUTTONDBLCLK">
            <summary>
            Specified WM_XBUTTONDBLCLK enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_PARENTNOTIFY">
            <summary>
            Specified WM_PARENTNOTIFY enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_ENTERMENULOOP">
            <summary>
            Specified WM_ENTERMENULOOP enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_EXITMENULOOP">
            <summary>
            Specified WM_EXITMENULOOP enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_NEXTMENU">
            <summary>
            Specified WM_NEXTMENU enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_SIZING">
            <summary>
            Specified WM_SIZING enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_CAPTURECHANGED">
            <summary>
            Specified WM_CAPTURECHANGED enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MOVING">
            <summary>
            Specified WM_MOVING enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_DEVICECHANGE">
            <summary>
            Specified WM_DEVICECHANGE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MDICREATE">
            <summary>
            Specified WM_MDICREATE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MDIDESTROY">
            <summary>
            Specified WM_MDIDESTROY enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MDIACTIVATE">
            <summary>
            Specified WM_MDIACTIVATE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MDIRESTORE">
            <summary>
            Specified WM_MDIRESTORE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MDINEXT">
            <summary>
            Specified WM_MDINEXT enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MDIMAXIMIZE">
            <summary>
            Specified WM_MDIMAXIMIZE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MDITILE">
            <summary>
            Specified WM_MDITILE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MDICASCADE">
            <summary>
            Specified WM_MDICASCADE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MDIICONARRANGE">
            <summary>
            Specified WM_MDIICONARRANGE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MDIGETACTIVE">
            <summary>
            Specified WM_MDIGETACTIVE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MDISETMENU">
            <summary>
            Specified WM_MDISETMENU enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_ENTERSIZEMOVE">
            <summary>
            Specified WM_ENTERSIZEMOVE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_EXITSIZEMOVE">
            <summary>
            Specified WM_EXITSIZEMOVE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_DROPFILES">
            <summary>
            Specified WM_DROPFILES enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MDIREFRESHMENU">
            <summary>
            Specified WM_MDIREFRESHMENU enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_IME_SETCONTEXT">
            <summary>
            Specified WM_IME_SETCONTEXT enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_IME_NOTIFY">
            <summary>
            Specified WM_IME_NOTIFY enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_IME_CONTROL">
            <summary>
            Specified WM_IME_CONTROL enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_IME_COMPOSITIONFULL">
            <summary>
            Specified WM_IME_COMPOSITIONFULL enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_IME_SELECT">
            <summary>
            Specified WM_IME_SELECT enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_IME_CHAR">
            <summary>
            Specified WM_IME_CHAR enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_IME_REQUEST">
            <summary>
            Specified WM_IME_REQUEST enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_IME_KEYDOWN">
            <summary>
            Specified WM_IME_KEYDOWN enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_IME_KEYUP">
            <summary>
            Specified WM_IME_KEYUP enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MOUSEHOVER">
            <summary>
            Specified WM_MOUSEHOVER enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_MOUSELEAVE">
            <summary>
            Specified WM_MOUSELEAVE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_CUT">
            <summary>
            Specified WM_CUT enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_COPY">
            <summary>
            Specified WM_COPY enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_PASTE">
            <summary>
            Specified WM_PASTE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_CLEAR">
            <summary>
            Specified WM_CLEAR enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_UNDO">
            <summary>
            Specified WM_UNDO enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_RENDERFORMAT">
            <summary>
            Specified WM_RENDERFORMAT enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_RENDERALLFORMATS">
            <summary>
            Specified WM_RENDERALLFORMATS enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_DESTROYCLIPBOARD">
            <summary>
            Specified WM_DESTROYCLIPBOARD enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_DRAWCLIPBOARD">
            <summary>
            Specified WM_DRAWCLIPBOARD enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_PAINTCLIPBOARD">
            <summary>
            Specified WM_PAINTCLIPBOARD enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_VSCROLLCLIPBOARD">
            <summary>
            Specified WM_VSCROLLCLIPBOARD enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_SIZECLIPBOARD">
            <summary>
            Specified WM_SIZECLIPBOARD enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_ASKCBFORMATNAME">
            <summary>
            Specified WM_ASKCBFORMATNAME enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_CHANGECBCHAIN">
            <summary>
            Specified WM_CHANGECBCHAIN enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_HSCROLLCLIPBOARD">
            <summary>
            Specified WM_HSCROLLCLIPBOARD enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_QUERYNEWPALETTE">
            <summary>
            Specified WM_QUERYNEWPALETTE enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_PALETTEISCHANGING">
            <summary>
            Specified WM_PALETTEISCHANGING enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_PALETTECHANGED">
            <summary>
            Specified WM_PALETTECHANGED enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_HOTKEY">
            <summary>
            Specified WM_HOTKEY enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_PRINT">
            <summary>
            Specified WM_PRINT enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_PRINTCLIENT">
            <summary>
            Specified WM_PRINTCLIENT enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_HANDHELDFIRST">
            <summary>
            Specified WM_HANDHELDFIRST enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_HANDHELDLAST">
            <summary>
            Specified WM_HANDHELDLAST enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_AFXFIRST">
            <summary>
            Specified WM_AFXFIRST enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_AFXLAST">
            <summary>
            Specified WM_AFXLAST enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_PENWINFIRST">
            <summary>
            Specified WM_PENWINFIRST enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_PENWINLAST">
            <summary>
            Specified WM_PENWINLAST enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_APP">
            <summary>
            Specified WM_APP enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_USER">
            <summary>
            Specified WM_USER enumeration value.
            </summary>
        </member>
        <member name="F:WindowsMessages.WM_THEMECHANGED">
            <summary>
            Specified WM_THEMECHANGED enumeration value.
            </summary>
        </member>
    </members>
</doc>
